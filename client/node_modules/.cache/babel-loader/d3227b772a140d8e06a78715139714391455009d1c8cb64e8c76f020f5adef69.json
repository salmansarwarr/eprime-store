{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = void 0;\nvar error_1 = require(\"../../error\");\nvar auth_provider_1 = require(\"./auth_provider\");\nvar aws_service_workflow_1 = require(\"./mongodb_oidc/aws_service_workflow\");\nvar azure_service_workflow_1 = require(\"./mongodb_oidc/azure_service_workflow\");\nvar callback_workflow_1 = require(\"./mongodb_oidc/callback_workflow\");\n/** Error when credentials are missing. */\nvar MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';\n/** @internal */\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('callback', new callback_workflow_1.CallbackWorkflow());\nexports.OIDC_WORKFLOWS.set('aws', new aws_service_workflow_1.AwsServiceWorkflow());\nexports.OIDC_WORKFLOWS.set('azure', new azure_service_workflow_1.AzureServiceWorkflow());\n/**\n * OIDC auth provider.\n * @experimental\n */\nvar MongoDBOIDC = /*#__PURE__*/function (_auth_provider_1$Auth) {\n  _inherits(MongoDBOIDC, _auth_provider_1$Auth);\n  var _super = _createSuper(MongoDBOIDC);\n  /**\n   * Instantiate the auth provider.\n   */\n  function MongoDBOIDC() {\n    _classCallCheck(this, MongoDBOIDC);\n    return _super.call(this);\n  }\n  /**\n   * Authenticate using OIDC\n   */\n  _createClass(MongoDBOIDC, [{\n    key: \"auth\",\n    value: function () {\n      var _auth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authContext) {\n        var connection, reauthenticating, response, credentials, workflow;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              connection = authContext.connection, reauthenticating = authContext.reauthenticating, response = authContext.response;\n              credentials = getCredentials(authContext);\n              workflow = getWorkflow(credentials);\n              _context.next = 5;\n              return workflow.execute(connection, credentials, reauthenticating, response);\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function auth(_x) {\n        return _auth.apply(this, arguments);\n      }\n      return auth;\n    }()\n    /**\n     * Add the speculative auth for the initial handshake.\n     */\n  }, {\n    key: \"prepare\",\n    value: function () {\n      var _prepare = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(handshakeDoc, authContext) {\n        var credentials, workflow, result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              credentials = getCredentials(authContext);\n              workflow = getWorkflow(credentials);\n              _context2.next = 4;\n              return workflow.speculativeAuth(credentials);\n            case 4:\n              result = _context2.sent;\n              return _context2.abrupt(\"return\", _objectSpread(_objectSpread({}, handshakeDoc), result));\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function prepare(_x2, _x3) {\n        return _prepare.apply(this, arguments);\n      }\n      return prepare;\n    }()\n  }]);\n  return MongoDBOIDC;\n}(auth_provider_1.AuthProvider);\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Get credentials from the auth context, throwing if they do not exist.\n */\nfunction getCredentials(authContext) {\n  var credentials = authContext.credentials;\n  if (!credentials) {\n    throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n  }\n  return credentials;\n}\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(credentials) {\n  var providerName = credentials.mechanismProperties.PROVIDER_NAME;\n  var workflow = exports.OIDC_WORKFLOWS.get(providerName || 'callback');\n  if (!workflow) {\n    throw new error_1.MongoInvalidArgumentError(\"Could not load workflow for provider \".concat(credentials.mechanismProperties.PROVIDER_NAME));\n  }\n  return workflow;\n}","map":{"version":3,"names":["error_1","require","auth_provider_1","aws_service_workflow_1","azure_service_workflow_1","callback_workflow_1","MISSING_CREDENTIALS_ERROR","exports","OIDC_WORKFLOWS","Map","set","CallbackWorkflow","AwsServiceWorkflow","AzureServiceWorkflow","MongoDBOIDC","_auth_provider_1$Auth","_inherits","_super","_createSuper","_classCallCheck","call","_createClass","key","value","_auth","_asyncToGenerator","_regeneratorRuntime","mark","_callee","authContext","connection","reauthenticating","response","credentials","workflow","wrap","_callee$","_context","prev","next","getCredentials","getWorkflow","execute","stop","auth","_x","apply","arguments","_prepare","_callee2","handshakeDoc","result","_callee2$","_context2","speculativeAuth","sent","abrupt","_objectSpread","prepare","_x2","_x3","AuthProvider","MongoMissingCredentialsError","providerName","mechanismProperties","PROVIDER_NAME","get","MongoInvalidArgumentError","concat"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/cmap/auth/mongodb_oidc.ts"],"sourcesContent":["import type { Document } from 'bson';\n\nimport { MongoInvalidArgumentError, MongoMissingCredentialsError } from '../../error';\nimport type { HandshakeDocument } from '../connect';\nimport type { Connection } from '../connection';\nimport { type AuthContext, AuthProvider } from './auth_provider';\nimport type { MongoCredentials } from './mongo_credentials';\nimport { AwsServiceWorkflow } from './mongodb_oidc/aws_service_workflow';\nimport { AzureServiceWorkflow } from './mongodb_oidc/azure_service_workflow';\nimport { CallbackWorkflow } from './mongodb_oidc/callback_workflow';\n\n/** Error when credentials are missing. */\nconst MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';\n\n/**\n * @public\n * @experimental\n */\nexport interface IdPServerInfo {\n  issuer: string;\n  clientId: string;\n  requestScopes?: string[];\n}\n\n/**\n * @public\n * @experimental\n */\nexport interface IdPServerResponse {\n  accessToken: string;\n  expiresInSeconds?: number;\n  refreshToken?: string;\n}\n\n/**\n * @public\n * @experimental\n */\nexport interface OIDCCallbackContext {\n  refreshToken?: string;\n  timeoutSeconds?: number;\n  timeoutContext?: AbortSignal;\n  version: number;\n}\n\n/**\n * @public\n * @experimental\n */\nexport type OIDCRequestFunction = (\n  info: IdPServerInfo,\n  context: OIDCCallbackContext\n) => Promise<IdPServerResponse>;\n\n/**\n * @public\n * @experimental\n */\nexport type OIDCRefreshFunction = (\n  info: IdPServerInfo,\n  context: OIDCCallbackContext\n) => Promise<IdPServerResponse>;\n\ntype ProviderName = 'aws' | 'azure' | 'callback';\n\nexport interface Workflow {\n  /**\n   * All device workflows must implement this method in order to get the access\n   * token and then call authenticate with it.\n   */\n  execute(\n    connection: Connection,\n    credentials: MongoCredentials,\n    reauthenticating: boolean,\n    response?: Document\n  ): Promise<Document>;\n\n  /**\n   * Get the document to add for speculative authentication.\n   */\n  speculativeAuth(credentials: MongoCredentials): Promise<Document>;\n}\n\n/** @internal */\nexport const OIDC_WORKFLOWS: Map<ProviderName, Workflow> = new Map();\nOIDC_WORKFLOWS.set('callback', new CallbackWorkflow());\nOIDC_WORKFLOWS.set('aws', new AwsServiceWorkflow());\nOIDC_WORKFLOWS.set('azure', new AzureServiceWorkflow());\n\n/**\n * OIDC auth provider.\n * @experimental\n */\nexport class MongoDBOIDC extends AuthProvider {\n  /**\n   * Instantiate the auth provider.\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Authenticate using OIDC\n   */\n  override async auth(authContext: AuthContext): Promise<void> {\n    const { connection, reauthenticating, response } = authContext;\n    const credentials = getCredentials(authContext);\n    const workflow = getWorkflow(credentials);\n    await workflow.execute(connection, credentials, reauthenticating, response);\n  }\n\n  /**\n   * Add the speculative auth for the initial handshake.\n   */\n  override async prepare(\n    handshakeDoc: HandshakeDocument,\n    authContext: AuthContext\n  ): Promise<HandshakeDocument> {\n    const credentials = getCredentials(authContext);\n    const workflow = getWorkflow(credentials);\n    const result = await workflow.speculativeAuth(credentials);\n    return { ...handshakeDoc, ...result };\n  }\n}\n\n/**\n * Get credentials from the auth context, throwing if they do not exist.\n */\nfunction getCredentials(authContext: AuthContext): MongoCredentials {\n  const { credentials } = authContext;\n  if (!credentials) {\n    throw new MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n  }\n  return credentials;\n}\n\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(credentials: MongoCredentials): Workflow {\n  const providerName = credentials.mechanismProperties.PROVIDER_NAME;\n  const workflow = OIDC_WORKFLOWS.get(providerName || 'callback');\n  if (!workflow) {\n    throw new MongoInvalidArgumentError(\n      `Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`\n    );\n  }\n  return workflow;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}