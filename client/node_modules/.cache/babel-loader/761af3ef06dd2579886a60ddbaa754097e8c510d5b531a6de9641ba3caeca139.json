{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\nvar error_1 = require(\"../error\");\nvar count_1 = require(\"../operations/count\");\nvar execute_operation_1 = require(\"../operations/execute_operation\");\nvar find_1 = require(\"../operations/find\");\nvar sort_1 = require(\"../sort\");\nvar utils_1 = require(\"../utils\");\nvar abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nvar kFilter = Symbol('filter');\n/** @internal */\nvar kNumReturned = Symbol('numReturned');\n/** @internal */\nvar kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\nvar FindCursor = /*#__PURE__*/function (_abstract_cursor_1$Ab) {\n  _inherits(FindCursor, _abstract_cursor_1$Ab);\n  var _super = _createSuper(FindCursor);\n  /** @internal */\n  function FindCursor(client, namespace) {\n    var _this;\n    var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, FindCursor);\n    _this = _super.call(this, client, namespace, options);\n    _this[kFilter] = filter;\n    _this[kBuiltOptions] = options;\n    if (options.sort != null) {\n      _this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n    }\n    return _this;\n  }\n  _createClass(FindCursor, [{\n    key: \"clone\",\n    value: function clone() {\n      var clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n      delete clonedOptions.session;\n      return new FindCursor(this.client, this.namespace, this[kFilter], _objectSpread({}, clonedOptions));\n    }\n  }, {\n    key: \"map\",\n    value: function map(transform) {\n      return _get(_getPrototypeOf(FindCursor.prototype), \"map\", this).call(this, transform);\n    }\n    /** @internal */\n  }, {\n    key: \"_initialize\",\n    value: function _initialize(session, callback) {\n      var _this2 = this;\n      var findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], _objectSpread(_objectSpread(_objectSpread({}, this[kBuiltOptions]), this.cursorOptions), {}, {\n        session: session\n      }));\n      (0, execute_operation_1.executeOperation)(this.client, findOperation, function (err, response) {\n        if (err || response == null) return callback(err);\n        // TODO: We only need this for legacy queries that do not support `limit`, maybe\n        //       the value should only be saved in those cases.\n        if (response.cursor) {\n          _this2[kNumReturned] = response.cursor.firstBatch.length;\n        } else {\n          _this2[kNumReturned] = response.documents ? response.documents.length : 0;\n        }\n        // TODO: NODE-2882\n        callback(undefined, {\n          server: findOperation.server,\n          session: session,\n          response: response\n        });\n      });\n    }\n    /** @internal */\n  }, {\n    key: \"_getMore\",\n    value: function _getMore(batchSize, callback) {\n      var _this3 = this;\n      // NOTE: this is to support client provided limits in pre-command servers\n      var numReturned = this[kNumReturned];\n      if (numReturned) {\n        var limit = this[kBuiltOptions].limit;\n        batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n        if (batchSize <= 0) {\n          this.close().finally(function () {\n            return callback();\n          });\n          return;\n        }\n      }\n      _get(_getPrototypeOf(FindCursor.prototype), \"_getMore\", this).call(this, batchSize, function (err, response) {\n        if (err) return callback(err);\n        // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n        if (response) {\n          _this3[kNumReturned] = _this3[kNumReturned] + response.cursor.nextBatch.length;\n        }\n        callback(undefined, response);\n      });\n    }\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n  }, {\n    key: \"count\",\n    value: function () {\n      var _count = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n              if (!(typeof options === 'boolean')) {\n                _context.next = 3;\n                break;\n              }\n              throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n            case 3:\n              return _context.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], _objectSpread(_objectSpread(_objectSpread({}, this[kBuiltOptions]), this.cursorOptions), options))));\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function count(_x) {\n        return _count.apply(this, arguments);\n      }\n      return count;\n    }() /** Execute the explain for the cursor */\n  }, {\n    key: \"explain\",\n    value: function () {\n      var _explain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(verbosity) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], _objectSpread(_objectSpread(_objectSpread({}, this[kBuiltOptions]), this.cursorOptions), {}, {\n                explain: verbosity !== null && verbosity !== void 0 ? verbosity : true\n              }))));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function explain(_x2) {\n        return _explain.apply(this, arguments);\n      }\n      return explain;\n    }() /** Set the cursor query */\n  }, {\n    key: \"filter\",\n    value: function filter(_filter) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kFilter] = _filter;\n      return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n  }, {\n    key: \"hint\",\n    value: function hint(_hint) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].hint = _hint;\n      return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n  }, {\n    key: \"min\",\n    value: function min(_min) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].min = _min;\n      return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n  }, {\n    key: \"max\",\n    value: function max(_max) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].max = _max;\n      return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n  }, {\n    key: \"returnKey\",\n    value: function returnKey(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].returnKey = value;\n      return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n  }, {\n    key: \"showRecordId\",\n    value: function showRecordId(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].showRecordId = value;\n      return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n  }, {\n    key: \"addQueryModifier\",\n    value: function addQueryModifier(name, value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (name[0] !== '$') {\n        throw new error_1.MongoInvalidArgumentError(\"\".concat(name, \" is not a valid query modifier\"));\n      }\n      // Strip of the $\n      var field = name.substr(1);\n      // NOTE: consider some TS magic for this\n      switch (field) {\n        case 'comment':\n          this[kBuiltOptions].comment = value;\n          break;\n        case 'explain':\n          this[kBuiltOptions].explain = value;\n          break;\n        case 'hint':\n          this[kBuiltOptions].hint = value;\n          break;\n        case 'max':\n          this[kBuiltOptions].max = value;\n          break;\n        case 'maxTimeMS':\n          this[kBuiltOptions].maxTimeMS = value;\n          break;\n        case 'min':\n          this[kBuiltOptions].min = value;\n          break;\n        case 'orderby':\n          this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n          break;\n        case 'query':\n          this[kFilter] = value;\n          break;\n        case 'returnKey':\n          this[kBuiltOptions].returnKey = value;\n          break;\n        case 'showDiskLoc':\n          this[kBuiltOptions].showRecordId = value;\n          break;\n        default:\n          throw new error_1.MongoInvalidArgumentError(\"Invalid query modifier: \".concat(name));\n      }\n      return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n  }, {\n    key: \"comment\",\n    value: function comment(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].comment = value;\n      return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n  }, {\n    key: \"maxAwaitTimeMS\",\n    value: function maxAwaitTimeMS(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n      }\n      this[kBuiltOptions].maxAwaitTimeMS = value;\n      return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n  }, {\n    key: \"maxTimeMS\",\n    value: function maxTimeMS(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n      }\n      this[kBuiltOptions].maxTimeMS = value;\n      return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n  }, {\n    key: \"project\",\n    value: function project(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].projection = value;\n      return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n  }, {\n    key: \"sort\",\n    value: function sort(_sort, direction) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (this[kBuiltOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n      }\n      this[kBuiltOptions].sort = (0, sort_1.formatSort)(_sort, direction);\n      return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n  }, {\n    key: \"allowDiskUse\",\n    value: function allowDiskUse() {\n      var allow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (!this[kBuiltOptions].sort) {\n        throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n      }\n      // As of 6.0 the default is true. This allows users to get back to the old behavior.\n      if (!allow) {\n        this[kBuiltOptions].allowDiskUse = false;\n        return this;\n      }\n      this[kBuiltOptions].allowDiskUse = true;\n      return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n  }, {\n    key: \"collation\",\n    value: function collation(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].collation = value;\n      return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n  }, {\n    key: \"limit\",\n    value: function limit(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (this[kBuiltOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n      }\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n      }\n      this[kBuiltOptions].limit = value;\n      return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n  }, {\n    key: \"skip\",\n    value: function skip(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (this[kBuiltOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n      }\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n      }\n      this[kBuiltOptions].skip = value;\n      return this;\n    }\n  }]);\n  return FindCursor;\n}(abstract_cursor_1.AbstractCursor);\nexports.FindCursor = FindCursor;","map":{"version":3,"names":["error_1","require","count_1","execute_operation_1","find_1","sort_1","utils_1","abstract_cursor_1","kFilter","Symbol","kNumReturned","kBuiltOptions","exports","FLAGS","FindCursor","_abstract_cursor_1$Ab","_inherits","_super","_createSuper","client","namespace","_this","filter","arguments","length","undefined","options","_classCallCheck","call","sort","formatSort","_createClass","key","value","clone","clonedOptions","mergeOptions","session","_objectSpread","map","transform","_get","_getPrototypeOf","prototype","_initialize","callback","_this2","findOperation","FindOperation","cursorOptions","executeOperation","err","response","cursor","firstBatch","documents","server","_getMore","batchSize","_this3","numReturned","limit","close","finally","nextBatch","_count","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","emitWarningOnce","MongoInvalidArgumentError","abrupt","CountOperation","stop","count","_x","apply","_explain","_callee2","verbosity","_callee2$","_context2","explain","_x2","assertUninitialized","hint","min","max","returnKey","showRecordId","addQueryModifier","name","concat","field","substr","comment","maxTimeMS","maxAwaitTimeMS","project","projection","direction","tailable","MongoTailableCursorError","allowDiskUse","allow","collation","skip","AbstractCursor"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/cursor/find_cursor.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { MongoInvalidArgumentError, MongoTailableCursorError } from '../error';\nimport type { ExplainVerbosityLike } from '../explain';\nimport type { MongoClient } from '../mongo_client';\nimport type { CollationOptions } from '../operations/command';\nimport { CountOperation, type CountOptions } from '../operations/count';\nimport { executeOperation, type ExecutionResult } from '../operations/execute_operation';\nimport { FindOperation, type FindOptions } from '../operations/find';\nimport type { Hint } from '../operations/operation';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, type Sort, type SortDirection } from '../sort';\nimport { type Callback, emitWarningOnce, mergeOptions, type MongoDBNamespace } from '../utils';\nimport { AbstractCursor, assertUninitialized } from './abstract_cursor';\n\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n\n/** @public Flags allowed for cursor */\nexport const FLAGS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'exhaust',\n  'partial'\n] as const;\n\n/** @public */\nexport class FindCursor<TSchema = any> extends AbstractCursor<TSchema> {\n  /** @internal */\n  [kFilter]: Document;\n  /** @internal */\n  [kNumReturned]?: number;\n  /** @internal */\n  [kBuiltOptions]: FindOptions;\n\n  /** @internal */\n  constructor(\n    client: MongoClient,\n    namespace: MongoDBNamespace,\n    filter: Document = {},\n    options: FindOptions = {}\n  ) {\n    super(client, namespace, options);\n\n    this[kFilter] = filter;\n    this[kBuiltOptions] = options;\n\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = formatSort(options.sort);\n    }\n  }\n\n  clone(): FindCursor<TSchema> {\n    const clonedOptions = mergeOptions({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.client, this.namespace, this[kFilter], {\n      ...clonedOptions\n    });\n  }\n\n  override map<T>(transform: (doc: TSchema) => T): FindCursor<T> {\n    return super.map(transform) as FindCursor<T>;\n  }\n\n  /** @internal */\n  _initialize(session: ClientSession, callback: Callback<ExecutionResult>): void {\n    const findOperation = new FindOperation(undefined, this.namespace, this[kFilter], {\n      ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n      ...this.cursorOptions,\n      session\n    });\n\n    executeOperation(this.client, findOperation, (err, response) => {\n      if (err || response == null) return callback(err);\n\n      // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      }\n\n      // TODO: NODE-2882\n      callback(undefined, { server: findOperation.server, session, response });\n    });\n  }\n\n  /** @internal */\n  override _getMore(batchSize: number, callback: Callback<Document>): void {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize =\n        limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n\n      if (batchSize <= 0) {\n        this.close().finally(() => callback());\n        return;\n      }\n    }\n\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err);\n\n      // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n\n      callback(undefined, response);\n    });\n  }\n\n  /**\n   * Get the count of documents for this cursor\n   * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n   */\n  async count(options?: CountOptions): Promise<number> {\n    emitWarningOnce(\n      'cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead '\n    );\n    if (typeof options === 'boolean') {\n      throw new MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n    return executeOperation(\n      this.client,\n      new CountOperation(this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        ...options\n      })\n    );\n  }\n\n  /** Execute the explain for the cursor */\n  async explain(verbosity?: ExplainVerbosityLike): Promise<Document> {\n    return executeOperation(\n      this.client,\n      new FindOperation(undefined, this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        explain: verbosity ?? true\n      })\n    );\n  }\n\n  /** Set the cursor query */\n  filter(filter: Document): this {\n    assertUninitialized(this);\n    this[kFilter] = filter;\n    return this;\n  }\n\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n  hint(hint: Hint): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n  min(min: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n  max(max: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n  returnKey(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n  showRecordId(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n  addQueryModifier(name: string, value: string | boolean | number | Document): this {\n    assertUninitialized(this);\n    if (name[0] !== '$') {\n      throw new MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    }\n\n    // Strip of the $\n    const field = name.substr(1);\n\n    // NOTE: consider some TS magic for this\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value as string | Document;\n        break;\n\n      case 'explain':\n        this[kBuiltOptions].explain = value as boolean;\n        break;\n\n      case 'hint':\n        this[kBuiltOptions].hint = value as string | Document;\n        break;\n\n      case 'max':\n        this[kBuiltOptions].max = value as Document;\n        break;\n\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value as number;\n        break;\n\n      case 'min':\n        this[kBuiltOptions].min = value as Document;\n        break;\n\n      case 'orderby':\n        this[kBuiltOptions].sort = formatSort(value as string | Document);\n        break;\n\n      case 'query':\n        this[kFilter] = value as Document;\n        break;\n\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value as boolean;\n        break;\n\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value as boolean;\n        break;\n\n      default:\n        throw new MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n  comment(value: string): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n  maxAwaitTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  override maxTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project<T extends Document = Document>(value: Document): FindCursor<T> {\n    assertUninitialized(this);\n    this[kBuiltOptions].projection = value;\n    return this as unknown as FindCursor<T>;\n  }\n\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n  sort(sort: Sort | string, direction?: SortDirection): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n\n    this[kBuiltOptions].sort = formatSort(sort, direction);\n    return this;\n  }\n\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n  allowDiskUse(allow = true): this {\n    assertUninitialized(this);\n\n    if (!this[kBuiltOptions].sort) {\n      throw new MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    }\n\n    // As of 6.0 the default is true. This allows users to get back to the old behavior.\n    if (!allow) {\n      this[kBuiltOptions].allowDiskUse = false;\n      return this;\n    }\n\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n  collation(value: CollationOptions): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n  limit(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n  skip(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}