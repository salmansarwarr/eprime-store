{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandOperation = void 0;\nvar error_1 = require(\"../error\");\nvar explain_1 = require(\"../explain\");\nvar read_concern_1 = require(\"../read_concern\");\nvar server_selection_1 = require(\"../sdam/server_selection\");\nvar utils_1 = require(\"../utils\");\nvar write_concern_1 = require(\"../write_concern\");\nvar operation_1 = require(\"./operation\");\n/** @internal */\nvar CommandOperation = /*#__PURE__*/function (_operation_1$Abstract) {\n  _inherits(CommandOperation, _operation_1$Abstract);\n  var _super = _createSuper(CommandOperation);\n  function CommandOperation(parent, options) {\n    var _this;\n    _classCallCheck(this, CommandOperation);\n    _this = _super.call(this, options);\n    _this.options = options !== null && options !== void 0 ? options : {};\n    // NOTE: this was explicitly added for the add/remove user operations, it's likely\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n    //       as a parent?\n    var dbNameOverride = (options === null || options === void 0 ? void 0 : options.dbName) || (options === null || options === void 0 ? void 0 : options.authdb);\n    if (dbNameOverride) {\n      _this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n    } else {\n      _this.ns = parent ? parent.s.namespace.withCollection('$cmd') : new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    _this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    _this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n    if (_this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      _this.explain = explain_1.Explain.fromOptions(options);\n    } else if ((options === null || options === void 0 ? void 0 : options.explain) != null) {\n      throw new error_1.MongoInvalidArgumentError(\"Option \\\"explain\\\" is not supported on this command\");\n    }\n    return _this;\n  }\n  _createClass(CommandOperation, [{\n    key: \"canRetryWrite\",\n    get: function get() {\n      if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n        return this.explain == null;\n      }\n      return true;\n    }\n  }, {\n    key: \"executeCommand\",\n    value: function executeCommand(server, session, cmd, callback) {\n      // TODO: consider making this a non-enumerable property\n      this.server = server;\n      var options = _objectSpread(_objectSpread(_objectSpread({}, this.options), this.bsonOptions), {}, {\n        readPreference: this.readPreference,\n        session: session\n      });\n      var serverWireVersion = (0, utils_1.maxWireVersion)(server);\n      var inTransaction = this.session && this.session.inTransaction();\n      if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n        Object.assign(cmd, {\n          readConcern: this.readConcern\n        });\n      }\n      if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n        options.omitReadPreference = true;\n      }\n      if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n        write_concern_1.WriteConcern.apply(cmd, this.writeConcern);\n      }\n      if (options.collation && typeof options.collation === 'object' && !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n        Object.assign(cmd, {\n          collation: options.collation\n        });\n      }\n      if (typeof options.maxTimeMS === 'number') {\n        cmd.maxTimeMS = options.maxTimeMS;\n      }\n      if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n        cmd = (0, utils_1.decorateWithExplain)(cmd, this.explain);\n      }\n      server.command(this.ns, cmd, options, callback);\n    }\n  }]);\n  return CommandOperation;\n}(operation_1.AbstractCallbackOperation);\nexports.CommandOperation = CommandOperation;","map":{"version":3,"names":["error_1","require","explain_1","read_concern_1","server_selection_1","utils_1","write_concern_1","operation_1","CommandOperation","_operation_1$Abstract","_inherits","_super","_createSuper","parent","options","_this","_classCallCheck","call","dbNameOverride","dbName","authdb","ns","MongoDBNamespace","s","namespace","withCollection","readConcern","ReadConcern","fromOptions","writeConcern","WriteConcern","hasAspect","Aspect","EXPLAINABLE","explain","Explain","MongoInvalidArgumentError","_createClass","key","get","value","executeCommand","server","session","cmd","callback","_objectSpread","bsonOptions","readPreference","serverWireVersion","maxWireVersion","inTransaction","commandSupportsReadConcern","Object","assign","trySecondaryWrite","MIN_SECONDARY_WRITE_WIRE_VERSION","omitReadPreference","WRITE_OPERATION","apply","collation","SKIP_COLLATION","maxTimeMS","decorateWithExplain","command","AbstractCallbackOperation","exports"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/operations/command.ts"],"sourcesContent":["import type { BSONSerializeOptions, Document } from '../bson';\nimport { MongoInvalidArgumentError } from '../error';\nimport { Explain, type ExplainOptions } from '../explain';\nimport { ReadConcern } from '../read_concern';\nimport type { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport { MIN_SECONDARY_WRITE_WIRE_VERSION } from '../sdam/server_selection';\nimport type { ClientSession } from '../sessions';\nimport {\n  type Callback,\n  commandSupportsReadConcern,\n  decorateWithExplain,\n  maxWireVersion,\n  MongoDBNamespace\n} from '../utils';\nimport { WriteConcern, type WriteConcernOptions } from '../write_concern';\nimport type { ReadConcernLike } from './../read_concern';\nimport { AbstractCallbackOperation, Aspect, type OperationOptions } from './operation';\n\n/** @public */\nexport interface CollationOptions {\n  locale: string;\n  caseLevel?: boolean;\n  caseFirst?: string;\n  strength?: number;\n  numericOrdering?: boolean;\n  alternate?: string;\n  maxVariable?: string;\n  backwards?: boolean;\n  normalization?: boolean;\n}\n\n/** @public */\nexport interface CommandOperationOptions\n  extends OperationOptions,\n    WriteConcernOptions,\n    ExplainOptions {\n  /** Specify a read concern and level for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcernLike;\n  /** Collation */\n  collation?: CollationOptions;\n  maxTimeMS?: number;\n  /**\n   * Comment to apply to the operation.\n   *\n   * In server versions pre-4.4, 'comment' must be string.  A server\n   * error will be thrown if any other type is provided.\n   *\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n   */\n  comment?: unknown;\n  /** Should retry failed writes */\n  retryWrites?: boolean;\n\n  // Admin command overrides.\n  dbName?: string;\n  authdb?: string;\n  noResponse?: boolean;\n}\n\n/** @internal */\nexport interface OperationParent {\n  s: { namespace: MongoDBNamespace };\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n  readPreference?: ReadPreference;\n  bsonOptions?: BSONSerializeOptions;\n}\n\n/** @internal */\nexport abstract class CommandOperation<T> extends AbstractCallbackOperation<T> {\n  override options: CommandOperationOptions;\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n  explain?: Explain;\n\n  constructor(parent?: OperationParent, options?: CommandOperationOptions) {\n    super(options);\n    this.options = options ?? {};\n\n    // NOTE: this was explicitly added for the add/remove user operations, it's likely\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n    //       as a parent?\n    const dbNameOverride = options?.dbName || options?.authdb;\n    if (dbNameOverride) {\n      this.ns = new MongoDBNamespace(dbNameOverride, '$cmd');\n    } else {\n      this.ns = parent\n        ? parent.s.namespace.withCollection('$cmd')\n        : new MongoDBNamespace('admin', '$cmd');\n    }\n\n    this.readConcern = ReadConcern.fromOptions(options);\n    this.writeConcern = WriteConcern.fromOptions(options);\n\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\n      this.explain = Explain.fromOptions(options);\n    } else if (options?.explain != null) {\n      throw new MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n    }\n  }\n\n  override get canRetryWrite(): boolean {\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\n      return this.explain == null;\n    }\n    return true;\n  }\n\n  executeCommand(\n    server: Server,\n    session: ClientSession | undefined,\n    cmd: Document,\n    callback: Callback\n  ): void {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference,\n      session\n    };\n\n    const serverWireVersion = maxWireVersion(server);\n    const inTransaction = this.session && this.session.inTransaction();\n\n    if (this.readConcern && commandSupportsReadConcern(cmd) && !inTransaction) {\n      Object.assign(cmd, { readConcern: this.readConcern });\n    }\n\n    if (this.trySecondaryWrite && serverWireVersion < MIN_SECONDARY_WRITE_WIRE_VERSION) {\n      options.omitReadPreference = true;\n    }\n\n    if (this.writeConcern && this.hasAspect(Aspect.WRITE_OPERATION) && !inTransaction) {\n      WriteConcern.apply(cmd, this.writeConcern);\n    }\n\n    if (\n      options.collation &&\n      typeof options.collation === 'object' &&\n      !this.hasAspect(Aspect.SKIP_COLLATION)\n    ) {\n      Object.assign(cmd, { collation: options.collation });\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    if (this.hasAspect(Aspect.EXPLAINABLE) && this.explain) {\n      cmd = decorateWithExplain(cmd, this.explain);\n    }\n\n    server.command(this.ns, cmd, options, callback);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}