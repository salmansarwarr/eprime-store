{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamDescription = void 0;\nvar common_1 = require(\"../sdam/common\");\nvar server_description_1 = require(\"../sdam/server_description\");\nvar RESPONSE_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', 'logicalSessionTimeoutMinutes'];\n/** @public */\nvar StreamDescription = /*#__PURE__*/function () {\n  function StreamDescription(address, options) {\n    _classCallCheck(this, StreamDescription);\n    this.address = address;\n    this.type = common_1.ServerType.Unknown;\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.logicalSessionTimeoutMinutes = options === null || options === void 0 ? void 0 : options.logicalSessionTimeoutMinutes;\n    this.loadBalanced = !!(options !== null && options !== void 0 && options.loadBalanced);\n    this.compressors = options && options.compressors && Array.isArray(options.compressors) ? options.compressors : [];\n  }\n  _createClass(StreamDescription, [{\n    key: \"receiveResponse\",\n    value: function receiveResponse(response) {\n      if (response == null) {\n        return;\n      }\n      this.type = (0, server_description_1.parseServerType)(response);\n      for (var _i = 0, _RESPONSE_FIELDS = RESPONSE_FIELDS; _i < _RESPONSE_FIELDS.length; _i++) {\n        var field = _RESPONSE_FIELDS[_i];\n        if (response[field] != null) {\n          this[field] = response[field];\n        }\n        // testing case\n        if ('__nodejs_mock_server__' in response) {\n          this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n        }\n      }\n      if (response.compression) {\n        this.compressor = this.compressors.filter(function (c) {\n          var _response$compression;\n          return (_response$compression = response.compression) === null || _response$compression === void 0 ? void 0 : _response$compression.includes(c);\n        })[0];\n      }\n    }\n  }]);\n  return StreamDescription;\n}();\nexports.StreamDescription = StreamDescription;","map":{"version":3,"names":["common_1","require","server_description_1","RESPONSE_FIELDS","StreamDescription","address","options","_classCallCheck","type","ServerType","Unknown","minWireVersion","undefined","maxWireVersion","maxBsonObjectSize","maxMessageSizeBytes","maxWriteBatchSize","logicalSessionTimeoutMinutes","loadBalanced","compressors","Array","isArray","_createClass","key","value","receiveResponse","response","parseServerType","_i","_RESPONSE_FIELDS","length","field","__nodejs_mock_server__","compression","compressor","filter","c","_response$compression","includes","exports"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/cmap/stream_description.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { ServerType } from '../sdam/common';\nimport { parseServerType } from '../sdam/server_description';\nimport type { CompressorName } from './wire_protocol/compression';\n\nconst RESPONSE_FIELDS = [\n  'minWireVersion',\n  'maxWireVersion',\n  'maxBsonObjectSize',\n  'maxMessageSizeBytes',\n  'maxWriteBatchSize',\n  'logicalSessionTimeoutMinutes'\n] as const;\n\n/** @public */\nexport interface StreamDescriptionOptions {\n  compressors?: CompressorName[];\n  logicalSessionTimeoutMinutes?: number;\n  loadBalanced: boolean;\n}\n\n/** @public */\nexport class StreamDescription {\n  address: string;\n  type: string;\n  minWireVersion?: number;\n  maxWireVersion?: number;\n  maxBsonObjectSize: number;\n  maxMessageSizeBytes: number;\n  maxWriteBatchSize: number;\n  compressors: CompressorName[];\n  compressor?: CompressorName;\n  logicalSessionTimeoutMinutes?: number;\n  loadBalanced: boolean;\n\n  __nodejs_mock_server__?: boolean;\n\n  zlibCompressionLevel?: number;\n\n  constructor(address: string, options?: StreamDescriptionOptions) {\n    this.address = address;\n    this.type = ServerType.Unknown;\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n    this.loadBalanced = !!options?.loadBalanced;\n    this.compressors =\n      options && options.compressors && Array.isArray(options.compressors)\n        ? options.compressors\n        : [];\n  }\n\n  receiveResponse(response: Document | null): void {\n    if (response == null) {\n      return;\n    }\n    this.type = parseServerType(response);\n    for (const field of RESPONSE_FIELDS) {\n      if (response[field] != null) {\n        this[field] = response[field];\n      }\n\n      // testing case\n      if ('__nodejs_mock_server__' in response) {\n        this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n      }\n    }\n\n    if (response.compression) {\n      this.compressor = this.compressors.filter(c => response.compression?.includes(c))[0];\n    }\n  }\n}\n"],"mappings":";;;;;;;;AACA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,oBAAA,GAAAD,OAAA;AAGA,IAAME,eAAe,GAAG,CACtB,gBAAgB,EAChB,gBAAgB,EAChB,mBAAmB,EACnB,qBAAqB,EACrB,mBAAmB,EACnB,8BAA8B,CACtB;AASV;AAAA,IACaC,iBAAiB;EAiB5B,SAAAA,kBAAYC,OAAe,EAAEC,OAAkC;IAAAC,eAAA,OAAAH,iBAAA;IAC7D,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACG,IAAI,GAAGR,QAAA,CAAAS,UAAU,CAACC,OAAO;IAC9B,IAAI,CAACC,cAAc,GAAGC,SAAS;IAC/B,IAAI,CAACC,cAAc,GAAGD,SAAS;IAC/B,IAAI,CAACE,iBAAiB,GAAG,QAAQ;IACjC,IAAI,CAACC,mBAAmB,GAAG,QAAQ;IACnC,IAAI,CAACC,iBAAiB,GAAG,MAAM;IAC/B,IAAI,CAACC,4BAA4B,GAAGX,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEW,4BAA4B;IACzE,IAAI,CAACC,YAAY,GAAG,CAAC,EAACZ,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEY,YAAY;IAC3C,IAAI,CAACC,WAAW,GACdb,OAAO,IAAIA,OAAO,CAACa,WAAW,IAAIC,KAAK,CAACC,OAAO,CAACf,OAAO,CAACa,WAAW,CAAC,GAChEb,OAAO,CAACa,WAAW,GACnB,EAAE;EACV;EAACG,YAAA,CAAAlB,iBAAA;IAAAmB,GAAA;IAAAC,KAAA,EAED,SAAAC,gBAAgBC,QAAyB;MACvC,IAAIA,QAAQ,IAAI,IAAI,EAAE;QACpB;;MAEF,IAAI,CAAClB,IAAI,GAAG,IAAAN,oBAAA,CAAAyB,eAAe,EAACD,QAAQ,CAAC;MACrC,SAAAE,EAAA,MAAAC,gBAAA,GAAoB1B,eAAe,EAAAyB,EAAA,GAAAC,gBAAA,CAAAC,MAAA,EAAAF,EAAA,IAAE;QAAhC,IAAMG,KAAK,GAAAF,gBAAA,CAAAD,EAAA;QACd,IAAIF,QAAQ,CAACK,KAAK,CAAC,IAAI,IAAI,EAAE;UAC3B,IAAI,CAACA,KAAK,CAAC,GAAGL,QAAQ,CAACK,KAAK,CAAC;;QAG/B;QACA,IAAI,wBAAwB,IAAIL,QAAQ,EAAE;UACxC,IAAI,CAACM,sBAAsB,GAAGN,QAAQ,CAAC,wBAAwB,CAAC;;;MAIpE,IAAIA,QAAQ,CAACO,WAAW,EAAE;QACxB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACf,WAAW,CAACgB,MAAM,CAAC,UAAAC,CAAC;UAAA,IAAAC,qBAAA;UAAA,QAAAA,qBAAA,GAAIX,QAAQ,CAACO,WAAW,cAAAI,qBAAA,uBAApBA,qBAAA,CAAsBC,QAAQ,CAACF,CAAC,CAAC;QAAA,EAAC,CAAC,CAAC,CAAC;;IAExF;EAAC;EAAA,OAAAhC,iBAAA;AAAA;AApDHmC,OAAA,CAAAnC,iBAAA,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}