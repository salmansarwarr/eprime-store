{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\nvar error_1 = require(\"../error\");\nvar utils_1 = require(\"../utils\");\nvar write_concern_1 = require(\"../write_concern\");\nvar command_1 = require(\"./command\");\nvar operation_1 = require(\"./operation\");\n/** @internal */\nexports.DB_AGGREGATE_COLLECTION = 1;\nvar MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */\nvar AggregateOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(AggregateOperation, _command_1$CommandOpe);\n  var _super = _createSuper(AggregateOperation);\n  function AggregateOperation(ns, pipeline, options) {\n    var _this;\n    _classCallCheck(this, AggregateOperation);\n    _this = _super.call(this, undefined, _objectSpread(_objectSpread({}, options), {}, {\n      dbName: ns.db\n    }));\n    _this.options = _objectSpread({}, options);\n    // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n    _this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n    _this.pipeline = pipeline;\n    // determine if we have a write stage, override read preference if so\n    _this.hasWriteStage = false;\n    if (typeof (options === null || options === void 0 ? void 0 : options.out) === 'string') {\n      _this.pipeline = _this.pipeline.concat({\n        $out: options.out\n      });\n      _this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      var finalStage = pipeline[pipeline.length - 1];\n      if (finalStage.$out || finalStage.$merge) {\n        _this.hasWriteStage = true;\n      }\n    }\n    if (_this.hasWriteStage) {\n      _this.trySecondaryWrite = true;\n    } else {\n      delete _this.options.writeConcern;\n    }\n    if (_this.explain && _this.writeConcern) {\n      throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n    }\n    if ((options === null || options === void 0 ? void 0 : options.cursor) != null && typeof options.cursor !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Cursor options must be an object');\n    }\n    return _this;\n  }\n  _createClass(AggregateOperation, [{\n    key: \"canRetryRead\",\n    get: function get() {\n      return !this.hasWriteStage;\n    }\n  }, {\n    key: \"addToPipeline\",\n    value: function addToPipeline(stage) {\n      this.pipeline.push(stage);\n    }\n  }, {\n    key: \"executeCallback\",\n    value: function executeCallback(server, session, callback) {\n      var options = this.options;\n      var serverWireVersion = (0, utils_1.maxWireVersion)(server);\n      var command = {\n        aggregate: this.target,\n        pipeline: this.pipeline\n      };\n      if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n        this.readConcern = undefined;\n      }\n      if (this.hasWriteStage && this.writeConcern) {\n        write_concern_1.WriteConcern.apply(command, this.writeConcern);\n      }\n      if (options.bypassDocumentValidation === true) {\n        command.bypassDocumentValidation = options.bypassDocumentValidation;\n      }\n      if (typeof options.allowDiskUse === 'boolean') {\n        command.allowDiskUse = options.allowDiskUse;\n      }\n      if (options.hint) {\n        command.hint = options.hint;\n      }\n      if (options.let) {\n        command.let = options.let;\n      }\n      // we check for undefined specifically here to allow falsy values\n      // eslint-disable-next-line no-restricted-syntax\n      if (options.comment !== undefined) {\n        command.comment = options.comment;\n      }\n      command.cursor = options.cursor || {};\n      if (options.batchSize && !this.hasWriteStage) {\n        command.cursor.batchSize = options.batchSize;\n      }\n      _get(_getPrototypeOf(AggregateOperation.prototype), \"executeCommand\", this).call(this, server, session, command, callback);\n    }\n  }]);\n  return AggregateOperation;\n}(command_1.CommandOperation);\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"names":["error_1","require","utils_1","write_concern_1","command_1","operation_1","exports","DB_AGGREGATE_COLLECTION","MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT","AggregateOperation","_command_1$CommandOpe","_inherits","_super","_createSuper","ns","pipeline","options","_this","_classCallCheck","call","undefined","_objectSpread","dbName","db","target","collection","hasWriteStage","out","concat","$out","length","finalStage","$merge","trySecondaryWrite","writeConcern","explain","MongoInvalidArgumentError","cursor","_createClass","key","get","value","addToPipeline","stage","push","executeCallback","server","session","callback","serverWireVersion","maxWireVersion","command","aggregate","readConcern","WriteConcern","apply","bypassDocumentValidation","allowDiskUse","hint","let","comment","batchSize","_get","_getPrototypeOf","prototype","CommandOperation","defineAspects","Aspect","READ_OPERATION","RETRYABLE","EXPLAINABLE","CURSOR_CREATING"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/operations/aggregate.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { MongoInvalidArgumentError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { type Callback, maxWireVersion, type MongoDBNamespace } from '../utils';\nimport { WriteConcern } from '../write_concern';\nimport { type CollationOptions, CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects, type Hint } from './operation';\n\n/** @internal */\nexport const DB_AGGREGATE_COLLECTION = 1 as const;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8 as const;\n\n/** @public */\nexport interface AggregateOptions extends CommandOperationOptions {\n  /** allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 \\>). */\n  allowDiskUse?: boolean;\n  /** The number of documents to return per batch. See [aggregation documentation](https://www.mongodb.com/docs/manual/reference/command/aggregate). */\n  batchSize?: number;\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n  bypassDocumentValidation?: boolean;\n  /** Return the query as cursor, on 2.6 \\> it returns as a real cursor on pre 2.6 it returns as an emulated cursor. */\n  cursor?: Document;\n  /** specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point. */\n  maxTimeMS?: number;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. */\n  maxAwaitTimeMS?: number;\n  /** Specify collation. */\n  collation?: CollationOptions;\n  /** Add an index selection hint to an aggregation command */\n  hint?: Hint;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n\n  out?: string;\n}\n\n/** @internal */\nexport class AggregateOperation<T = Document> extends CommandOperation<T> {\n  override options: AggregateOptions;\n  target: string | typeof DB_AGGREGATE_COLLECTION;\n  pipeline: Document[];\n  hasWriteStage: boolean;\n\n  constructor(ns: MongoDBNamespace, pipeline: Document[], options?: AggregateOptions) {\n    super(undefined, { ...options, dbName: ns.db });\n\n    this.options = { ...options };\n\n    // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n    this.target = ns.collection || DB_AGGREGATE_COLLECTION;\n\n    this.pipeline = pipeline;\n\n    // determine if we have a write stage, override read preference if so\n    this.hasWriteStage = false;\n    if (typeof options?.out === 'string') {\n      this.pipeline = this.pipeline.concat({ $out: options.out });\n      this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      const finalStage = pipeline[pipeline.length - 1];\n      if (finalStage.$out || finalStage.$merge) {\n        this.hasWriteStage = true;\n      }\n    }\n\n    if (this.hasWriteStage) {\n      this.trySecondaryWrite = true;\n    } else {\n      delete this.options.writeConcern;\n    }\n\n    if (this.explain && this.writeConcern) {\n      throw new MongoInvalidArgumentError(\n        'Option \"explain\" cannot be used on an aggregate call with writeConcern'\n      );\n    }\n\n    if (options?.cursor != null && typeof options.cursor !== 'object') {\n      throw new MongoInvalidArgumentError('Cursor options must be an object');\n    }\n  }\n\n  override get canRetryRead(): boolean {\n    return !this.hasWriteStage;\n  }\n\n  addToPipeline(stage: Document): void {\n    this.pipeline.push(stage);\n  }\n\n  override executeCallback(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<T>\n  ): void {\n    const options: AggregateOptions = this.options;\n    const serverWireVersion = maxWireVersion(server);\n    const command: Document = { aggregate: this.target, pipeline: this.pipeline };\n\n    if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n      this.readConcern = undefined;\n    }\n\n    if (this.hasWriteStage && this.writeConcern) {\n      WriteConcern.apply(command, this.writeConcern);\n    }\n\n    if (options.bypassDocumentValidation === true) {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (typeof options.allowDiskUse === 'boolean') {\n      command.allowDiskUse = options.allowDiskUse;\n    }\n\n    if (options.hint) {\n      command.hint = options.hint;\n    }\n\n    if (options.let) {\n      command.let = options.let;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    command.cursor = options.cursor || {};\n    if (options.batchSize && !this.hasWriteStage) {\n      command.cursor.batchSize = options.batchSize;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\ndefineAspects(AggregateOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXPLAINABLE,\n  Aspect.CURSOR_CREATING\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}