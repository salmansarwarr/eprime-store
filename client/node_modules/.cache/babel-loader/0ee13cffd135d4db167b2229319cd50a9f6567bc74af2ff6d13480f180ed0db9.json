{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _toConsumableArray = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _objectSpread = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _possibleConstructorReturn = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\").default;\nvar _assertThisInitialized = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _defineProperty = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _ref;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\nvar util_1 = require(\"util\");\nvar connection_1 = require(\"../cmap/connection\");\nvar connection_pool_1 = require(\"../cmap/connection_pool\");\nvar errors_1 = require(\"../cmap/errors\");\nvar constants_1 = require(\"../constants\");\nvar error_1 = require(\"../error\");\nvar mongo_types_1 = require(\"../mongo_types\");\nvar transactions_1 = require(\"../transactions\");\nvar utils_1 = require(\"../utils\");\nvar common_1 = require(\"./common\");\nvar monitor_1 = require(\"./monitor\");\nvar server_description_1 = require(\"./server_description\");\nvar stateTransition = (0, utils_1.makeStateMachine)((_ref = {}, _defineProperty(_ref, common_1.STATE_CLOSED, [common_1.STATE_CLOSED, common_1.STATE_CONNECTING]), _defineProperty(_ref, common_1.STATE_CONNECTING, [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED]), _defineProperty(_ref, common_1.STATE_CONNECTED, [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED]), _defineProperty(_ref, common_1.STATE_CLOSING, [common_1.STATE_CLOSING, common_1.STATE_CLOSED]), _ref));\n/** @internal */\nvar kMonitor = Symbol('monitor');\n/** @internal */\nvar Server = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(Server, _mongo_types_1$TypedE);\n  var _super = _createSuper(Server);\n  /**\n   * Create a server\n   */\n  function Server(topology, description, options) {\n    var _this;\n    _classCallCheck(this, Server);\n    _this = _super.call(this);\n    _this.commandAsync = (0, util_1.promisify)(function (ns, cmd, options, callback) {\n      return _this.command(ns, cmd, options, callback);\n    });\n    _this.serverApi = options.serverApi;\n    var poolOptions = _objectSpread({\n      hostAddress: description.hostAddress\n    }, options);\n    _this.topology = topology;\n    _this.pool = new connection_pool_1.ConnectionPool(_assertThisInitialized(_this), poolOptions);\n    _this.s = {\n      description: description,\n      options: options,\n      state: common_1.STATE_CLOSED,\n      operationCount: 0\n    };\n    var _loop = function _loop() {\n      var event = _arr[_i];\n      _this.pool.on(event, function (e) {\n        return _this.emit(event, e);\n      });\n    };\n    for (var _i = 0, _arr = [].concat(_toConsumableArray(constants_1.CMAP_EVENTS), _toConsumableArray(constants_1.APM_EVENTS)); _i < _arr.length; _i++) {\n      _loop();\n    }\n    _this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, function (clusterTime) {\n      _this.clusterTime = clusterTime;\n    });\n    if (_this.loadBalanced) {\n      _this[kMonitor] = null;\n      // monitoring is disabled in load balancing mode\n      return _possibleConstructorReturn(_this);\n    }\n    // create the monitor\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    var monitor = new monitor_1.Monitor(_assertThisInitialized(_this), _this.s.options);\n    _this[kMonitor] = monitor;\n    var _iterator = _createForOfIteratorHelper(constants_1.HEARTBEAT_EVENTS),\n      _step;\n    try {\n      var _loop2 = function _loop2() {\n        var event = _step.value;\n        monitor.on(event, function (e) {\n          return _this.emit(event, e);\n        });\n      };\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop2();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    monitor.on('resetServer', function (error) {\n      return markServerUnknown(_assertThisInitialized(_this), error);\n    });\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, function (event) {\n      _this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(_this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(_this.description.roundTripTime, event.duration)\n      }));\n      if (_this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(_assertThisInitialized(_this), common_1.STATE_CONNECTED);\n        _this.emit(Server.CONNECT, _assertThisInitialized(_this));\n      }\n    });\n    return _this;\n  }\n  _createClass(Server, [{\n    key: \"clusterTime\",\n    get: function get() {\n      return this.topology.clusterTime;\n    },\n    set: function set(clusterTime) {\n      this.topology.clusterTime = clusterTime;\n    }\n  }, {\n    key: \"description\",\n    get: function get() {\n      return this.s.description;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.s.description.address;\n    }\n  }, {\n    key: \"autoEncrypter\",\n    get: function get() {\n      if (this.s.options && this.s.options.autoEncrypter) {\n        return this.s.options.autoEncrypter;\n      }\n      return;\n    }\n  }, {\n    key: \"loadBalanced\",\n    get: function get() {\n      return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.s.state !== common_1.STATE_CLOSED) {\n        return;\n      }\n      stateTransition(this, common_1.STATE_CONNECTING);\n      // If in load balancer mode we automatically set the server to\n      // a load balancer. It never transitions out of this state and\n      // has no monitor.\n      if (!this.loadBalanced) {\n        var _this$kMonitor;\n        (_this$kMonitor = this[kMonitor]) === null || _this$kMonitor === void 0 ? void 0 : _this$kMonitor.connect();\n      } else {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    }\n    /** Destroy the server connection */\n  }, {\n    key: \"destroy\",\n    value: function destroy(options, callback) {\n      var _this2 = this;\n      if (typeof options === 'function') {\n        callback = options;\n        options = {\n          force: false\n        };\n      }\n      options = Object.assign({}, {\n        force: false\n      }, options);\n      if (this.s.state === common_1.STATE_CLOSED) {\n        if (typeof callback === 'function') {\n          callback();\n        }\n        return;\n      }\n      stateTransition(this, common_1.STATE_CLOSING);\n      if (!this.loadBalanced) {\n        var _this$kMonitor2;\n        (_this$kMonitor2 = this[kMonitor]) === null || _this$kMonitor2 === void 0 ? void 0 : _this$kMonitor2.close();\n      }\n      this.pool.close(options, function (err) {\n        stateTransition(_this2, common_1.STATE_CLOSED);\n        _this2.emit('closed');\n        if (typeof callback === 'function') {\n          callback(err);\n        }\n      });\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */\n  }, {\n    key: \"requestCheck\",\n    value: function requestCheck() {\n      if (!this.loadBalanced) {\n        var _this$kMonitor3;\n        (_this$kMonitor3 = this[kMonitor]) === null || _this$kMonitor3 === void 0 ? void 0 : _this$kMonitor3.requestCheck();\n      }\n    }\n    /**\n     * Execute a command\n     * @internal\n     */\n  }, {\n    key: \"command\",\n    value: function command(ns, cmd, options, callback) {\n      var _this3 = this;\n      if (callback == null) {\n        throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n      }\n      if (ns.db == null || typeof ns === 'string') {\n        throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n      }\n      if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n        callback(new error_1.MongoServerClosedError());\n        return;\n      }\n      // Clone the options\n      var finalOptions = Object.assign({}, options, {\n        wireProtocolCommand: false\n      });\n      // There are cases where we need to flag the read preference not to get sent in\n      // the command, such as pre-5.0 servers attempting to perform an aggregate write\n      // with a non-primary read preference. In this case the effective read preference\n      // (primary) is not the same as the provided and must be removed completely.\n      if (finalOptions.omitReadPreference) {\n        delete finalOptions.readPreference;\n      }\n      var session = finalOptions.session;\n      var conn = session === null || session === void 0 ? void 0 : session.pinnedConnection;\n      // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n      //       (and prevent them from being checked back in) at the point of operation execution.\n      //       This should be considered as part of the work for NODE-2882\n      // NOTE:\n      //       When incrementing operation count, it's important that we increment it before we\n      //       attempt to check out a connection from the pool.  This ensures that operations that\n      //       are waiting for a connection are included in the operation count.  Load balanced\n      //       mode will only ever have a single server, so the operation count doesn't matter.\n      //       Incrementing the operation count above the logic to handle load balanced mode would\n      //       require special logic to decrement it again, or would double increment (the load\n      //       balanced code makes a recursive call).  Instead, we increment the count after this\n      //       check.\n      if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n        this.pool.checkOut(function (err, checkedOut) {\n          if (err || checkedOut == null) {\n            if (callback) return callback(err);\n            return;\n          }\n          session.pin(checkedOut);\n          _this3.command(ns, cmd, finalOptions, callback);\n        });\n        return;\n      }\n      this.incrementOperationCount();\n      this.pool.withConnection(conn, function (err, conn, cb) {\n        if (err || !conn) {\n          _this3.decrementOperationCount();\n          if (!err) {\n            return cb(new error_1.MongoRuntimeError('Failed to create connection without error'));\n          }\n          if (!(err instanceof errors_1.PoolClearedError)) {\n            _this3.handleError(err);\n          }\n          return cb(err);\n        }\n        conn.command(ns, cmd, finalOptions, makeOperationHandler(_this3, conn, cmd, finalOptions, function (error, response) {\n          _this3.decrementOperationCount();\n          cb(error, response);\n        }));\n      }, callback);\n    }\n    /**\n     * Handle SDAM error\n     * @internal\n     */\n  }, {\n    key: \"handleError\",\n    value: function handleError(error, connection) {\n      var _this4 = this;\n      if (!(error instanceof error_1.MongoError)) {\n        return;\n      }\n      var isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n      if (isStaleError) {\n        return;\n      }\n      var isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n      var isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n      var isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n      if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n        // In load balanced mode we never mark the server as unknown and always\n        // clear for the specific service id.\n        if (!this.loadBalanced) {\n          error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n          markServerUnknown(this, error);\n        } else if (connection) {\n          this.pool.clear({\n            serviceId: connection.serviceId\n          });\n        }\n      } else {\n        if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n          if (shouldHandleStateChangeError(this, error)) {\n            var shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n            if (this.loadBalanced && connection && shouldClearPool) {\n              this.pool.clear({\n                serviceId: connection.serviceId\n              });\n            }\n            if (!this.loadBalanced) {\n              if (shouldClearPool) {\n                error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n              }\n              markServerUnknown(this, error);\n              process.nextTick(function () {\n                return _this4.requestCheck();\n              });\n            }\n          }\n        }\n      }\n    }\n    /**\n     * Decrement the operation count, returning the new count.\n     */\n  }, {\n    key: \"decrementOperationCount\",\n    value: function decrementOperationCount() {\n      return this.s.operationCount -= 1;\n    }\n    /**\n     * Increment the operation count, returning the new count.\n     */\n  }, {\n    key: \"incrementOperationCount\",\n    value: function incrementOperationCount() {\n      return this.s.operationCount += 1;\n    }\n  }]);\n  return Server;\n}(mongo_types_1.TypedEventEmitter);\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nexports.Server = Server;\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n  var alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    var _server$kMonitor;\n    (_server$kMonitor = server[kMonitor]) === null || _server$kMonitor === void 0 ? void 0 : _server$kMonitor.reset();\n  }\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error: error\n  }));\n}\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n  return false;\n}\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n  return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n  var etv = err.topologyVersion;\n  var stv = server.description.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  var session = options === null || options === void 0 ? void 0 : options.session;\n  return function handleOperationResult(error, result) {\n    // We should not swallow an error if it is present.\n    if (error == null && result != null) {\n      return callback(undefined, result);\n    }\n    if (options != null && 'noResponse' in options && options.noResponse === true) {\n      return callback(undefined, null);\n    }\n    if (!error) {\n      return callback(new error_1.MongoUnexpectedServerResponseError('Empty response with no error'));\n    }\n    if (!(error instanceof error_1.MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return callback(error);\n    }\n    if (connectionIsStale(server.pool, connection)) {\n      return callback(error);\n    }\n    if (error instanceof error_1.MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      }\n      // inActiveTransaction check handles commit and abort.\n      if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n      }\n      if ((isRetryableWritesEnabled(server.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(server) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n    } else {\n      if ((isRetryableWritesEnabled(server.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(server)) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n    }\n    if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n      session.unpin({\n        force: true\n      });\n    }\n    server.handleError(error, connection);\n    return callback(error);\n  };\n}","map":{"version":3,"names":["util_1","require","connection_1","connection_pool_1","errors_1","constants_1","error_1","mongo_types_1","transactions_1","utils_1","common_1","monitor_1","server_description_1","stateTransition","makeStateMachine","_ref","_defineProperty","STATE_CLOSED","STATE_CONNECTING","STATE_CLOSING","STATE_CONNECTED","kMonitor","Symbol","Server","_mongo_types_1$TypedE","_inherits","_super","_createSuper","topology","description","options","_this","_classCallCheck","call","commandAsync","promisify","ns","cmd","callback","command","serverApi","poolOptions","_objectSpread","hostAddress","pool","ConnectionPool","_assertThisInitialized","s","state","operationCount","_loop","event","_arr","_i","on","e","emit","concat","_toConsumableArray","CMAP_EVENTS","APM_EVENTS","length","Connection","CLUSTER_TIME_RECEIVED","clusterTime","loadBalanced","_possibleConstructorReturn","monitor","Monitor","_iterator","_createForOfIteratorHelper","HEARTBEAT_EVENTS","_step","_loop2","value","n","done","err","f","error","markServerUnknown","SERVER_HEARTBEAT_SUCCEEDED","DESCRIPTION_RECEIVED","ServerDescription","reply","roundTripTime","calculateRoundTripTime","duration","CONNECT","_createClass","key","get","set","address","autoEncrypter","type","TopologyType","LoadBalanced","connect","_this$kMonitor","destroy","_this2","force","Object","assign","_this$kMonitor2","close","requestCheck","_this$kMonitor3","_this3","MongoInvalidArgumentError","db","MongoServerClosedError","finalOptions","wireProtocolCommand","omitReadPreference","readPreference","session","conn","pinnedConnection","isPinnableCommand","checkOut","checkedOut","pin","incrementOperationCount","withConnection","cb","decrementOperationCount","MongoRuntimeError","PoolClearedError","handleError","makeOperationHandler","response","connection","_this4","MongoError","isStaleError","connectionGeneration","generation","isNetworkNonTimeoutError","MongoNetworkError","MongoNetworkTimeoutError","isNetworkTimeoutBeforeHandshakeError","isNetworkErrorBeforeHandshake","isAuthHandshakeError","hasErrorLabel","MongoErrorLabel","HandshakeError","addErrorLabel","ResetPool","clear","serviceId","isSDAMUnrecoverableError","shouldHandleStateChangeError","shouldClearPool","maxWireVersion","isNodeShuttingDownError","process","nextTick","TypedEventEmitter","SERVER_HEARTBEAT_STARTED","SERVER_HEARTBEAT_FAILED","CLOSED","ENDED","exports","oldRtt","alpha","server","_server$kMonitor","reset","undefined","inTransaction","connectionIsStale","serviceGenerations","toHexString","etv","topologyVersion","stv","compareTopologyVersion","inActiveTransaction","isTransactionCommand","isRetryableWritesEnabled","retryWrites","handleOperationResult","result","noResponse","MongoUnexpectedServerResponseError","hasEnded","serverSession","isDirty","TransientTransactionError","supportsRetryableWrites","RetryableWriteError","needsRetryableWriteLabel","isPinned","unpin"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/sdam/server.ts"],"sourcesContent":["import { promisify } from 'util';\n\nimport type { Document } from '../bson';\nimport { type CommandOptions, Connection, type DestroyOptions } from '../cmap/connection';\nimport {\n  ConnectionPool,\n  type ConnectionPoolEvents,\n  type ConnectionPoolOptions\n} from '../cmap/connection_pool';\nimport { PoolClearedError } from '../cmap/errors';\nimport {\n  APM_EVENTS,\n  CLOSED,\n  CMAP_EVENTS,\n  CONNECT,\n  DESCRIPTION_RECEIVED,\n  ENDED,\n  HEARTBEAT_EVENTS,\n  SERVER_HEARTBEAT_FAILED,\n  SERVER_HEARTBEAT_STARTED,\n  SERVER_HEARTBEAT_SUCCEEDED\n} from '../constants';\nimport type { AutoEncrypter } from '../deps';\nimport {\n  type AnyError,\n  isNetworkErrorBeforeHandshake,\n  isNodeShuttingDownError,\n  isSDAMUnrecoverableError,\n  MongoError,\n  MongoErrorLabel,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoRuntimeError,\n  MongoServerClosedError,\n  type MongoServerError,\n  MongoUnexpectedServerResponseError,\n  needsRetryableWriteLabel\n} from '../error';\nimport type { ServerApi } from '../mongo_client';\nimport { TypedEventEmitter } from '../mongo_types';\nimport type { GetMoreOptions } from '../operations/get_more';\nimport type { ClientSession } from '../sessions';\nimport { isTransactionCommand } from '../transactions';\nimport {\n  type Callback,\n  type EventEmitterWithState,\n  makeStateMachine,\n  maxWireVersion,\n  type MongoDBNamespace,\n  supportsRetryableWrites\n} from '../utils';\nimport {\n  type ClusterTime,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTED,\n  STATE_CONNECTING,\n  TopologyType\n} from './common';\nimport type {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Monitor, type MonitorOptions } from './monitor';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport type { Topology } from './topology';\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nconst kMonitor = Symbol('monitor');\n\n/** @internal */\nexport type ServerOptions = Omit<ConnectionPoolOptions, 'id' | 'generation' | 'hostAddress'> &\n  MonitorOptions;\n\n/** @internal */\nexport interface ServerPrivate {\n  /** The server description for this server */\n  description: ServerDescription;\n  /** A copy of the options used to construct this instance */\n  options: ServerOptions;\n  /** The current state of the Server */\n  state: string;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n  /** A count of the operations currently running against the server. */\n  operationCount: number;\n}\n\n/** @public */\nexport type ServerEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(server: Server): void;\n  descriptionReceived(description: ServerDescription): void;\n  closed(): void;\n  ended(): void;\n} & ConnectionPoolEvents &\n  EventEmitterWithState;\n\n/** @internal */\nexport class Server extends TypedEventEmitter<ServerEvents> {\n  /** @internal */\n  s: ServerPrivate;\n  /** @internal */\n  topology: Topology;\n  /** @internal */\n  pool: ConnectionPool;\n  serverApi?: ServerApi;\n  hello?: Document;\n  commandAsync: (\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions\n  ) => Promise<Document | undefined>;\n  [kMonitor]: Monitor | null;\n\n  /** @event */\n  static readonly SERVER_HEARTBEAT_STARTED = SERVER_HEARTBEAT_STARTED;\n  /** @event */\n  static readonly SERVER_HEARTBEAT_SUCCEEDED = SERVER_HEARTBEAT_SUCCEEDED;\n  /** @event */\n  static readonly SERVER_HEARTBEAT_FAILED = SERVER_HEARTBEAT_FAILED;\n  /** @event */\n  static readonly CONNECT = CONNECT;\n  /** @event */\n  static readonly DESCRIPTION_RECEIVED = DESCRIPTION_RECEIVED;\n  /** @event */\n  static readonly CLOSED = CLOSED;\n  /** @event */\n  static readonly ENDED = ENDED;\n\n  /**\n   * Create a server\n   */\n  constructor(topology: Topology, description: ServerDescription, options: ServerOptions) {\n    super();\n\n    this.commandAsync = promisify(\n      (\n        ns: MongoDBNamespace,\n        cmd: Document,\n        options: CommandOptions,\n        callback: Callback<Document>\n      ) => this.command(ns, cmd, options, callback as any)\n    );\n\n    this.serverApi = options.serverApi;\n\n    const poolOptions = { hostAddress: description.hostAddress, ...options };\n\n    this.topology = topology;\n    this.pool = new ConnectionPool(this, poolOptions);\n\n    this.s = {\n      description,\n      options,\n      state: STATE_CLOSED,\n      operationCount: 0\n    };\n\n    for (const event of [...CMAP_EVENTS, ...APM_EVENTS]) {\n      this.pool.on(event, (e: any) => this.emit(event, e));\n    }\n\n    this.pool.on(Connection.CLUSTER_TIME_RECEIVED, (clusterTime: ClusterTime) => {\n      this.clusterTime = clusterTime;\n    });\n\n    if (this.loadBalanced) {\n      this[kMonitor] = null;\n      // monitoring is disabled in load balancing mode\n      return;\n    }\n\n    // create the monitor\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const monitor = new Monitor(this, this.s.options);\n    this[kMonitor] = monitor;\n\n    for (const event of HEARTBEAT_EVENTS) {\n      monitor.on(event, (e: any) => this.emit(event, e));\n    }\n\n    monitor.on('resetServer', (error: MongoError) => markServerUnknown(this, error));\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event: ServerHeartbeatSucceededEvent) => {\n      this.emit(\n        Server.DESCRIPTION_RECEIVED,\n        new ServerDescription(this.description.hostAddress, event.reply, {\n          roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n        })\n      );\n\n      if (this.s.state === STATE_CONNECTING) {\n        stateTransition(this, STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.topology.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.topology.clusterTime = clusterTime;\n  }\n\n  get description(): ServerDescription {\n    return this.s.description;\n  }\n\n  get name(): string {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter(): AutoEncrypter | undefined {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return;\n  }\n\n  get loadBalanced(): boolean {\n    return this.topology.description.type === TopologyType.LoadBalanced;\n  }\n\n  /**\n   * Initiate server connect\n   */\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n    if (!this.loadBalanced) {\n      this[kMonitor]?.connect();\n    } else {\n      stateTransition(this, STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n\n  /** Destroy the server connection */\n  destroy(options?: DestroyOptions, callback?: Callback): void {\n    if (typeof options === 'function') {\n      callback = options;\n      options = { force: false };\n    }\n    options = Object.assign({}, { force: false }, options);\n\n    if (this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    if (!this.loadBalanced) {\n      this[kMonitor]?.close();\n    }\n\n    this.pool.close(options, err => {\n      stateTransition(this, STATE_CLOSED);\n      this.emit('closed');\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck(): void {\n    if (!this.loadBalanced) {\n      this[kMonitor]?.requestCheck();\n    }\n  }\n\n  /**\n   * Execute a command\n   * @internal\n   */\n  command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions,\n    callback: Callback<Document>\n  ): void {\n    if (callback == null) {\n      throw new MongoInvalidArgumentError('Callback must be provided');\n    }\n\n    if (ns.db == null || typeof ns === 'string') {\n      throw new MongoInvalidArgumentError('Namespace must not be a string');\n    }\n\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoServerClosedError());\n      return;\n    }\n\n    // Clone the options\n    const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\n\n    // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    }\n\n    const session = finalOptions.session;\n    const conn = session?.pinnedConnection;\n\n    // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n    // NOTE:\n    //       When incrementing operation count, it's important that we increment it before we\n    //       attempt to check out a connection from the pool.  This ensures that operations that\n    //       are waiting for a connection are included in the operation count.  Load balanced\n    //       mode will only ever have a single server, so the operation count doesn't matter.\n    //       Incrementing the operation count above the logic to handle load balanced mode would\n    //       require special logic to decrement it again, or would double increment (the load\n    //       balanced code makes a recursive call).  Instead, we increment the count after this\n    //       check.\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n\n    this.incrementOperationCount();\n\n    this.pool.withConnection(\n      conn,\n      (err, conn, cb) => {\n        if (err || !conn) {\n          this.decrementOperationCount();\n          if (!err) {\n            return cb(new MongoRuntimeError('Failed to create connection without error'));\n          }\n          if (!(err instanceof PoolClearedError)) {\n            this.handleError(err);\n          }\n          return cb(err);\n        }\n\n        conn.command(\n          ns,\n          cmd,\n          finalOptions,\n          makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n            this.decrementOperationCount();\n            cb(error, response);\n          })\n        );\n      },\n      callback\n    );\n  }\n\n  /**\n   * Handle SDAM error\n   * @internal\n   */\n  handleError(error: AnyError, connection?: Connection) {\n    if (!(error instanceof MongoError)) {\n      return;\n    }\n\n    const isStaleError =\n      error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n    if (isStaleError) {\n      return;\n    }\n\n    const isNetworkNonTimeoutError =\n      error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError);\n    const isNetworkTimeoutBeforeHandshakeError = isNetworkErrorBeforeHandshake(error);\n    const isAuthHandshakeError = error.hasErrorLabel(MongoErrorLabel.HandshakeError);\n    if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n      // In load balanced mode we never mark the server as unknown and always\n      // clear for the specific service id.\n      if (!this.loadBalanced) {\n        error.addErrorLabel(MongoErrorLabel.ResetPool);\n        markServerUnknown(this, error);\n      } else if (connection) {\n        this.pool.clear({ serviceId: connection.serviceId });\n      }\n    } else {\n      if (isSDAMUnrecoverableError(error)) {\n        if (shouldHandleStateChangeError(this, error)) {\n          const shouldClearPool = maxWireVersion(this) <= 7 || isNodeShuttingDownError(error);\n          if (this.loadBalanced && connection && shouldClearPool) {\n            this.pool.clear({ serviceId: connection.serviceId });\n          }\n\n          if (!this.loadBalanced) {\n            if (shouldClearPool) {\n              error.addErrorLabel(MongoErrorLabel.ResetPool);\n            }\n            markServerUnknown(this, error);\n            process.nextTick(() => this.requestCheck());\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Decrement the operation count, returning the new count.\n   */\n  private decrementOperationCount(): number {\n    return (this.s.operationCount -= 1);\n  }\n\n  /**\n   * Increment the operation count, returning the new count.\n   */\n  private incrementOperationCount(): number {\n    return (this.s.operationCount += 1);\n  }\n}\n\nfunction calculateRoundTripTime(oldRtt: number, duration: number): number {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction markServerUnknown(server: Server, error?: MongoServerError) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError)) {\n    server[kMonitor]?.reset();\n  }\n\n  server.emit(\n    Server.DESCRIPTION_RECEIVED,\n    new ServerDescription(server.description.hostAddress, undefined, { error })\n  );\n}\n\nfunction isPinnableCommand(cmd: Document, session?: ClientSession): boolean {\n  if (session) {\n    return (\n      session.inTransaction() ||\n      'aggregate' in cmd ||\n      'find' in cmd ||\n      'getMore' in cmd ||\n      'listCollections' in cmd ||\n      'listIndexes' in cmd\n    );\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool: ConnectionPool, connection: Connection) {\n  if (connection.serviceId) {\n    return (\n      connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString())\n    );\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server: Server, err: MongoError) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return compareTopologyVersion(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session: ClientSession | undefined, cmd: Document) {\n  return session && session.inTransaction() && !isTransactionCommand(cmd);\n}\n\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology: Topology) {\n  return topology.s.options.retryWrites !== false;\n}\n\nfunction makeOperationHandler(\n  server: Server,\n  connection: Connection,\n  cmd: Document,\n  options: CommandOptions | GetMoreOptions | undefined,\n  callback: Callback\n): Callback {\n  const session = options?.session;\n  return function handleOperationResult(error, result) {\n    // We should not swallow an error if it is present.\n    if (error == null && result != null) {\n      return callback(undefined, result);\n    }\n\n    if (options != null && 'noResponse' in options && options.noResponse === true) {\n      return callback(undefined, null);\n    }\n\n    if (!error) {\n      return callback(new MongoUnexpectedServerResponseError('Empty response with no error'));\n    }\n\n    if (!(error instanceof MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return callback(error);\n    }\n\n    if (connectionIsStale(server.pool, connection)) {\n      return callback(error);\n    }\n\n    if (error instanceof MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      }\n\n      // inActiveTransaction check handles commit and abort.\n      if (\n        inActiveTransaction(session, cmd) &&\n        !error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.TransientTransactionError);\n      }\n\n      if (\n        (isRetryableWritesEnabled(server.topology) || isTransactionCommand(cmd)) &&\n        supportsRetryableWrites(server) &&\n        !inActiveTransaction(session, cmd)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n      }\n    } else {\n      if (\n        (isRetryableWritesEnabled(server.topology) || isTransactionCommand(cmd)) &&\n        needsRetryableWriteLabel(error, maxWireVersion(server)) &&\n        !inActiveTransaction(session, cmd)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n      }\n    }\n\n    if (\n      session &&\n      session.isPinned &&\n      error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n    ) {\n      session.unpin({ force: true });\n    }\n\n    server.handleError(error, connection);\n\n    return callback(error);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}