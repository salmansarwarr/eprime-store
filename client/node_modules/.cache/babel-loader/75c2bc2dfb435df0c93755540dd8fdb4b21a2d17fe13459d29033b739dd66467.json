{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketReadStream = void 0;\nvar stream_1 = require(\"stream\");\nvar error_1 = require(\"../error\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nvar GridFSBucketReadStream = /*#__PURE__*/function (_stream_1$Readable) {\n  _inherits(GridFSBucketReadStream, _stream_1$Readable);\n  var _super = _createSuper(GridFSBucketReadStream);\n  /**\n   * @param chunks - Handle for chunks collection\n   * @param files - Handle for files collection\n   * @param readPreference - The read preference to use\n   * @param filter - The filter to use to find the file document\n   * @internal\n   */\n  function GridFSBucketReadStream(chunks, files, readPreference, filter, options) {\n    var _this;\n    _classCallCheck(this, GridFSBucketReadStream);\n    _this = _super.call(this);\n    _this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks: chunks,\n      expected: 0,\n      files: files,\n      filter: filter,\n      init: false,\n      expectedEnd: 0,\n      options: _objectSpread({\n        start: 0,\n        end: 0\n      }, options),\n      readPreference: readPreference\n    };\n    return _this;\n  }\n  /**\n   * Reads from the cursor and pushes to the stream.\n   * Private Impl, do not call directly\n   * @internal\n   */\n  _createClass(GridFSBucketReadStream, [{\n    key: \"_read\",\n    value: function _read() {\n      var _this2 = this;\n      if (this.destroyed) return;\n      waitForFile(this, function () {\n        return doRead(_this2);\n      });\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      throwIfInitialized(this);\n      this.s.options.start = _start;\n      return this;\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */\n  }, {\n    key: \"end\",\n    value: function end() {\n      var _end = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      throwIfInitialized(this);\n      this.s.options.end = _end;\n      return this;\n    }\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */\n  }, {\n    key: \"abort\",\n    value: function () {\n      var _abort = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.push(null);\n              this.destroyed = true;\n              if (!this.s.cursor) {\n                _context.next = 11;\n                break;\n              }\n              _context.prev = 3;\n              _context.next = 6;\n              return this.s.cursor.close();\n            case 6:\n              _context.prev = 6;\n              this.emit(GridFSBucketReadStream.CLOSE);\n              return _context.finish(6);\n            case 9:\n              _context.next = 12;\n              break;\n            case 11:\n              if (!this.s.init) {\n                // If not initialized, fire close event because we will never\n                // get a cursor\n                this.emit(GridFSBucketReadStream.CLOSE);\n              }\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[3,, 6, 9]]);\n      }));\n      function abort() {\n        return _abort.apply(this, arguments);\n      }\n      return abort;\n    }()\n  }]);\n  return GridFSBucketReadStream;\n}(stream_1.Readable);\n/**\n * An error occurred\n * @event\n */\nGridFSBucketReadStream.ERROR = 'error';\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\n/**\n * Emitted when a chunk of data is available to be consumed.\n * @event\n */\nGridFSBucketReadStream.DATA = 'data';\n/**\n * Fired when the stream is exhausted (no more data events).\n * @event\n */\nGridFSBucketReadStream.END = 'end';\n/**\n * Fired when the stream is exhausted and the underlying cursor is killed\n * @event\n */\nGridFSBucketReadStream.CLOSE = 'close';\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\nfunction throwIfInitialized(stream) {\n  if (stream.s.init) {\n    throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n  }\n}\nfunction doRead(stream) {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n  var handleReadResult = function handleReadResult(_ref) {\n    var error = _ref.error,\n      doc = _ref.doc;\n    if (stream.destroyed) {\n      return;\n    }\n    if (error) {\n      stream.emit(GridFSBucketReadStream.ERROR, error);\n      return;\n    }\n    if (!doc) {\n      var _stream$s$cursor;\n      stream.push(null);\n      (_stream$s$cursor = stream.s.cursor) === null || _stream$s$cursor === void 0 ? void 0 : _stream$s$cursor.close().then(function () {\n        stream.emit(GridFSBucketReadStream.CLOSE);\n      }, function (error) {\n        stream.emit(GridFSBucketReadStream.ERROR, error);\n      });\n      return;\n    }\n    if (!stream.s.file) return;\n    var bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    var expectedN = stream.s.expected++;\n    var expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n    if (doc.n > expectedN) {\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(\"ChunkIsMissing: Got unexpected n: \".concat(doc.n, \", expected: \").concat(expectedN)));\n    }\n    if (doc.n < expectedN) {\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(\"ExtraChunk: Got unexpected n: \".concat(doc.n, \", expected: \").concat(expectedN)));\n    }\n    var buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(\"ExtraChunk: Got unexpected n: \".concat(doc.n, \", expected file length \").concat(stream.s.file.length, \" bytes but already read \").concat(stream.s.bytesRead, \" bytes\")));\n      }\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(\"ChunkIsWrongSize: Got unexpected length: \".concat(buf.byteLength, \", expected: \").concat(expectedLength)));\n    }\n    stream.s.bytesRead += buf.byteLength;\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n    var sliceStart = null;\n    var sliceEnd = null;\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n    var atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    var bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n    stream.push(buf);\n    return;\n  };\n  stream.s.cursor.next().then(function (doc) {\n    return handleReadResult({\n      error: null,\n      doc: doc\n    });\n  }, function (error) {\n    return handleReadResult({\n      error: error,\n      doc: null\n    });\n  });\n}\nfunction init(stream) {\n  var findOneOptions = {};\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n  var handleReadResult = function handleReadResult(_ref2) {\n    var error = _ref2.error,\n      doc = _ref2.doc;\n    if (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n    if (!doc) {\n      var identifier = stream.s.filter._id ? stream.s.filter._id.toString() : stream.s.filter.filename;\n      var errmsg = \"FileNotFound: file \".concat(identifier, \" was not found\");\n      // TODO(NODE-3483)\n      var err = new error_1.MongoRuntimeError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n      return stream.emit(GridFSBucketReadStream.ERROR, err);\n    }\n    // If document is empty, kill the stream immediately and don't\n    // execute any reads\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.emit(GridFSBucketReadStream.CLOSE);\n      return;\n    }\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n    var filter = {\n      files_id: doc._id\n    };\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n    if (stream.s.options && stream.s.options.start != null) {\n      var skip = Math.floor(stream.s.options.start / doc.chunkSize);\n      if (skip > 0) {\n        filter['n'] = {\n          $gte: skip\n        };\n      }\n    }\n    stream.s.cursor = stream.s.chunks.find(filter).sort({\n      n: 1\n    });\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc;\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n    return;\n  };\n  stream.s.files.findOne(stream.s.filter, findOneOptions).then(function (doc) {\n    return handleReadResult({\n      error: null,\n      doc: doc\n    });\n  }, function (error) {\n    return handleReadResult({\n      error: error,\n      doc: null\n    });\n  });\n}\nfunction waitForFile(stream, callback) {\n  if (stream.s.file) {\n    return callback();\n  }\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n  stream.once('file', function () {\n    callback();\n  });\n}\nfunction handleStartOption(stream, doc, options) {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(\"Stream start (\".concat(options.start, \") must not be more than the length of the file (\").concat(doc.length, \")\"));\n    }\n    if (options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(\"Stream start (\".concat(options.start, \") must not be negative\"));\n    }\n    if (options.end != null && options.end < options.start) {\n      throw new error_1.MongoInvalidArgumentError(\"Stream start (\".concat(options.start, \") must not be greater than stream end (\").concat(options.end, \")\"));\n    }\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n    return options.start - stream.s.bytesRead;\n  }\n  throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(\"Stream end (\".concat(options.end, \") must not be more than the length of the file (\").concat(doc.length, \")\"));\n    }\n    if (options.start == null || options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(\"Stream end (\".concat(options.end, \") must not be negative\"));\n    }\n    var start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n  throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}","map":{"version":3,"names":["stream_1","require","error_1","GridFSBucketReadStream","_stream_1$Readable","_inherits","_super","_createSuper","chunks","files","readPreference","filter","options","_this","_classCallCheck","call","s","bytesToTrim","bytesToSkip","bytesRead","expected","init","expectedEnd","_objectSpread","start","end","_createClass","key","value","_read","_this2","destroyed","waitForFile","doRead","arguments","length","undefined","throwIfInitialized","_abort","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","push","cursor","close","emit","CLOSE","finish","stop","abort","apply","Readable","ERROR","FILE","DATA","END","exports","stream","MongoGridFSStreamError","file","handleReadResult","_ref","error","doc","_stream$s$cursor","then","bytesRemaining","expectedN","expectedLength","Math","min","chunkSize","n","MongoGridFSChunkError","concat","buf","Buffer","isBuffer","data","buffer","byteLength","sliceStart","sliceEnd","atEndOfStream","bytesLeftToRead","slice","findOneOptions","sort","skip","_ref2","identifier","_id","toString","filename","errmsg","err","MongoRuntimeError","code","handleStartOption","files_id","floor","$gte","find","withReadPreference","ceil","handleEndOption","findOne","callback","once","MongoInvalidArgumentError","limit"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/gridfs/download.ts"],"sourcesContent":["import { Readable } from 'stream';\n\nimport type { Document, ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport type { FindCursor } from '../cursor/find_cursor';\nimport {\n  MongoGridFSChunkError,\n  MongoGridFSStreamError,\n  MongoInvalidArgumentError,\n  MongoRuntimeError\n} from '../error';\nimport type { FindOptions } from '../operations/find';\nimport type { ReadPreference } from '../read_preference';\nimport type { Sort } from '../sort';\nimport type { Callback } from '../utils';\nimport type { GridFSChunk } from './upload';\n\n/** @public */\nexport interface GridFSBucketReadStreamOptions {\n  sort?: Sort;\n  skip?: number;\n  /**\n   * 0-indexed non-negative byte offset from the beginning of the file\n   */\n  start?: number;\n  /**\n   * 0-indexed non-negative byte offset to the end of the file contents\n   * to be returned by the stream. `end` is non-inclusive\n   */\n  end?: number;\n}\n\n/** @public */\nexport interface GridFSBucketReadStreamOptionsWithRevision extends GridFSBucketReadStreamOptions {\n  /** The revision number relative to the oldest file with the given filename. 0\n   * gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the\n   * newest. */\n  revision?: number;\n}\n\n/** @public */\nexport interface GridFSFile {\n  _id: ObjectId;\n  length: number;\n  chunkSize: number;\n  filename: string;\n  contentType?: string;\n  aliases?: string[];\n  metadata?: Document;\n  uploadDate: Date;\n}\n\n/** @internal */\nexport interface GridFSBucketReadStreamPrivate {\n  bytesRead: number;\n  bytesToTrim: number;\n  bytesToSkip: number;\n  chunks: Collection<GridFSChunk>;\n  cursor?: FindCursor<GridFSChunk>;\n  expected: number;\n  files: Collection<GridFSFile>;\n  filter: Document;\n  init: boolean;\n  expectedEnd: number;\n  file?: GridFSFile;\n  options: {\n    sort?: Sort;\n    skip?: number;\n    start: number;\n    end: number;\n  };\n  readPreference?: ReadPreference;\n}\n\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nexport class GridFSBucketReadStream extends Readable implements NodeJS.ReadableStream {\n  /** @internal */\n  s: GridFSBucketReadStreamPrivate;\n\n  /**\n   * An error occurred\n   * @event\n   */\n  static readonly ERROR = 'error' as const;\n  /**\n   * Fires when the stream loaded the file document corresponding to the provided id.\n   * @event\n   */\n  static readonly FILE = 'file' as const;\n  /**\n   * Emitted when a chunk of data is available to be consumed.\n   * @event\n   */\n  static readonly DATA = 'data' as const;\n  /**\n   * Fired when the stream is exhausted (no more data events).\n   * @event\n   */\n  static readonly END = 'end' as const;\n  /**\n   * Fired when the stream is exhausted and the underlying cursor is killed\n   * @event\n   */\n  static readonly CLOSE = 'close' as const;\n\n  /**\n   * @param chunks - Handle for chunks collection\n   * @param files - Handle for files collection\n   * @param readPreference - The read preference to use\n   * @param filter - The filter to use to find the file document\n   * @internal\n   */\n  constructor(\n    chunks: Collection<GridFSChunk>,\n    files: Collection<GridFSFile>,\n    readPreference: ReadPreference | undefined,\n    filter: Document,\n    options?: GridFSBucketReadStreamOptions\n  ) {\n    super();\n    this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks,\n      expected: 0,\n      files,\n      filter,\n      init: false,\n      expectedEnd: 0,\n      options: {\n        start: 0,\n        end: 0,\n        ...options\n      },\n      readPreference\n    };\n  }\n\n  /**\n   * Reads from the cursor and pushes to the stream.\n   * Private Impl, do not call directly\n   * @internal\n   */\n  override _read(): void {\n    if (this.destroyed) return;\n    waitForFile(this, () => doRead(this));\n  }\n\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param start - 0-based offset in bytes to start streaming from\n   */\n  start(start = 0): this {\n    throwIfInitialized(this);\n    this.s.options.start = start;\n    return this;\n  }\n\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param end - Offset in bytes to stop reading at\n   */\n  end(end = 0): this {\n    throwIfInitialized(this);\n    this.s.options.end = end;\n    return this;\n  }\n\n  /**\n   * Marks this stream as aborted (will never push another `data` event)\n   * and kills the underlying cursor. Will emit the 'end' event, and then\n   * the 'close' event once the cursor is successfully killed.\n   */\n  async abort(): Promise<void> {\n    this.push(null);\n    this.destroyed = true;\n    if (this.s.cursor) {\n      try {\n        await this.s.cursor.close();\n      } finally {\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n    } else {\n      if (!this.s.init) {\n        // If not initialized, fire close event because we will never\n        // get a cursor\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n    }\n  }\n}\n\nfunction throwIfInitialized(stream: GridFSBucketReadStream): void {\n  if (stream.s.init) {\n    throw new MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n  }\n}\n\nfunction doRead(stream: GridFSBucketReadStream): void {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n\n  const handleReadResult = ({\n    error,\n    doc\n  }: { error: Error; doc: null } | { error: null; doc: any }) => {\n    if (stream.destroyed) {\n      return;\n    }\n    if (error) {\n      stream.emit(GridFSBucketReadStream.ERROR, error);\n      return;\n    }\n    if (!doc) {\n      stream.push(null);\n\n      stream.s.cursor?.close().then(\n        () => {\n          stream.emit(GridFSBucketReadStream.CLOSE);\n        },\n        error => {\n          stream.emit(GridFSBucketReadStream.ERROR, error);\n        }\n      );\n      return;\n    }\n\n    if (!stream.s.file) return;\n\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    const expectedN = stream.s.expected++;\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n    if (doc.n > expectedN) {\n      return stream.emit(\n        GridFSBucketReadStream.ERROR,\n        new MongoGridFSChunkError(\n          `ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`\n        )\n      );\n    }\n\n    if (doc.n < expectedN) {\n      return stream.emit(\n        GridFSBucketReadStream.ERROR,\n        new MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`)\n      );\n    }\n\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        return stream.emit(\n          GridFSBucketReadStream.ERROR,\n          new MongoGridFSChunkError(\n            `ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`\n          )\n        );\n      }\n\n      return stream.emit(\n        GridFSBucketReadStream.ERROR,\n        new MongoGridFSChunkError(\n          `ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`\n        )\n      );\n    }\n\n    stream.s.bytesRead += buf.byteLength;\n\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n\n    let sliceStart = null;\n    let sliceEnd = null;\n\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n\n    stream.push(buf);\n    return;\n  };\n\n  stream.s.cursor.next().then(\n    doc => handleReadResult({ error: null, doc }),\n    error => handleReadResult({ error, doc: null })\n  );\n}\n\nfunction init(stream: GridFSBucketReadStream): void {\n  const findOneOptions: FindOptions = {};\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n\n  const handleReadResult = ({\n    error,\n    doc\n  }: { error: Error; doc: null } | { error: null; doc: any }) => {\n    if (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    if (!doc) {\n      const identifier = stream.s.filter._id\n        ? stream.s.filter._id.toString()\n        : stream.s.filter.filename;\n      const errmsg = `FileNotFound: file ${identifier} was not found`;\n      // TODO(NODE-3483)\n      const err = new MongoRuntimeError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n      return stream.emit(GridFSBucketReadStream.ERROR, err);\n    }\n\n    // If document is empty, kill the stream immediately and don't\n    // execute any reads\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.emit(GridFSBucketReadStream.CLOSE);\n      return;\n    }\n\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    const filter: Document = { files_id: doc._id };\n\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n    if (stream.s.options && stream.s.options.start != null) {\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n      if (skip > 0) {\n        filter['n'] = { $gte: skip };\n      }\n    }\n    stream.s.cursor = stream.s.chunks.find(filter).sort({ n: 1 });\n\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc as GridFSFile;\n\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n    return;\n  };\n\n  stream.s.files.findOne(stream.s.filter, findOneOptions).then(\n    doc => handleReadResult({ error: null, doc }),\n    error => handleReadResult({ error, doc: null })\n  );\n}\n\nfunction waitForFile(stream: GridFSBucketReadStream, callback: Callback): void {\n  if (stream.s.file) {\n    return callback();\n  }\n\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n\n  stream.once('file', () => {\n    callback();\n  });\n}\n\nfunction handleStartOption(\n  stream: GridFSBucketReadStream,\n  doc: Document,\n  options: GridFSBucketReadStreamOptions\n): number {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new MongoInvalidArgumentError(\n        `Stream start (${options.start}) must not be more than the length of the file (${doc.length})`\n      );\n    }\n    if (options.start < 0) {\n      throw new MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n    }\n    if (options.end != null && options.end < options.start) {\n      throw new MongoInvalidArgumentError(\n        `Stream start (${options.start}) must not be greater than stream end (${options.end})`\n      );\n    }\n\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n\n    return options.start - stream.s.bytesRead;\n  }\n  throw new MongoInvalidArgumentError('Start option must be defined');\n}\n\nfunction handleEndOption(\n  stream: GridFSBucketReadStream,\n  doc: Document,\n  cursor: FindCursor<GridFSChunk>,\n  options: GridFSBucketReadStreamOptions\n) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new MongoInvalidArgumentError(\n        `Stream end (${options.end}) must not be more than the length of the file (${doc.length})`\n      );\n    }\n    if (options.start == null || options.start < 0) {\n      throw new MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n    }\n\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n  throw new MongoInvalidArgumentError('End option must be defined');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}