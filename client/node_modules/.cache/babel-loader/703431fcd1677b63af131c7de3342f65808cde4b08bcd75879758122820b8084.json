{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddUserOperation = void 0;\nvar crypto = require(\"crypto\");\nvar error_1 = require(\"../error\");\nvar utils_1 = require(\"../utils\");\nvar command_1 = require(\"./command\");\nvar operation_1 = require(\"./operation\");\n/** @internal */\nvar AddUserOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(AddUserOperation, _command_1$CommandOpe);\n  var _super = _createSuper(AddUserOperation);\n  function AddUserOperation(db, username, password, options) {\n    var _this;\n    _classCallCheck(this, AddUserOperation);\n    _this = _super.call(this, db, options);\n    _this.db = db;\n    _this.username = username;\n    _this.password = password;\n    _this.options = options !== null && options !== void 0 ? options : {};\n    return _this;\n  }\n  _createClass(AddUserOperation, [{\n    key: \"executeCallback\",\n    value: function executeCallback(server, session, callback) {\n      var db = this.db;\n      var username = this.username;\n      var password = this.password;\n      var options = this.options;\n      // Error out if digestPassword set\n      // v5 removed the digestPassword option from AddUserOptions but we still want to throw\n      // an error when digestPassword is provided.\n      if ('digestPassword' in options && options.digestPassword != null) {\n        return callback(new error_1.MongoInvalidArgumentError('Option \"digestPassword\" not supported via addUser, use db.command(...) instead'));\n      }\n      var roles;\n      if (!options.roles || Array.isArray(options.roles) && options.roles.length === 0) {\n        (0, utils_1.emitWarningOnce)('Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise');\n        if (db.databaseName.toLowerCase() === 'admin') {\n          roles = ['root'];\n        } else {\n          roles = ['dbOwner'];\n        }\n      } else {\n        roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n      }\n      var topology;\n      try {\n        topology = (0, utils_1.getTopology)(db);\n      } catch (error) {\n        return callback(error);\n      }\n      var digestPassword = topology.lastHello().maxWireVersion >= 7;\n      var userPassword = password;\n      if (!digestPassword) {\n        // Use node md5 generator\n        var md5 = crypto.createHash('md5');\n        // Generate keys used for authentication\n        md5.update(\"\".concat(username, \":mongo:\").concat(password));\n        userPassword = md5.digest('hex');\n      }\n      // Build the command to execute\n      var command = {\n        createUser: username,\n        customData: options.customData || {},\n        roles: roles,\n        digestPassword: digestPassword\n      };\n      // No password\n      if (typeof password === 'string') {\n        command.pwd = userPassword;\n      }\n      _get(_getPrototypeOf(AddUserOperation.prototype), \"executeCommand\", this).call(this, server, session, command, callback);\n    }\n  }]);\n  return AddUserOperation;\n}(command_1.CommandOperation);\nexports.AddUserOperation = AddUserOperation;\n(0, operation_1.defineAspects)(AddUserOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["crypto","require","error_1","utils_1","command_1","operation_1","AddUserOperation","_command_1$CommandOpe","_inherits","_super","_createSuper","db","username","password","options","_this","_classCallCheck","call","_createClass","key","value","executeCallback","server","session","callback","digestPassword","MongoInvalidArgumentError","roles","Array","isArray","length","emitWarningOnce","databaseName","toLowerCase","topology","getTopology","error","lastHello","maxWireVersion","userPassword","md5","createHash","update","concat","digest","command","createUser","customData","pwd","_get","_getPrototypeOf","prototype","CommandOperation","exports","defineAspects","Aspect","WRITE_OPERATION"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/operations/add_user.ts"],"sourcesContent":["import * as crypto from 'crypto';\n\nimport type { Document } from '../bson';\nimport type { Db } from '../db';\nimport { MongoInvalidArgumentError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { type Callback, emitWarningOnce, getTopology } from '../utils';\nimport { CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/**\n * @public\n * @deprecated Use the createUser command directly instead.\n */\nexport interface RoleSpecification {\n  /**\n   * A role grants privileges to perform sets of actions on defined resources.\n   * A given role applies to the database on which it is defined and can grant access down to a collection level of granularity.\n   */\n  role: string;\n  /** The database this user's role should effect. */\n  db: string;\n}\n\n/**\n * @public\n * @deprecated Use the createUser command directly instead.\n */\nexport interface AddUserOptions extends CommandOperationOptions {\n  /** Roles associated with the created user */\n  roles?: string | string[] | RoleSpecification | RoleSpecification[];\n  /** Custom data associated with the user (only Mongodb 2.6 or higher) */\n  customData?: Document;\n}\n\n/** @internal */\nexport class AddUserOperation extends CommandOperation<Document> {\n  override options: AddUserOptions;\n  db: Db;\n  username: string;\n  password?: string;\n\n  constructor(db: Db, username: string, password: string | undefined, options?: AddUserOptions) {\n    super(db, options);\n\n    this.db = db;\n    this.username = username;\n    this.password = password;\n    this.options = options ?? {};\n  }\n\n  override executeCallback(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options;\n\n    // Error out if digestPassword set\n    // v5 removed the digestPassword option from AddUserOptions but we still want to throw\n    // an error when digestPassword is provided.\n    if ('digestPassword' in options && options.digestPassword != null) {\n      return callback(\n        new MongoInvalidArgumentError(\n          'Option \"digestPassword\" not supported via addUser, use db.command(...) instead'\n        )\n      );\n    }\n\n    let roles;\n    if (!options.roles || (Array.isArray(options.roles) && options.roles.length === 0)) {\n      emitWarningOnce(\n        'Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise'\n      );\n      if (db.databaseName.toLowerCase() === 'admin') {\n        roles = ['root'];\n      } else {\n        roles = ['dbOwner'];\n      }\n    } else {\n      roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n    }\n\n    let topology;\n    try {\n      topology = getTopology(db);\n    } catch (error) {\n      return callback(error);\n    }\n\n    const digestPassword = topology.lastHello().maxWireVersion >= 7;\n\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5');\n      // Generate keys used for authentication\n      md5.update(`${username}:mongo:${password}`);\n      userPassword = md5.digest('hex');\n    }\n\n    // Build the command to execute\n    const command: Document = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    };\n\n    // No password\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\ndefineAspects(AddUserOperation, [Aspect.WRITE_OPERATION]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}