{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFAASEnv = exports.makeClientMetadata = exports.LimitedSizeDocument = void 0;\nvar os = require(\"os\");\nvar process = require(\"process\");\nvar bson_1 = require(\"../../bson\");\nvar error_1 = require(\"../../error\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nvar NODE_DRIVER_VERSION = require('../../../package.json').version;\n/** @internal */\nvar LimitedSizeDocument = /*#__PURE__*/function () {\n  function LimitedSizeDocument(maxSize) {\n    _classCallCheck(this, LimitedSizeDocument);\n    this.maxSize = maxSize;\n    this.document = new Map();\n    /** BSON overhead: Int32 + Null byte */\n    this.documentSize = 5;\n  }\n  /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n  _createClass(LimitedSizeDocument, [{\n    key: \"ifItFitsItSits\",\n    value: function ifItFitsItSits(key, value) {\n      // The BSON byteLength of the new element is the same as serializing it to its own document\n      // subtracting the document size int32 and the null terminator.\n      var newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n      if (newElementSize + this.documentSize > this.maxSize) {\n        return false;\n      }\n      this.documentSize += newElementSize;\n      this.document.set(key, value);\n      return true;\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n        promoteLongs: false,\n        promoteBuffers: false,\n        promoteValues: false,\n        useBigInt64: false\n      });\n    }\n  }]);\n  return LimitedSizeDocument;\n}();\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nfunction makeClientMetadata(options) {\n  var metadataDocument = new LimitedSizeDocument(512);\n  var _options$appName = options.appName,\n    appName = _options$appName === void 0 ? '' : _options$appName;\n  // Add app name first, it must be sent\n  if (appName.length > 0) {\n    var _name = Buffer.byteLength(appName, 'utf8') <= 128 ? options.appName : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n    metadataDocument.ifItFitsItSits('application', {\n      name: _name\n    });\n  }\n  var _options$driverInfo = options.driverInfo,\n    _options$driverInfo$n = _options$driverInfo.name,\n    name = _options$driverInfo$n === void 0 ? '' : _options$driverInfo$n,\n    _options$driverInfo$v = _options$driverInfo.version,\n    version = _options$driverInfo$v === void 0 ? '' : _options$driverInfo$v,\n    _options$driverInfo$p = _options$driverInfo.platform,\n    platform = _options$driverInfo$p === void 0 ? '' : _options$driverInfo$p;\n  var driverInfo = {\n    name: name.length > 0 ? \"nodejs|\".concat(name) : 'nodejs',\n    version: version.length > 0 ? \"\".concat(NODE_DRIVER_VERSION, \"|\").concat(version) : NODE_DRIVER_VERSION\n  };\n  if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n    throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo name and version, metadata cannot exceed 512 bytes');\n  }\n  var runtimeInfo = getRuntimeInfo();\n  if (platform.length > 0) {\n    runtimeInfo = \"\".concat(runtimeInfo, \"|\").concat(platform);\n  }\n  if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n    throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo platform, metadata cannot exceed 512 bytes');\n  }\n  // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n  var osInfo = new Map().set('name', process.platform).set('architecture', process.arch).set('version', os.release()).set('type', os.type());\n  if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n    var _iterator = _createForOfIteratorHelper(osInfo.keys()),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        osInfo.delete(key);\n        if (osInfo.size === 0) break;\n        if (metadataDocument.ifItFitsItSits('os', osInfo)) break;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  var faasEnv = getFAASEnv();\n  if (faasEnv != null) {\n    if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n      var _iterator2 = _createForOfIteratorHelper(faasEnv.keys()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _key = _step2.value;\n          faasEnv.delete(_key);\n          if (faasEnv.size === 0) break;\n          if (metadataDocument.ifItFitsItSits('env', faasEnv)) break;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }\n  return metadataDocument.toObject();\n}\nexports.makeClientMetadata = makeClientMetadata;\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nfunction getFAASEnv() {\n  var _process$env = process.env,\n    _process$env$AWS_EXEC = _process$env.AWS_EXECUTION_ENV,\n    AWS_EXECUTION_ENV = _process$env$AWS_EXEC === void 0 ? '' : _process$env$AWS_EXEC,\n    _process$env$AWS_LAMB = _process$env.AWS_LAMBDA_RUNTIME_API,\n    AWS_LAMBDA_RUNTIME_API = _process$env$AWS_LAMB === void 0 ? '' : _process$env$AWS_LAMB,\n    _process$env$FUNCTION = _process$env.FUNCTIONS_WORKER_RUNTIME,\n    FUNCTIONS_WORKER_RUNTIME = _process$env$FUNCTION === void 0 ? '' : _process$env$FUNCTION,\n    _process$env$K_SERVIC = _process$env.K_SERVICE,\n    K_SERVICE = _process$env$K_SERVIC === void 0 ? '' : _process$env$K_SERVIC,\n    _process$env$FUNCTION2 = _process$env.FUNCTION_NAME,\n    FUNCTION_NAME = _process$env$FUNCTION2 === void 0 ? '' : _process$env$FUNCTION2,\n    _process$env$VERCEL = _process$env.VERCEL,\n    VERCEL = _process$env$VERCEL === void 0 ? '' : _process$env$VERCEL,\n    _process$env$AWS_LAMB2 = _process$env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE,\n    AWS_LAMBDA_FUNCTION_MEMORY_SIZE = _process$env$AWS_LAMB2 === void 0 ? '' : _process$env$AWS_LAMB2,\n    _process$env$AWS_REGI = _process$env.AWS_REGION,\n    AWS_REGION = _process$env$AWS_REGI === void 0 ? '' : _process$env$AWS_REGI,\n    _process$env$FUNCTION3 = _process$env.FUNCTION_MEMORY_MB,\n    FUNCTION_MEMORY_MB = _process$env$FUNCTION3 === void 0 ? '' : _process$env$FUNCTION3,\n    _process$env$FUNCTION4 = _process$env.FUNCTION_REGION,\n    FUNCTION_REGION = _process$env$FUNCTION4 === void 0 ? '' : _process$env$FUNCTION4,\n    _process$env$FUNCTION5 = _process$env.FUNCTION_TIMEOUT_SEC,\n    FUNCTION_TIMEOUT_SEC = _process$env$FUNCTION5 === void 0 ? '' : _process$env$FUNCTION5,\n    _process$env$VERCEL_R = _process$env.VERCEL_REGION,\n    VERCEL_REGION = _process$env$VERCEL_R === void 0 ? '' : _process$env$VERCEL_R;\n  var isAWSFaaS = AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n  var isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n  var isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n  var isVercelFaaS = VERCEL.length > 0;\n  // Note: order matters, name must always be the last key\n  var faasEnv = new Map();\n  // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n  if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n    if (VERCEL_REGION.length > 0) {\n      faasEnv.set('region', VERCEL_REGION);\n    }\n    faasEnv.set('name', 'vercel');\n    return faasEnv;\n  }\n  if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n    if (AWS_REGION.length > 0) {\n      faasEnv.set('region', AWS_REGION);\n    }\n    if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 && Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n      faasEnv.set('memory_mb', new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n    }\n    faasEnv.set('name', 'aws.lambda');\n    return faasEnv;\n  }\n  if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n    faasEnv.set('name', 'azure.func');\n    return faasEnv;\n  }\n  if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n    if (FUNCTION_REGION.length > 0) {\n      faasEnv.set('region', FUNCTION_REGION);\n    }\n    if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n      faasEnv.set('memory_mb', new bson_1.Int32(FUNCTION_MEMORY_MB));\n    }\n    if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n      faasEnv.set('timeout_sec', new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n    }\n    faasEnv.set('name', 'gcp.func');\n    return faasEnv;\n  }\n  return null;\n}\nexports.getFAASEnv = getFAASEnv;\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo() {\n  if ('Deno' in globalThis) {\n    var _Deno, _Deno2;\n    var version = typeof ((_Deno = Deno) === null || _Deno === void 0 || (_Deno = _Deno.version) === null || _Deno === void 0 ? void 0 : _Deno.deno) === 'string' ? (_Deno2 = Deno) === null || _Deno2 === void 0 || (_Deno2 = _Deno2.version) === null || _Deno2 === void 0 ? void 0 : _Deno2.deno : '0.0.0-unknown';\n    return \"Deno v\".concat(version, \", \").concat(os.endianness());\n  }\n  if ('Bun' in globalThis) {\n    var _Bun, _Bun2;\n    var _version = typeof ((_Bun = Bun) === null || _Bun === void 0 ? void 0 : _Bun.version) === 'string' ? (_Bun2 = Bun) === null || _Bun2 === void 0 ? void 0 : _Bun2.version : '0.0.0-unknown';\n    return \"Bun v\".concat(_version, \", \").concat(os.endianness());\n  }\n  return \"Node.js \".concat(process.version, \", \").concat(os.endianness());\n}","map":{"version":3,"names":["os","require","process","bson_1","error_1","NODE_DRIVER_VERSION","version","LimitedSizeDocument","maxSize","_classCallCheck","document","Map","documentSize","_createClass","key","value","ifItFitsItSits","newElementSize","BSON","serialize","set","byteLength","toObject","deserialize","promoteLongs","promoteBuffers","promoteValues","useBigInt64","exports","makeClientMetadata","options","metadataDocument","_options$appName","appName","length","name","Buffer","from","subarray","toString","_options$driverInfo","driverInfo","_options$driverInfo$n","_options$driverInfo$v","_options$driverInfo$p","platform","concat","MongoInvalidArgumentError","runtimeInfo","getRuntimeInfo","osInfo","arch","release","type","_iterator","_createForOfIteratorHelper","keys","_step","s","n","done","delete","size","err","e","f","faasEnv","getFAASEnv","_iterator2","_step2","_process$env","env","_process$env$AWS_EXEC","AWS_EXECUTION_ENV","_process$env$AWS_LAMB","AWS_LAMBDA_RUNTIME_API","_process$env$FUNCTION","FUNCTIONS_WORKER_RUNTIME","_process$env$K_SERVIC","K_SERVICE","_process$env$FUNCTION2","FUNCTION_NAME","_process$env$VERCEL","VERCEL","_process$env$AWS_LAMB2","AWS_LAMBDA_FUNCTION_MEMORY_SIZE","_process$env$AWS_REGI","AWS_REGION","_process$env$FUNCTION3","FUNCTION_MEMORY_MB","_process$env$FUNCTION4","FUNCTION_REGION","_process$env$FUNCTION5","FUNCTION_TIMEOUT_SEC","_process$env$VERCEL_R","VERCEL_REGION","isAWSFaaS","startsWith","isAzureFaaS","isGCPFaaS","isVercelFaaS","Number","isInteger","Int32","globalThis","_Deno","_Deno2","Deno","deno","endianness","_Bun","_Bun2","Bun"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/cmap/handshake/client_metadata.ts"],"sourcesContent":["import * as os from 'os';\nimport * as process from 'process';\n\nimport { BSON, Int32 } from '../../bson';\nimport { MongoInvalidArgumentError } from '../../error';\nimport type { MongoOptions } from '../../mongo_client';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = require('../../../package.json').version;\n\n/**\n * @public\n * @see https://github.com/mongodb/specifications/blob/master/source/mongodb-handshake/handshake.rst#hello-command\n */\nexport interface ClientMetadata {\n  driver: {\n    name: string;\n    version: string;\n  };\n  os: {\n    type: string;\n    name?: NodeJS.Platform;\n    architecture?: string;\n    version?: string;\n  };\n  platform: string;\n  application?: {\n    name: string;\n  };\n  /** FaaS environment information */\n  env?: {\n    name: 'aws.lambda' | 'gcp.func' | 'azure.func' | 'vercel';\n    timeout_sec?: Int32;\n    memory_mb?: Int32;\n    region?: string;\n    url?: string;\n  };\n}\n\n/** @public */\nexport interface ClientMetadataOptions {\n  driverInfo?: {\n    name?: string;\n    version?: string;\n    platform?: string;\n  };\n  appName?: string;\n}\n\n/** @internal */\nexport class LimitedSizeDocument {\n  private document = new Map();\n  /** BSON overhead: Int32 + Null byte */\n  private documentSize = 5;\n  constructor(private maxSize: number) {}\n\n  /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n  public ifItFitsItSits(key: string, value: Record<string, any> | string): boolean {\n    // The BSON byteLength of the new element is the same as serializing it to its own document\n    // subtracting the document size int32 and the null terminator.\n    const newElementSize = BSON.serialize(new Map().set(key, value)).byteLength - 5;\n\n    if (newElementSize + this.documentSize > this.maxSize) {\n      return false;\n    }\n\n    this.documentSize += newElementSize;\n\n    this.document.set(key, value);\n\n    return true;\n  }\n\n  toObject(): ClientMetadata {\n    return BSON.deserialize(BSON.serialize(this.document), {\n      promoteLongs: false,\n      promoteBuffers: false,\n      promoteValues: false,\n      useBigInt64: false\n    }) as ClientMetadata;\n  }\n}\n\ntype MakeClientMetadataOptions = Pick<MongoOptions, 'appName' | 'driverInfo'>;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nexport function makeClientMetadata(options: MakeClientMetadataOptions): ClientMetadata {\n  const metadataDocument = new LimitedSizeDocument(512);\n\n  const { appName = '' } = options;\n  // Add app name first, it must be sent\n  if (appName.length > 0) {\n    const name =\n      Buffer.byteLength(appName, 'utf8') <= 128\n        ? options.appName\n        : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n    metadataDocument.ifItFitsItSits('application', { name });\n  }\n\n  const { name = '', version = '', platform = '' } = options.driverInfo;\n\n  const driverInfo = {\n    name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n    version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n  };\n\n  if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n    throw new MongoInvalidArgumentError(\n      'Unable to include driverInfo name and version, metadata cannot exceed 512 bytes'\n    );\n  }\n\n  let runtimeInfo = getRuntimeInfo();\n  if (platform.length > 0) {\n    runtimeInfo = `${runtimeInfo}|${platform}`;\n  }\n\n  if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n    throw new MongoInvalidArgumentError(\n      'Unable to include driverInfo platform, metadata cannot exceed 512 bytes'\n    );\n  }\n\n  // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n  const osInfo = new Map()\n    .set('name', process.platform)\n    .set('architecture', process.arch)\n    .set('version', os.release())\n    .set('type', os.type());\n\n  if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n    for (const key of osInfo.keys()) {\n      osInfo.delete(key);\n      if (osInfo.size === 0) break;\n      if (metadataDocument.ifItFitsItSits('os', osInfo)) break;\n    }\n  }\n\n  const faasEnv = getFAASEnv();\n  if (faasEnv != null) {\n    if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n      for (const key of faasEnv.keys()) {\n        faasEnv.delete(key);\n        if (faasEnv.size === 0) break;\n        if (metadataDocument.ifItFitsItSits('env', faasEnv)) break;\n      }\n    }\n  }\n\n  return metadataDocument.toObject();\n}\n\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nexport function getFAASEnv(): Map<string, string | Int32> | null {\n  const {\n    AWS_EXECUTION_ENV = '',\n    AWS_LAMBDA_RUNTIME_API = '',\n    FUNCTIONS_WORKER_RUNTIME = '',\n    K_SERVICE = '',\n    FUNCTION_NAME = '',\n    VERCEL = '',\n    AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '',\n    AWS_REGION = '',\n    FUNCTION_MEMORY_MB = '',\n    FUNCTION_REGION = '',\n    FUNCTION_TIMEOUT_SEC = '',\n    VERCEL_REGION = ''\n  } = process.env;\n\n  const isAWSFaaS =\n    AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n  const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n  const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n  const isVercelFaaS = VERCEL.length > 0;\n\n  // Note: order matters, name must always be the last key\n  const faasEnv = new Map();\n\n  // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n  if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n    if (VERCEL_REGION.length > 0) {\n      faasEnv.set('region', VERCEL_REGION);\n    }\n\n    faasEnv.set('name', 'vercel');\n    return faasEnv;\n  }\n\n  if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n    if (AWS_REGION.length > 0) {\n      faasEnv.set('region', AWS_REGION);\n    }\n\n    if (\n      AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 &&\n      Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)\n    ) {\n      faasEnv.set('memory_mb', new Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n    }\n\n    faasEnv.set('name', 'aws.lambda');\n    return faasEnv;\n  }\n\n  if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n    faasEnv.set('name', 'azure.func');\n    return faasEnv;\n  }\n\n  if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n    if (FUNCTION_REGION.length > 0) {\n      faasEnv.set('region', FUNCTION_REGION);\n    }\n\n    if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n      faasEnv.set('memory_mb', new Int32(FUNCTION_MEMORY_MB));\n    }\n\n    if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n      faasEnv.set('timeout_sec', new Int32(FUNCTION_TIMEOUT_SEC));\n    }\n\n    faasEnv.set('name', 'gcp.func');\n    return faasEnv;\n  }\n\n  return null;\n}\n\n/**\n * @internal\n * This type represents the global Deno object and the minimal type contract we expect it to satisfy.\n */\ndeclare const Deno: { version?: { deno?: string } } | undefined;\n\n/**\n * @internal\n * This type represents the global Bun object and the minimal type contract we expect it to satisfy.\n */\ndeclare const Bun: { (): void; version?: string } | undefined;\n\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo(): string {\n  if ('Deno' in globalThis) {\n    const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n\n    return `Deno v${version}, ${os.endianness()}`;\n  }\n\n  if ('Bun' in globalThis) {\n    const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n\n    return `Bun v${version}, ${os.endianness()}`;\n  }\n\n  return `Node.js ${process.version}, ${os.endianness()}`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}