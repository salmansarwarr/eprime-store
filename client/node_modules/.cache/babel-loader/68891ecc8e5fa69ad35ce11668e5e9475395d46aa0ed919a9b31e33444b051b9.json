{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _require = require(\"./encoding\"),\n  utf8Encode = _require.utf8Encode,\n  utf8DecodeWithoutBOM = _require.utf8DecodeWithoutBOM;\nvar _require2 = require(\"./percent-encoding\"),\n  percentDecodeBytes = _require2.percentDecodeBytes,\n  utf8PercentEncodeString = _require2.utf8PercentEncodeString,\n  isURLEncodedPercentEncode = _require2.isURLEncodedPercentEncode;\nfunction p(char) {\n  return char.codePointAt(0);\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-parser\nfunction parseUrlencoded(input) {\n  var sequences = strictlySplitByteSequence(input, p(\"&\"));\n  var output = [];\n  var _iterator = _createForOfIteratorHelper(sequences),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var bytes = _step.value;\n      if (bytes.length === 0) {\n        continue;\n      }\n      var name = void 0,\n        value = void 0;\n      var indexOfEqual = bytes.indexOf(p(\"=\"));\n      if (indexOfEqual >= 0) {\n        name = bytes.slice(0, indexOfEqual);\n        value = bytes.slice(indexOfEqual + 1);\n      } else {\n        name = bytes;\n        value = new Uint8Array(0);\n      }\n      name = replaceByteInByteSequence(name, 0x2B, 0x20);\n      value = replaceByteInByteSequence(value, 0x2B, 0x20);\n      var nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));\n      var valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));\n      output.push([nameString, valueString]);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return output;\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-string-parser\nfunction parseUrlencodedString(input) {\n  return parseUrlencoded(utf8Encode(input));\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-serializer\nfunction serializeUrlencoded(tuples) {\n  var encodingOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var encoding = \"utf-8\";\n  if (encodingOverride !== undefined) {\n    // TODO \"get the output encoding\", i.e. handle encoding labels vs. names.\n    encoding = encodingOverride;\n  }\n  var output = \"\";\n  var _iterator2 = _createForOfIteratorHelper(tuples.entries()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n        i = _step2$value[0],\n        tuple = _step2$value[1];\n      // TODO: handle encoding override\n\n      var name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);\n      var value = tuple[1];\n      if (tuple.length > 2 && tuple[2] !== undefined) {\n        if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n          value = encoding;\n        } else if (tuple[2] === \"file\") {\n          // value is a File object\n          value = value.name;\n        }\n      }\n      value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);\n      if (i !== 0) {\n        output += \"&\";\n      }\n      output += \"\".concat(name, \"=\").concat(value);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return output;\n}\nfunction strictlySplitByteSequence(buf, cp) {\n  var list = [];\n  var last = 0;\n  var i = buf.indexOf(cp);\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n  return list;\n}\nfunction replaceByteInByteSequence(buf, from, to) {\n  var i = buf.indexOf(from);\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n  return buf;\n}\nmodule.exports = {\n  parseUrlencodedString: parseUrlencodedString,\n  serializeUrlencoded: serializeUrlencoded\n};","map":{"version":3,"names":["_slicedToArray","require","default","_createForOfIteratorHelper","_require","utf8Encode","utf8DecodeWithoutBOM","_require2","percentDecodeBytes","utf8PercentEncodeString","isURLEncodedPercentEncode","p","char","codePointAt","parseUrlencoded","input","sequences","strictlySplitByteSequence","output","_iterator","_step","s","n","done","bytes","value","length","name","indexOfEqual","indexOf","slice","Uint8Array","replaceByteInByteSequence","nameString","valueString","push","err","e","f","parseUrlencodedString","serializeUrlencoded","tuples","encodingOverride","arguments","undefined","encoding","_iterator2","entries","_step2","_step2$value","i","tuple","concat","buf","cp","list","last","from","to","module","exports"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb-connection-string-url/node_modules/whatwg-url/lib/urlencoded.js"],"sourcesContent":["\"use strict\";\nconst { utf8Encode, utf8DecodeWithoutBOM } = require(\"./encoding\");\nconst { percentDecodeBytes, utf8PercentEncodeString, isURLEncodedPercentEncode } = require(\"./percent-encoding\");\n\nfunction p(char) {\n  return char.codePointAt(0);\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-parser\nfunction parseUrlencoded(input) {\n  const sequences = strictlySplitByteSequence(input, p(\"&\"));\n  const output = [];\n  for (const bytes of sequences) {\n    if (bytes.length === 0) {\n      continue;\n    }\n\n    let name, value;\n    const indexOfEqual = bytes.indexOf(p(\"=\"));\n\n    if (indexOfEqual >= 0) {\n      name = bytes.slice(0, indexOfEqual);\n      value = bytes.slice(indexOfEqual + 1);\n    } else {\n      name = bytes;\n      value = new Uint8Array(0);\n    }\n\n    name = replaceByteInByteSequence(name, 0x2B, 0x20);\n    value = replaceByteInByteSequence(value, 0x2B, 0x20);\n\n    const nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));\n    const valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));\n\n    output.push([nameString, valueString]);\n  }\n  return output;\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-string-parser\nfunction parseUrlencodedString(input) {\n  return parseUrlencoded(utf8Encode(input));\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-serializer\nfunction serializeUrlencoded(tuples, encodingOverride = undefined) {\n  let encoding = \"utf-8\";\n  if (encodingOverride !== undefined) {\n    // TODO \"get the output encoding\", i.e. handle encoding labels vs. names.\n    encoding = encodingOverride;\n  }\n\n  let output = \"\";\n  for (const [i, tuple] of tuples.entries()) {\n    // TODO: handle encoding override\n\n    const name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);\n\n    let value = tuple[1];\n    if (tuple.length > 2 && tuple[2] !== undefined) {\n      if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n        value = encoding;\n      } else if (tuple[2] === \"file\") {\n        // value is a File object\n        value = value.name;\n      }\n    }\n\n    value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);\n\n    if (i !== 0) {\n      output += \"&\";\n    }\n    output += `${name}=${value}`;\n  }\n  return output;\n}\n\nfunction strictlySplitByteSequence(buf, cp) {\n  const list = [];\n  let last = 0;\n  let i = buf.indexOf(cp);\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n  return list;\n}\n\nfunction replaceByteInByteSequence(buf, from, to) {\n  let i = buf.indexOf(from);\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n  return buf;\n}\n\nmodule.exports = {\n  parseUrlencodedString,\n  serializeUrlencoded\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}