{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\nvar error_1 = require(\"../error\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nvar PoolClosedError = /*#__PURE__*/function (_error_1$MongoDriverE) {\n  _inherits(PoolClosedError, _error_1$MongoDriverE);\n  var _super = _createSuper(PoolClosedError);\n  function PoolClosedError(pool) {\n    var _this;\n    _classCallCheck(this, PoolClosedError);\n    _this = _super.call(this, 'Attempted to check out a connection from closed connection pool');\n    _this.address = pool.address;\n    return _this;\n  }\n  _createClass(PoolClosedError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoPoolClosedError';\n    }\n  }]);\n  return PoolClosedError;\n}(error_1.MongoDriverError);\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nvar PoolClearedError = /*#__PURE__*/function (_error_1$MongoNetwork) {\n  _inherits(PoolClearedError, _error_1$MongoNetwork);\n  var _super2 = _createSuper(PoolClearedError);\n  function PoolClearedError(pool, message) {\n    var _pool$serverError;\n    var _this2;\n    _classCallCheck(this, PoolClearedError);\n    var errorMessage = message ? message : \"Connection pool for \".concat(pool.address, \" was cleared because another operation failed with: \\\"\").concat((_pool$serverError = pool.serverError) === null || _pool$serverError === void 0 ? void 0 : _pool$serverError.message, \"\\\"\");\n    _this2 = _super2.call(this, errorMessage);\n    _this2.address = pool.address;\n    _this2.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n    return _this2;\n  }\n  _createClass(PoolClearedError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoPoolClearedError';\n    }\n  }]);\n  return PoolClearedError;\n}(error_1.MongoNetworkError);\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nvar PoolClearedOnNetworkError = /*#__PURE__*/function (_PoolClearedError) {\n  _inherits(PoolClearedOnNetworkError, _PoolClearedError);\n  var _super3 = _createSuper(PoolClearedOnNetworkError);\n  function PoolClearedOnNetworkError(pool) {\n    _classCallCheck(this, PoolClearedOnNetworkError);\n    return _super3.call(this, pool, \"Connection to \".concat(pool.address, \" interrupted due to server monitor timeout\"));\n  }\n  _createClass(PoolClearedOnNetworkError, [{\n    key: \"name\",\n    get: function get() {\n      return 'PoolClearedOnNetworkError';\n    }\n  }]);\n  return PoolClearedOnNetworkError;\n}(PoolClearedError);\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nvar WaitQueueTimeoutError = /*#__PURE__*/function (_error_1$MongoDriverE2) {\n  _inherits(WaitQueueTimeoutError, _error_1$MongoDriverE2);\n  var _super4 = _createSuper(WaitQueueTimeoutError);\n  function WaitQueueTimeoutError(message, address) {\n    var _this3;\n    _classCallCheck(this, WaitQueueTimeoutError);\n    _this3 = _super4.call(this, message);\n    _this3.address = address;\n    return _this3;\n  }\n  _createClass(WaitQueueTimeoutError, [{\n    key: \"name\",\n    get: function get() {\n      return 'MongoWaitQueueTimeoutError';\n    }\n  }]);\n  return WaitQueueTimeoutError;\n}(error_1.MongoDriverError);\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;","map":{"version":3,"names":["error_1","require","PoolClosedError","_error_1$MongoDriverE","_inherits","_super","_createSuper","pool","_this","_classCallCheck","call","address","_createClass","key","get","MongoDriverError","exports","PoolClearedError","_error_1$MongoNetwork","_super2","message","_pool$serverError","_this2","errorMessage","concat","serverError","addErrorLabel","MongoErrorLabel","RetryableWriteError","MongoNetworkError","PoolClearedOnNetworkError","_PoolClearedError","_super3","WaitQueueTimeoutError","_error_1$MongoDriverE2","_super4","_this3"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/cmap/errors.ts"],"sourcesContent":["import { MongoDriverError, MongoErrorLabel, MongoNetworkError } from '../error';\nimport type { ConnectionPool } from './connection_pool';\n\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nexport class PoolClosedError extends MongoDriverError {\n  /** The address of the connection pool */\n  address: string;\n\n  constructor(pool: ConnectionPool) {\n    super('Attempted to check out a connection from closed connection pool');\n    this.address = pool.address;\n  }\n\n  override get name(): string {\n    return 'MongoPoolClosedError';\n  }\n}\n\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nexport class PoolClearedError extends MongoNetworkError {\n  /** The address of the connection pool */\n  address: string;\n\n  constructor(pool: ConnectionPool, message?: string) {\n    const errorMessage = message\n      ? message\n      : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n    super(errorMessage);\n    this.address = pool.address;\n\n    this.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n  }\n\n  override get name(): string {\n    return 'MongoPoolClearedError';\n  }\n}\n\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nexport class PoolClearedOnNetworkError extends PoolClearedError {\n  constructor(pool: ConnectionPool) {\n    super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n  }\n\n  override get name(): string {\n    return 'PoolClearedOnNetworkError';\n  }\n}\n\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nexport class WaitQueueTimeoutError extends MongoDriverError {\n  /** The address of the connection pool */\n  address: string;\n\n  constructor(message: string, address: string) {\n    super(message);\n    this.address = address;\n  }\n\n  override get name(): string {\n    return 'MongoWaitQueueTimeoutError';\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}