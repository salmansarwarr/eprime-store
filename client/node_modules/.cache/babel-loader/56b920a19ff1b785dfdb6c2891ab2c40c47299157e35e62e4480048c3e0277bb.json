{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nvar error_1 = require(\"../error\");\nvar utils_1 = require(\"../utils\");\nvar command_1 = require(\"./command\");\nvar operation_1 = require(\"./operation\");\n/** @internal */\nvar UpdateOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(UpdateOperation, _command_1$CommandOpe);\n  var _super = _createSuper(UpdateOperation);\n  function UpdateOperation(ns, statements, options) {\n    var _this;\n    _classCallCheck(this, UpdateOperation);\n    _this = _super.call(this, undefined, options);\n    _this.options = options;\n    _this.ns = ns;\n    _this.statements = statements;\n    return _this;\n  }\n  _createClass(UpdateOperation, [{\n    key: \"canRetryWrite\",\n    get: function get() {\n      if (_get(_getPrototypeOf(UpdateOperation.prototype), \"canRetryWrite\", this) === false) {\n        return false;\n      }\n      return this.statements.every(function (op) {\n        return op.multi == null || op.multi === false;\n      });\n    }\n  }, {\n    key: \"executeCallback\",\n    value: function executeCallback(server, session, callback) {\n      var _this$options;\n      var options = (_this$options = this.options) !== null && _this$options !== void 0 ? _this$options : {};\n      var ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n      var command = {\n        update: this.ns.collection,\n        updates: this.statements,\n        ordered: ordered\n      };\n      if (typeof options.bypassDocumentValidation === 'boolean') {\n        command.bypassDocumentValidation = options.bypassDocumentValidation;\n      }\n      if (options.let) {\n        command.let = options.let;\n      }\n      // we check for undefined specifically here to allow falsy values\n      // eslint-disable-next-line no-restricted-syntax\n      if (options.comment !== undefined) {\n        command.comment = options.comment;\n      }\n      var unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n      if (unacknowledgedWrite) {\n        if (this.statements.find(function (o) {\n          return o.hint;\n        })) {\n          // TODO(NODE-3541): fix error for hint with unacknowledged writes\n          callback(new error_1.MongoCompatibilityError(\"hint is not supported with unacknowledged writes\"));\n          return;\n        }\n      }\n      _get(_getPrototypeOf(UpdateOperation.prototype), \"executeCommand\", this).call(this, server, session, command, callback);\n    }\n  }]);\n  return UpdateOperation;\n}(command_1.CommandOperation);\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\nvar UpdateOneOperation = /*#__PURE__*/function (_UpdateOperation) {\n  _inherits(UpdateOneOperation, _UpdateOperation);\n  var _super2 = _createSuper(UpdateOneOperation);\n  function UpdateOneOperation(collection, filter, update, options) {\n    var _this2;\n    _classCallCheck(this, UpdateOneOperation);\n    _this2 = _super2.call(this, collection.s.namespace, [makeUpdateStatement(filter, update, _objectSpread(_objectSpread({}, options), {}, {\n      multi: false\n    }))], options);\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n    return _this2;\n  }\n  _createClass(UpdateOneOperation, [{\n    key: \"executeCallback\",\n    value: function executeCallback(server, session, callback) {\n      var _this3 = this;\n      _get(_getPrototypeOf(UpdateOneOperation.prototype), \"executeCallback\", this).call(this, server, session, function (err, res) {\n        var _ref, _this3$writeConcern;\n        if (err || !res) return callback(err);\n        if (_this3.explain != null) return callback(undefined, res);\n        if (res.code) return callback(new error_1.MongoServerError(res));\n        if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n        callback(undefined, {\n          acknowledged: (_ref = ((_this3$writeConcern = _this3.writeConcern) === null || _this3$writeConcern === void 0 ? void 0 : _this3$writeConcern.w) !== 0) !== null && _ref !== void 0 ? _ref : true,\n          modifiedCount: res.nModified != null ? res.nModified : res.n,\n          upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n          upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n          matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        });\n      });\n    }\n  }]);\n  return UpdateOneOperation;\n}(UpdateOperation);\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\nvar UpdateManyOperation = /*#__PURE__*/function (_UpdateOperation2) {\n  _inherits(UpdateManyOperation, _UpdateOperation2);\n  var _super3 = _createSuper(UpdateManyOperation);\n  function UpdateManyOperation(collection, filter, update, options) {\n    var _this4;\n    _classCallCheck(this, UpdateManyOperation);\n    _this4 = _super3.call(this, collection.s.namespace, [makeUpdateStatement(filter, update, _objectSpread(_objectSpread({}, options), {}, {\n      multi: true\n    }))], options);\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n    return _this4;\n  }\n  _createClass(UpdateManyOperation, [{\n    key: \"executeCallback\",\n    value: function executeCallback(server, session, callback) {\n      var _this5 = this;\n      _get(_getPrototypeOf(UpdateManyOperation.prototype), \"executeCallback\", this).call(this, server, session, function (err, res) {\n        var _ref2, _this5$writeConcern;\n        if (err || !res) return callback(err);\n        if (_this5.explain != null) return callback(undefined, res);\n        if (res.code) return callback(new error_1.MongoServerError(res));\n        if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n        callback(undefined, {\n          acknowledged: (_ref2 = ((_this5$writeConcern = _this5.writeConcern) === null || _this5$writeConcern === void 0 ? void 0 : _this5$writeConcern.w) !== 0) !== null && _ref2 !== void 0 ? _ref2 : true,\n          modifiedCount: res.nModified != null ? res.nModified : res.n,\n          upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n          upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n          matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        });\n      });\n    }\n  }]);\n  return UpdateManyOperation;\n}(UpdateOperation);\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\nvar ReplaceOneOperation = /*#__PURE__*/function (_UpdateOperation3) {\n  _inherits(ReplaceOneOperation, _UpdateOperation3);\n  var _super4 = _createSuper(ReplaceOneOperation);\n  function ReplaceOneOperation(collection, filter, replacement, options) {\n    var _this6;\n    _classCallCheck(this, ReplaceOneOperation);\n    _this6 = _super4.call(this, collection.s.namespace, [makeUpdateStatement(filter, replacement, _objectSpread(_objectSpread({}, options), {}, {\n      multi: false\n    }))], options);\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n    return _this6;\n  }\n  _createClass(ReplaceOneOperation, [{\n    key: \"executeCallback\",\n    value: function executeCallback(server, session, callback) {\n      var _this7 = this;\n      _get(_getPrototypeOf(ReplaceOneOperation.prototype), \"executeCallback\", this).call(this, server, session, function (err, res) {\n        var _ref3, _this7$writeConcern;\n        if (err || !res) return callback(err);\n        if (_this7.explain != null) return callback(undefined, res);\n        if (res.code) return callback(new error_1.MongoServerError(res));\n        if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n        callback(undefined, {\n          acknowledged: (_ref3 = ((_this7$writeConcern = _this7.writeConcern) === null || _this7$writeConcern === void 0 ? void 0 : _this7$writeConcern.w) !== 0) !== null && _ref3 !== void 0 ? _ref3 : true,\n          modifiedCount: res.nModified != null ? res.nModified : res.n,\n          upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n          upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n          matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        });\n      });\n    }\n  }]);\n  return ReplaceOneOperation;\n}(UpdateOperation);\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n  if (filter == null || typeof filter !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n  if (update == null || typeof update !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n  var op = {\n    q: filter,\n    u: update\n  };\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n  return op;\n}\nexports.makeUpdateStatement = makeUpdateStatement;\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);","map":{"version":3,"names":["error_1","require","utils_1","command_1","operation_1","UpdateOperation","_command_1$CommandOpe","_inherits","_super","_createSuper","ns","statements","options","_this","_classCallCheck","call","undefined","_createClass","key","get","_get","_getPrototypeOf","prototype","every","op","multi","value","executeCallback","server","session","callback","_this$options","ordered","command","update","collection","updates","bypassDocumentValidation","let","comment","unacknowledgedWrite","writeConcern","w","find","o","hint","MongoCompatibilityError","CommandOperation","exports","UpdateOneOperation","_UpdateOperation","_super2","filter","_this2","s","namespace","makeUpdateStatement","_objectSpread","hasAtomicOperators","MongoInvalidArgumentError","_this3","err","res","_ref","_this3$writeConcern","explain","code","MongoServerError","writeErrors","acknowledged","modifiedCount","nModified","n","upsertedId","Array","isArray","upserted","length","_id","upsertedCount","matchedCount","UpdateManyOperation","_UpdateOperation2","_super3","_this4","_this5","_ref2","_this5$writeConcern","ReplaceOneOperation","_UpdateOperation3","_super4","replacement","_this6","_this7","_ref3","_this7$writeConcern","q","u","upsert","arrayFilters","collation","defineAspects","Aspect","RETRYABLE","WRITE_OPERATION","SKIP_COLLATION","EXPLAINABLE"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/operations/update.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError, MongoInvalidArgumentError, MongoServerError } from '../error';\nimport type { InferIdType } from '../mongo_types';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { type Callback, hasAtomicOperators, type MongoDBNamespace } from '../utils';\nimport { type CollationOptions, CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects, type Hint } from './operation';\n\n/** @public */\nexport interface UpdateOptions extends CommandOperationOptions {\n  /** A set of filters specifying to which array elements an update should apply */\n  arrayFilters?: Document[];\n  /** If true, allows the write to opt-out of document level validation */\n  bypassDocumentValidation?: boolean;\n  /** Specifies a collation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/**\n * @public\n * `TSchema` is the schema of the collection\n */\nexport interface UpdateResult<TSchema extends Document = Document> {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n  acknowledged: boolean;\n  /** The number of documents that matched the filter */\n  matchedCount: number;\n  /** The number of documents that were modified */\n  modifiedCount: number;\n  /** The number of documents that were upserted */\n  upsertedCount: number;\n  /** The identifier of the inserted document if an upsert took place */\n  upsertedId: InferIdType<TSchema> | null;\n}\n\n/** @public */\nexport interface UpdateStatement {\n  /** The query that matches documents to update. */\n  q: Document;\n  /** The modifications to apply. */\n  u: Document | Document[];\n  /**  If true, perform an insert if no documents match the query. */\n  upsert?: boolean;\n  /** If true, updates all documents that meet the query criteria. */\n  multi?: boolean;\n  /** Specifies the collation to use for the operation. */\n  collation?: CollationOptions;\n  /** An array of filter documents that determines which array elements to modify for an update operation on an array field. */\n  arrayFilters?: Document[];\n  /** A document or string that specifies the index to use to support the query predicate. */\n  hint?: Hint;\n}\n\n/** @internal */\nexport class UpdateOperation extends CommandOperation<Document> {\n  override options: UpdateOptions & { ordered?: boolean };\n  statements: UpdateStatement[];\n\n  constructor(\n    ns: MongoDBNamespace,\n    statements: UpdateStatement[],\n    options: UpdateOptions & { ordered?: boolean }\n  ) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n\n    this.statements = statements;\n  }\n\n  override get canRetryWrite(): boolean {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n\n    return this.statements.every(op => op.multi == null || op.multi === false);\n  }\n\n  override executeCallback(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command: Document = {\n      update: this.ns.collection,\n      updates: this.statements,\n      ordered\n    };\n\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (options.let) {\n      command.let = options.let;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n    if (unacknowledgedWrite) {\n      if (this.statements.find((o: Document) => o.hint)) {\n        // TODO(NODE-3541): fix error for hint with unacknowledged writes\n        callback(new MongoCompatibilityError(`hint is not supported with unacknowledged writes`));\n        return;\n      }\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\n/** @internal */\nexport class UpdateOneOperation extends UpdateOperation {\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, update, { ...options, multi: false })],\n      options\n    );\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  override executeCallback(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<UpdateResult | Document>\n  ): void {\n    super.executeCallback(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId:\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\n\n/** @internal */\nexport class UpdateManyOperation extends UpdateOperation {\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, update, { ...options, multi: true })],\n      options\n    );\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  override executeCallback(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<UpdateResult | Document>\n  ): void {\n    super.executeCallback(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId:\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\n\n/** @public */\nexport interface ReplaceOptions extends CommandOperationOptions {\n  /** If true, allows the write to opt-out of document level validation */\n  bypassDocumentValidation?: boolean;\n  /** Specifies a collation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: string | Document;\n  /** When true, creates a new document if no document matches the query */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @internal */\nexport class ReplaceOneOperation extends UpdateOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    replacement: Document,\n    options: ReplaceOptions\n  ) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, replacement, { ...options, multi: false })],\n      options\n    );\n\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n  }\n\n  override executeCallback(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<UpdateResult | Document>\n  ): void {\n    super.executeCallback(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId:\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\n\nexport function makeUpdateStatement(\n  filter: Document,\n  update: Document | Document[],\n  options: UpdateOptions & { multi?: boolean }\n): UpdateStatement {\n  if (filter == null || typeof filter !== 'object') {\n    throw new MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n\n  if (update == null || typeof update !== 'object') {\n    throw new MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n\n  const op: UpdateStatement = { q: filter, u: update };\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n\n  return op;\n}\n\ndefineAspects(UpdateOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION, Aspect.SKIP_COLLATION]);\ndefineAspects(UpdateOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(UpdateManyOperation, [\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(ReplaceOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.SKIP_COLLATION\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}