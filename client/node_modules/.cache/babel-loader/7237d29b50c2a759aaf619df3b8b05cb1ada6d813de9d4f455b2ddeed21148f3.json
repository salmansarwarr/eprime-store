{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _defineProperty = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _ref;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MonitorInterval = exports.RTTPinger = exports.Monitor = void 0;\nvar timers_1 = require(\"timers\");\nvar bson_1 = require(\"../bson\");\nvar connect_1 = require(\"../cmap/connect\");\nvar connection_1 = require(\"../cmap/connection\");\nvar constants_1 = require(\"../constants\");\nvar error_1 = require(\"../error\");\nvar mongo_types_1 = require(\"../mongo_types\");\nvar utils_1 = require(\"../utils\");\nvar common_1 = require(\"./common\");\nvar events_1 = require(\"./events\");\nvar server_1 = require(\"./server\");\n/** @internal */\nvar kServer = Symbol('server');\n/** @internal */\nvar kMonitorId = Symbol('monitorId');\n/** @internal */\nvar kConnection = Symbol('connection');\n/** @internal */\nvar kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nvar kRTTPinger = Symbol('rttPinger');\n/** @internal */\nvar kRoundTripTime = Symbol('roundTripTime');\nvar STATE_IDLE = 'idle';\nvar STATE_MONITORING = 'monitoring';\nvar stateTransition = (0, utils_1.makeStateMachine)((_ref = {}, _defineProperty(_ref, common_1.STATE_CLOSING, [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED]), _defineProperty(_ref, common_1.STATE_CLOSED, [common_1.STATE_CLOSED, STATE_MONITORING]), _defineProperty(_ref, STATE_IDLE, [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING]), _defineProperty(_ref, STATE_MONITORING, [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]), _ref));\nvar INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n  return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @internal */\nvar Monitor = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(Monitor, _mongo_types_1$TypedE);\n  var _super = _createSuper(Monitor);\n  function Monitor(server, options) {\n    var _options$connectTimeo, _options$heartbeatFre, _options$minHeartbeat;\n    var _this;\n    _classCallCheck(this, Monitor);\n    _this = _super.call(this);\n    _this[kServer] = server;\n    _this[kConnection] = undefined;\n    _this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    _this[kCancellationToken].setMaxListeners(Infinity);\n    _this[kMonitorId] = undefined;\n    _this.s = {\n      state: common_1.STATE_CLOSED\n    };\n    _this.address = server.description.address;\n    _this.options = Object.freeze({\n      connectTimeoutMS: (_options$connectTimeo = options.connectTimeoutMS) !== null && _options$connectTimeo !== void 0 ? _options$connectTimeo : 10000,\n      heartbeatFrequencyMS: (_options$heartbeatFre = options.heartbeatFrequencyMS) !== null && _options$heartbeatFre !== void 0 ? _options$heartbeatFre : 10000,\n      minHeartbeatFrequencyMS: (_options$minHeartbeat = options.minHeartbeatFrequencyMS) !== null && _options$minHeartbeat !== void 0 ? _options$minHeartbeat : 500\n    });\n    var cancellationToken = _this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    var connectOptions = Object.assign({\n      id: '<monitor>',\n      generation: server.pool.generation,\n      connectionType: connection_1.Connection,\n      cancellationToken: cancellationToken,\n      hostAddress: server.description.hostAddress\n    }, options,\n    // force BSON serialization options\n    {\n      raw: false,\n      useBigInt64: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    });\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n    _this.connectOptions = Object.freeze(connectOptions);\n    return _this;\n  }\n  _createClass(Monitor, [{\n    key: \"connection\",\n    get: function get() {\n      return this[kConnection];\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.s.state !== common_1.STATE_CLOSED) {\n        return;\n      }\n      // start\n      var heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n      var minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n      this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n        heartbeatFrequencyMS: heartbeatFrequencyMS,\n        minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n        immediate: true\n      });\n    }\n  }, {\n    key: \"requestCheck\",\n    value: function requestCheck() {\n      var _this$kMonitorId;\n      if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n        return;\n      }\n      (_this$kMonitorId = this[kMonitorId]) === null || _this$kMonitorId === void 0 ? void 0 : _this$kMonitorId.wake();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var topologyVersion = this[kServer].description.topologyVersion;\n      if (isInCloseState(this) || topologyVersion == null) {\n        return;\n      }\n      stateTransition(this, common_1.STATE_CLOSING);\n      resetMonitorState(this);\n      // restart monitor\n      stateTransition(this, STATE_IDLE);\n      // restart monitoring\n      var heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n      var minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n      this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n        heartbeatFrequencyMS: heartbeatFrequencyMS,\n        minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (isInCloseState(this)) {\n        return;\n      }\n      stateTransition(this, common_1.STATE_CLOSING);\n      resetMonitorState(this);\n      // close monitor\n      this.emit('close');\n      stateTransition(this, common_1.STATE_CLOSED);\n    }\n  }]);\n  return Monitor;\n}(mongo_types_1.TypedEventEmitter);\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n  var _monitor$kMonitorId, _monitor$kRTTPinger, _monitor$kConnection;\n  (_monitor$kMonitorId = monitor[kMonitorId]) === null || _monitor$kMonitorId === void 0 ? void 0 : _monitor$kMonitorId.stop();\n  monitor[kMonitorId] = undefined;\n  (_monitor$kRTTPinger = monitor[kRTTPinger]) === null || _monitor$kRTTPinger === void 0 ? void 0 : _monitor$kRTTPinger.close();\n  monitor[kRTTPinger] = undefined;\n  monitor[kCancellationToken].emit('cancel');\n  (_monitor$kConnection = monitor[kConnection]) === null || _monitor$kConnection === void 0 ? void 0 : _monitor$kConnection.destroy({\n    force: true\n  });\n  monitor[kConnection] = undefined;\n}\nfunction checkServer(monitor, callback) {\n  var start = (0, utils_1.now)();\n  monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n  function failureHandler(err) {\n    var _monitor$kConnection2;\n    (_monitor$kConnection2 = monitor[kConnection]) === null || _monitor$kConnection2 === void 0 ? void 0 : _monitor$kConnection2.destroy({\n      force: true\n    });\n    monitor[kConnection] = undefined;\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err));\n    var error = !(err instanceof error_1.MongoError) ? new error_1.MongoError(err) : err;\n    error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n    if (error instanceof error_1.MongoNetworkTimeoutError) {\n      error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n    }\n    monitor.emit('resetServer', error);\n    callback(err);\n  }\n  var connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    var serverApi = connection.serverApi,\n      helloOk = connection.helloOk;\n    var connectTimeoutMS = monitor.options.connectTimeoutMS;\n    var maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    var topologyVersion = monitor[kServer].description.topologyVersion;\n    var isAwaitable = topologyVersion != null;\n    var cmd = _objectSpread(_defineProperty({}, serverApi !== null && serverApi !== void 0 && serverApi.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND, 1), isAwaitable && topologyVersion ? {\n      maxAwaitTimeMS: maxAwaitTimeMS,\n      topologyVersion: makeTopologyVersion(topologyVersion)\n    } : {});\n    var options = isAwaitable ? {\n      socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n      exhaustAllowed: true\n    } : {\n      socketTimeoutMS: connectTimeoutMS\n    };\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(monitor[kCancellationToken], Object.assign({\n        heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS\n      }, monitor.connectOptions));\n    }\n    connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options, function (err, hello) {\n      if (err) {\n        return failureHandler(err);\n      }\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n      }\n      var rttPinger = monitor[kRTTPinger];\n      var duration = isAwaitable && rttPinger ? rttPinger.roundTripTime : (0, utils_1.calculateDurationInMs)(start);\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello));\n      // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n        start = (0, utils_1.now)();\n      } else {\n        var _monitor$kRTTPinger2;\n        (_monitor$kRTTPinger2 = monitor[kRTTPinger]) === null || _monitor$kRTTPinger2 === void 0 ? void 0 : _monitor$kRTTPinger2.close();\n        monitor[kRTTPinger] = undefined;\n        callback(undefined, hello);\n      }\n    });\n    return;\n  }\n  // connecting does an implicit `hello`\n  (0, connect_1.connect)(monitor.connectOptions, function (err, conn) {\n    if (err) {\n      monitor[kConnection] = undefined;\n      failureHandler(err);\n      return;\n    }\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n      if (isInCloseState(monitor)) {\n        conn.destroy({\n          force: true\n        });\n        return;\n      }\n      monitor[kConnection] = conn;\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), conn.hello));\n      callback(undefined, conn.hello);\n    }\n  });\n}\nfunction monitorServer(monitor) {\n  return function (callback) {\n    if (monitor.s.state === STATE_MONITORING) {\n      process.nextTick(callback);\n      return;\n    }\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n      callback();\n    }\n    checkServer(monitor, function (err, hello) {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n          return done();\n        }\n      }\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (hello && hello.topologyVersion) {\n        (0, timers_1.setTimeout)(function () {\n          if (!isInCloseState(monitor)) {\n            var _monitor$kMonitorId2;\n            (_monitor$kMonitorId2 = monitor[kMonitorId]) === null || _monitor$kMonitorId2 === void 0 ? void 0 : _monitor$kMonitorId2.wake();\n          }\n        }, 0);\n      }\n      done();\n    });\n  };\n}\nfunction makeTopologyVersion(tv) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n  };\n}\n/** @internal */\nvar RTTPinger = /*#__PURE__*/function () {\n  function RTTPinger(cancellationToken, options) {\n    var _this2 = this;\n    _classCallCheck(this, RTTPinger);\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n    var heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = (0, timers_1.setTimeout)(function () {\n      return measureRoundTripTime(_this2, options);\n    }, heartbeatFrequencyMS);\n  }\n  _createClass(RTTPinger, [{\n    key: \"roundTripTime\",\n    get: function get() {\n      return this[kRoundTripTime];\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this$kConnection;\n      this.closed = true;\n      (0, timers_1.clearTimeout)(this[kMonitorId]);\n      (_this$kConnection = this[kConnection]) === null || _this$kConnection === void 0 ? void 0 : _this$kConnection.destroy({\n        force: true\n      });\n      this[kConnection] = undefined;\n    }\n  }]);\n  return RTTPinger;\n}();\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n  var start = (0, utils_1.now)();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  var heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n  if (rttPinger.closed) {\n    return;\n  }\n  function measureAndReschedule(conn) {\n    if (rttPinger.closed) {\n      conn === null || conn === void 0 ? void 0 : conn.destroy({\n        force: true\n      });\n      return;\n    }\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n    rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n    rttPinger[kMonitorId] = (0, timers_1.setTimeout)(function () {\n      return measureRoundTripTime(rttPinger, options);\n    }, heartbeatFrequencyMS);\n  }\n  var connection = rttPinger[kConnection];\n  if (connection == null) {\n    (0, connect_1.connect)(options, function (err, conn) {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n      measureAndReschedule(conn);\n    });\n    return;\n  }\n  connection.command((0, utils_1.ns)('admin.$cmd'), _defineProperty({}, constants_1.LEGACY_HELLO_COMMAND, 1), undefined, function (err) {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n    measureAndReschedule();\n  });\n}\n/**\n * @internal\n */\nvar MonitorInterval = /*#__PURE__*/function () {\n  function MonitorInterval(fn) {\n    var _this3 = this,\n      _options$heartbeatFre2,\n      _options$minHeartbeat2;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, MonitorInterval);\n    this.isExpeditedCallToFnScheduled = false;\n    this.stopped = false;\n    this.isExecutionInProgress = false;\n    this.hasExecutedOnce = false;\n    this._executeAndReschedule = function () {\n      if (_this3.stopped) return;\n      if (_this3.timerId) {\n        (0, timers_1.clearTimeout)(_this3.timerId);\n      }\n      _this3.isExpeditedCallToFnScheduled = false;\n      _this3.isExecutionInProgress = true;\n      _this3.fn(function () {\n        _this3.lastExecutionEnded = (0, utils_1.now)();\n        _this3.isExecutionInProgress = false;\n        _this3._reschedule(_this3.heartbeatFrequencyMS);\n      });\n    };\n    this.fn = fn;\n    this.lastExecutionEnded = -Infinity;\n    this.heartbeatFrequencyMS = (_options$heartbeatFre2 = options.heartbeatFrequencyMS) !== null && _options$heartbeatFre2 !== void 0 ? _options$heartbeatFre2 : 1000;\n    this.minHeartbeatFrequencyMS = (_options$minHeartbeat2 = options.minHeartbeatFrequencyMS) !== null && _options$minHeartbeat2 !== void 0 ? _options$minHeartbeat2 : 500;\n    if (options.immediate) {\n      this._executeAndReschedule();\n    } else {\n      this._reschedule(undefined);\n    }\n  }\n  _createClass(MonitorInterval, [{\n    key: \"wake\",\n    value: function wake() {\n      var currentTime = (0, utils_1.now)();\n      var timeSinceLastCall = currentTime - this.lastExecutionEnded;\n      // TODO(NODE-4674): Add error handling and logging to the monitor\n      if (timeSinceLastCall < 0) {\n        return this._executeAndReschedule();\n      }\n      if (this.isExecutionInProgress) {\n        return;\n      }\n      // debounce multiple calls to wake within the `minInterval`\n      if (this.isExpeditedCallToFnScheduled) {\n        return;\n      }\n      // reschedule a call as soon as possible, ensuring the call never happens\n      // faster than the `minInterval`\n      if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n        this.isExpeditedCallToFnScheduled = true;\n        this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n        return;\n      }\n      this._executeAndReschedule();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.stopped = true;\n      if (this.timerId) {\n        (0, timers_1.clearTimeout)(this.timerId);\n        this.timerId = undefined;\n      }\n      this.lastExecutionEnded = -Infinity;\n      this.isExpeditedCallToFnScheduled = false;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var currentTime = (0, utils_1.now)();\n      var timeSinceLastCall = currentTime - this.lastExecutionEnded;\n      return {\n        timerId: this.timerId != null ? 'set' : 'cleared',\n        lastCallTime: this.lastExecutionEnded,\n        isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n        stopped: this.stopped,\n        heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n        minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n        currentTime: currentTime,\n        timeSinceLastCall: timeSinceLastCall\n      };\n    }\n  }, {\n    key: \"_reschedule\",\n    value: function _reschedule(ms) {\n      if (this.stopped) return;\n      if (this.timerId) {\n        (0, timers_1.clearTimeout)(this.timerId);\n      }\n      this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n    }\n  }]);\n  return MonitorInterval;\n}();\nexports.MonitorInterval = MonitorInterval;","map":{"version":3,"names":["timers_1","require","bson_1","connect_1","connection_1","constants_1","error_1","mongo_types_1","utils_1","common_1","events_1","server_1","kServer","Symbol","kMonitorId","kConnection","kCancellationToken","kRTTPinger","kRoundTripTime","STATE_IDLE","STATE_MONITORING","stateTransition","makeStateMachine","_ref","_defineProperty","STATE_CLOSING","STATE_CLOSED","INVALID_REQUEST_CHECK_STATES","Set","isInCloseState","monitor","s","state","Monitor","_mongo_types_1$TypedE","_inherits","_super","_createSuper","server","options","_options$connectTimeo","_options$heartbeatFre","_options$minHeartbeat","_this","_classCallCheck","call","undefined","CancellationToken","setMaxListeners","Infinity","address","description","Object","freeze","connectTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","cancellationToken","connectOptions","assign","id","generation","pool","connectionType","Connection","hostAddress","raw","useBigInt64","promoteLongs","promoteValues","promoteBuffers","credentials","autoEncrypter","_createClass","key","get","value","connect","MonitorInterval","monitorServer","immediate","requestCheck","_this$kMonitorId","has","wake","reset","topologyVersion","resetMonitorState","close","emit","TypedEventEmitter","exports","_monitor$kMonitorId","_monitor$kRTTPinger","_monitor$kConnection","stop","destroy","force","checkServer","callback","start","now","Server","SERVER_HEARTBEAT_STARTED","ServerHeartbeatStartedEvent","failureHandler","err","_monitor$kConnection2","SERVER_HEARTBEAT_FAILED","ServerHeartbeatFailedEvent","calculateDurationInMs","error","MongoError","addErrorLabel","MongoErrorLabel","ResetPool","MongoNetworkTimeoutError","InterruptInUseConnections","connection","closed","serverApi","helloOk","maxAwaitTimeMS","isAwaitable","cmd","_objectSpread","version","LEGACY_HELLO_COMMAND","makeTopologyVersion","socketTimeoutMS","exhaustAllowed","RTTPinger","command","ns","hello","isWritablePrimary","rttPinger","duration","roundTripTime","SERVER_HEARTBEAT_SUCCEEDED","ServerHeartbeatSucceededEvent","_monitor$kRTTPinger2","conn","isMonitoringConnection","process","nextTick","done","type","ServerType","Unknown","setTimeout","_monitor$kMonitorId2","tv","processId","counter","Long","isLong","fromNumber","_this2","measureRoundTripTime","_this$kConnection","clearTimeout","measureAndReschedule","fn","_this3","_options$heartbeatFre2","_options$minHeartbeat2","arguments","length","isExpeditedCallToFnScheduled","stopped","isExecutionInProgress","hasExecutedOnce","_executeAndReschedule","timerId","lastExecutionEnded","_reschedule","currentTime","timeSinceLastCall","toString","JSON","stringify","toJSON","lastCallTime","isExpeditedCheckScheduled","ms"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/sdam/monitor.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport { type Document, Long } from '../bson';\nimport { connect } from '../cmap/connect';\nimport { Connection, type ConnectionOptions } from '../cmap/connection';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport { MongoError, MongoErrorLabel, MongoNetworkTimeoutError } from '../error';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { Callback, EventEmitterWithState } from '../utils';\nimport { calculateDurationInMs, makeStateMachine, now, ns } from '../utils';\nimport { ServerType, STATE_CLOSED, STATE_CLOSING } from './common';\nimport {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Server } from './server';\nimport type { TopologyVersion } from './server_description';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\n\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_IDLE, STATE_CLOSED],\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, STATE_CLOSING]\n});\n\nconst INVALID_REQUEST_CHECK_STATES = new Set([STATE_CLOSING, STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor: Monitor) {\n  return monitor.s.state === STATE_CLOSED || monitor.s.state === STATE_CLOSING;\n}\n\n/** @internal */\nexport interface MonitorPrivate {\n  state: string;\n}\n\n/** @public */\nexport interface MonitorOptions\n  extends Omit<ConnectionOptions, 'id' | 'generation' | 'hostAddress'> {\n  connectTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n}\n\n/** @public */\nexport type MonitorEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  resetServer(error?: MongoError): void;\n  resetConnectionPool(): void;\n  close(): void;\n} & EventEmitterWithState;\n\n/** @internal */\nexport class Monitor extends TypedEventEmitter<MonitorEvents> {\n  /** @internal */\n  s: MonitorPrivate;\n  address: string;\n  options: Readonly<\n    Pick<MonitorOptions, 'connectTimeoutMS' | 'heartbeatFrequencyMS' | 'minHeartbeatFrequencyMS'>\n  >;\n  connectOptions: ConnectionOptions;\n  [kServer]: Server;\n  [kConnection]?: Connection;\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kMonitorId]?: MonitorInterval;\n  [kRTTPinger]?: RTTPinger;\n\n  get connection(): Connection | undefined {\n    return this[kConnection];\n  }\n\n  constructor(server: Server, options: MonitorOptions) {\n    super();\n\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: STATE_CLOSED\n    };\n\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500\n    });\n\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = Object.assign(\n      {\n        id: '<monitor>' as const,\n        generation: server.pool.generation,\n        connectionType: Connection,\n        cancellationToken,\n        hostAddress: server.description.hostAddress\n      },\n      options,\n      // force BSON serialization options\n      {\n        raw: false,\n        useBigInt64: false,\n        promoteLongs: true,\n        promoteValues: true,\n        promoteBuffers: true\n      }\n    );\n\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck(): void {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    this[kMonitorId]?.wake();\n  }\n\n  reset(): void {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n    });\n  }\n\n  close(): void {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // close monitor\n    this.emit('close');\n    stateTransition(this, STATE_CLOSED);\n  }\n}\n\nfunction resetMonitorState(monitor: Monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n\n  monitor[kRTTPinger]?.close();\n  monitor[kRTTPinger] = undefined;\n\n  monitor[kCancellationToken].emit('cancel');\n\n  monitor[kConnection]?.destroy({ force: true });\n  monitor[kConnection] = undefined;\n}\n\nfunction checkServer(monitor: Monitor, callback: Callback<Document | null>) {\n  let start = now();\n  monitor.emit(Server.SERVER_HEARTBEAT_STARTED, new ServerHeartbeatStartedEvent(monitor.address));\n\n  function failureHandler(err: Error) {\n    monitor[kConnection]?.destroy({ force: true });\n    monitor[kConnection] = undefined;\n\n    monitor.emit(\n      Server.SERVER_HEARTBEAT_FAILED,\n      new ServerHeartbeatFailedEvent(monitor.address, calculateDurationInMs(start), err)\n    );\n\n    const error = !(err instanceof MongoError) ? new MongoError(err) : err;\n    error.addErrorLabel(MongoErrorLabel.ResetPool);\n    if (error instanceof MongoNetworkTimeoutError) {\n      error.addErrorLabel(MongoErrorLabel.InterruptInUseConnections);\n    }\n\n    monitor.emit('resetServer', error);\n    callback(err);\n  }\n\n  const connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    const { serverApi, helloOk } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : LEGACY_HELLO_COMMAND]: 1,\n      ...(isAwaitable && topologyVersion\n        ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n        : {})\n    };\n\n    const options = isAwaitable\n      ? {\n          socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n          exhaustAllowed: true\n        }\n      : { socketTimeoutMS: connectTimeoutMS };\n\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(\n        monitor[kCancellationToken],\n        Object.assign(\n          { heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS },\n          monitor.connectOptions\n        )\n      );\n    }\n\n    connection.command(ns('admin.$cmd'), cmd, options, (err, hello) => {\n      if (err) {\n        return failureHandler(err);\n      }\n\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[LEGACY_HELLO_COMMAND];\n      }\n\n      const rttPinger = monitor[kRTTPinger];\n      const duration =\n        isAwaitable && rttPinger ? rttPinger.roundTripTime : calculateDurationInMs(start);\n\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, duration, hello)\n      );\n\n      // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(\n          Server.SERVER_HEARTBEAT_STARTED,\n          new ServerHeartbeatStartedEvent(monitor.address)\n        );\n        start = now();\n      } else {\n        monitor[kRTTPinger]?.close();\n        monitor[kRTTPinger] = undefined;\n\n        callback(undefined, hello);\n      }\n    });\n\n    return;\n  }\n\n  // connecting does an implicit `hello`\n  connect(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n\n      failureHandler(err);\n      return;\n    }\n\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n\n      if (isInCloseState(monitor)) {\n        conn.destroy({ force: true });\n        return;\n      }\n\n      monitor[kConnection] = conn;\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, calculateDurationInMs(start), conn.hello)\n      );\n\n      callback(undefined, conn.hello);\n    }\n  });\n}\n\nfunction monitorServer(monitor: Monitor) {\n  return (callback: Callback) => {\n    if (monitor.s.state === STATE_MONITORING) {\n      process.nextTick(callback);\n      return;\n    }\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === ServerType.Unknown) {\n          return done();\n        }\n      }\n\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (hello && hello.topologyVersion) {\n        setTimeout(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv: TopologyVersion) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: Long.isLong(tv.counter) ? tv.counter : Long.fromNumber(tv.counter)\n  };\n}\n\n/** @internal */\nexport interface RTTPingerOptions extends ConnectionOptions {\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport class RTTPinger {\n  /** @internal */\n  [kConnection]?: Connection;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kRoundTripTime]: number;\n  /** @internal */\n  [kMonitorId]: NodeJS.Timeout;\n  closed: boolean;\n\n  constructor(cancellationToken: CancellationToken, options: RTTPingerOptions) {\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = setTimeout(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime(): number {\n    return this[kRoundTripTime];\n  }\n\n  close(): void {\n    this.closed = true;\n    clearTimeout(this[kMonitorId]);\n\n    this[kConnection]?.destroy({ force: true });\n    this[kConnection] = undefined;\n  }\n}\n\nfunction measureRoundTripTime(rttPinger: RTTPinger, options: RTTPingerOptions) {\n  const start = now();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n\n  if (rttPinger.closed) {\n    return;\n  }\n\n  function measureAndReschedule(conn?: Connection) {\n    if (rttPinger.closed) {\n      conn?.destroy({ force: true });\n      return;\n    }\n\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n\n    rttPinger[kRoundTripTime] = calculateDurationInMs(start);\n    rttPinger[kMonitorId] = setTimeout(\n      () => measureRoundTripTime(rttPinger, options),\n      heartbeatFrequencyMS\n    );\n  }\n\n  const connection = rttPinger[kConnection];\n  if (connection == null) {\n    connect(options, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n\n      measureAndReschedule(conn);\n    });\n\n    return;\n  }\n\n  connection.command(ns('admin.$cmd'), { [LEGACY_HELLO_COMMAND]: 1 }, undefined, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n\n    measureAndReschedule();\n  });\n}\n\n/**\n * @internal\n */\nexport interface MonitorIntervalOptions {\n  /** The interval to execute a method on */\n  heartbeatFrequencyMS: number;\n  /** A minimum interval that must elapse before the method is called */\n  minHeartbeatFrequencyMS: number;\n  /** Whether the method should be called immediately when the interval is started  */\n  immediate: boolean;\n}\n\n/**\n * @internal\n */\nexport class MonitorInterval {\n  fn: (callback: Callback) => void;\n  timerId: NodeJS.Timeout | undefined;\n  lastExecutionEnded: number;\n  isExpeditedCallToFnScheduled = false;\n  stopped = false;\n  isExecutionInProgress = false;\n  hasExecutedOnce = false;\n\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n\n  constructor(fn: (callback: Callback) => void, options: Partial<MonitorIntervalOptions> = {}) {\n    this.fn = fn;\n    this.lastExecutionEnded = -Infinity;\n\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n    this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n\n    if (options.immediate) {\n      this._executeAndReschedule();\n    } else {\n      this._reschedule(undefined);\n    }\n  }\n\n  wake() {\n    const currentTime = now();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n\n    // TODO(NODE-4674): Add error handling and logging to the monitor\n    if (timeSinceLastCall < 0) {\n      return this._executeAndReschedule();\n    }\n\n    if (this.isExecutionInProgress) {\n      return;\n    }\n\n    // debounce multiple calls to wake within the `minInterval`\n    if (this.isExpeditedCallToFnScheduled) {\n      return;\n    }\n\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n      this.isExpeditedCallToFnScheduled = true;\n      this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n      return;\n    }\n\n    this._executeAndReschedule();\n  }\n\n  stop() {\n    this.stopped = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = undefined;\n    }\n\n    this.lastExecutionEnded = -Infinity;\n    this.isExpeditedCallToFnScheduled = false;\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  toJSON() {\n    const currentTime = now();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    return {\n      timerId: this.timerId != null ? 'set' : 'cleared',\n      lastCallTime: this.lastExecutionEnded,\n      isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n      stopped: this.stopped,\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n      currentTime,\n      timeSinceLastCall\n    };\n  }\n\n  private _reschedule(ms?: number) {\n    if (this.stopped) return;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    this.timerId = setTimeout(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n  }\n\n  private _executeAndReschedule = () => {\n    if (this.stopped) return;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    this.isExpeditedCallToFnScheduled = false;\n    this.isExecutionInProgress = true;\n\n    this.fn(() => {\n      this.lastExecutionEnded = now();\n      this.isExecutionInProgress = false;\n      this._reschedule(this.heartbeatFrequencyMS);\n    });\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}