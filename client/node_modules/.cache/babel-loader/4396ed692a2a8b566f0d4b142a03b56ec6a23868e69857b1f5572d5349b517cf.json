{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCR = void 0;\nvar crypto = require(\"crypto\");\nvar error_1 = require(\"../../error\");\nvar utils_1 = require(\"../../utils\");\nvar auth_provider_1 = require(\"./auth_provider\");\nvar MongoCR = /*#__PURE__*/function (_auth_provider_1$Auth) {\n  _inherits(MongoCR, _auth_provider_1$Auth);\n  var _super = _createSuper(MongoCR);\n  function MongoCR() {\n    _classCallCheck(this, MongoCR);\n    return _super.apply(this, arguments);\n  }\n  _createClass(MongoCR, [{\n    key: \"auth\",\n    value: function () {\n      var _auth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authContext) {\n        var connection, credentials, username, password, source, _yield$connection$com, nonce, hashPassword, key, authenticateCommand;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              connection = authContext.connection, credentials = authContext.credentials;\n              if (credentials) {\n                _context.next = 3;\n                break;\n              }\n              throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n            case 3:\n              username = credentials.username, password = credentials.password, source = credentials.source;\n              _context.next = 6;\n              return connection.commandAsync((0, utils_1.ns)(\"\".concat(source, \".$cmd\")), {\n                getnonce: 1\n              }, undefined);\n            case 6:\n              _yield$connection$com = _context.sent;\n              nonce = _yield$connection$com.nonce;\n              hashPassword = crypto.createHash('md5').update(\"\".concat(username, \":mongo:\").concat(password), 'utf8').digest('hex'); // Final key\n              key = crypto.createHash('md5').update(\"\".concat(nonce).concat(username).concat(hashPassword), 'utf8').digest('hex');\n              authenticateCommand = {\n                authenticate: 1,\n                user: username,\n                nonce: nonce,\n                key: key\n              };\n              _context.next = 13;\n              return connection.commandAsync((0, utils_1.ns)(\"\".concat(source, \".$cmd\")), authenticateCommand, undefined);\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function auth(_x) {\n        return _auth.apply(this, arguments);\n      }\n      return auth;\n    }()\n  }]);\n  return MongoCR;\n}(auth_provider_1.AuthProvider);\nexports.MongoCR = MongoCR;","map":{"version":3,"names":["crypto","require","error_1","utils_1","auth_provider_1","MongoCR","_auth_provider_1$Auth","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_auth","_asyncToGenerator","_regeneratorRuntime","mark","_callee","authContext","connection","credentials","username","password","source","_yield$connection$com","nonce","hashPassword","authenticateCommand","wrap","_callee$","_context","prev","next","MongoMissingCredentialsError","commandAsync","ns","concat","getnonce","undefined","sent","createHash","update","digest","authenticate","user","stop","auth","_x","AuthProvider","exports"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/cmap/auth/mongocr.ts"],"sourcesContent":["import * as crypto from 'crypto';\n\nimport { MongoMissingCredentialsError } from '../../error';\nimport { ns } from '../../utils';\nimport { type AuthContext, AuthProvider } from './auth_provider';\n\nexport class MongoCR extends AuthProvider {\n  override async auth(authContext: AuthContext): Promise<void> {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n      throw new MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n\n    const { username, password, source } = credentials;\n\n    const { nonce } = await connection.commandAsync(\n      ns(`${source}.$cmd`),\n      { getnonce: 1 },\n      undefined\n    );\n\n    const hashPassword = crypto\n      .createHash('md5')\n      .update(`${username}:mongo:${password}`, 'utf8')\n      .digest('hex');\n\n    // Final key\n    const key = crypto\n      .createHash('md5')\n      .update(`${nonce}${username}${hashPassword}`, 'utf8')\n      .digest('hex');\n\n    const authenticateCommand = {\n      authenticate: 1,\n      user: username,\n      nonce,\n      key\n    };\n\n    await connection.commandAsync(ns(`${source}.$cmd`), authenticateCommand, undefined);\n  }\n}\n"],"mappings":";;;;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AACA,IAAAG,eAAA,GAAAH,OAAA;AAAiE,IAEpDI,OAAQ,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,OAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,OAAA;EAAA,SAAAA,QAAA;IAAAK,eAAA,OAAAL,OAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,OAAA;IAAAS,GAAA;IAAAC,KAAA;MAAA,IAAAC,KAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CACV,SAAAC,QAAWC,WAAwB;QAAA,IAAAC,UAAA,EAAAC,WAAA,EAAAC,QAAA,EAAAC,QAAA,EAAAC,MAAA,EAAAC,qBAAA,EAAAC,KAAA,EAAAC,YAAA,EAAAf,GAAA,EAAAgB,mBAAA;QAAA,OAAAZ,mBAAA,GAAAa,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAClCb,UAAU,GAAkBD,WAAW,CAAvCC,UAAU,EAAEC,WAAW,GAAKF,WAAW,CAA3BE,WAAW;cAAA,IAC1BA,WAAW;gBAAAU,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,MACR,IAAIjC,OAAA,CAAAkC,4BAA4B,CAAC,uCAAuC,CAAC;YAAA;cAGzEZ,QAAQ,GAAuBD,WAAW,CAA1CC,QAAQ,EAAEC,QAAQ,GAAaF,WAAW,CAAhCE,QAAQ,EAAEC,MAAM,GAAKH,WAAW,CAAtBG,MAAM;cAAAO,QAAA,CAAAE,IAAA;cAAA,OAEVb,UAAU,CAACe,YAAY,CAC7C,IAAAlC,OAAA,CAAAmC,EAAE,KAAAC,MAAA,CAAIb,MAAM,UAAO,CAAC,EACpB;gBAAEc,QAAQ,EAAE;cAAC,CAAE,EACfC,SAAS,CACV;YAAA;cAAAd,qBAAA,GAAAM,QAAA,CAAAS,IAAA;cAJOd,KAAK,GAAAD,qBAAA,CAALC,KAAK;cAMPC,YAAY,GAAG7B,MAAM,CACxB2C,UAAU,CAAC,KAAK,CAAC,CACjBC,MAAM,IAAAL,MAAA,CAAIf,QAAQ,aAAAe,MAAA,CAAUd,QAAQ,GAAI,MAAM,CAAC,CAC/CoB,MAAM,CAAC,KAAK,CAAC,EAEhB;cACM/B,GAAG,GAAGd,MAAM,CACf2C,UAAU,CAAC,KAAK,CAAC,CACjBC,MAAM,IAAAL,MAAA,CAAIX,KAAK,EAAAW,MAAA,CAAGf,QAAQ,EAAAe,MAAA,CAAGV,YAAY,GAAI,MAAM,CAAC,CACpDgB,MAAM,CAAC,KAAK,CAAC;cAEVf,mBAAmB,GAAG;gBAC1BgB,YAAY,EAAE,CAAC;gBACfC,IAAI,EAAEvB,QAAQ;gBACdI,KAAK,EAALA,KAAK;gBACLd,GAAG,EAAHA;eACD;cAAAmB,QAAA,CAAAE,IAAA;cAAA,OAEKb,UAAU,CAACe,YAAY,CAAC,IAAAlC,OAAA,CAAAmC,EAAE,KAAAC,MAAA,CAAIb,MAAM,UAAO,CAAC,EAAEI,mBAAmB,EAAEW,SAAS,CAAC;YAAA;YAAA;cAAA,OAAAR,QAAA,CAAAe,IAAA;UAAA;QAAA,GAAA5B,OAAA;MAAA,CACpF;MAAA,SAAA6B,KAAAC,EAAA;QAAA,OAAAlC,KAAA,CAAAL,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAqC,IAAA;IAAA;EAAA;EAAA,OAAA5C,OAAA;AAAA,EAlC0BD,eAAA,CAAA+C,YAAY;AAAzCC,OAAA,CAAA/C,OAAA,GAAAA,OAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}