{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsServiceWorkflow = void 0;\nvar fs = require(\"fs\");\nvar error_1 = require(\"../../../error\");\nvar service_workflow_1 = require(\"./service_workflow\");\n/** Error for when the token is missing in the environment. */\nvar TOKEN_MISSING_ERROR = 'AWS_WEB_IDENTITY_TOKEN_FILE must be set in the environment.';\n/**\n * Device workflow implementation for AWS.\n *\n * @internal\n */\nvar AwsServiceWorkflow = /*#__PURE__*/function (_service_workflow_1$S) {\n  _inherits(AwsServiceWorkflow, _service_workflow_1$S);\n  var _super = _createSuper(AwsServiceWorkflow);\n  function AwsServiceWorkflow() {\n    _classCallCheck(this, AwsServiceWorkflow);\n    return _super.call(this);\n  }\n  /**\n   * Get the token from the environment.\n   */\n  _createClass(AwsServiceWorkflow, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var tokenFile;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              tokenFile = process.env.AWS_WEB_IDENTITY_TOKEN_FILE;\n              if (tokenFile) {\n                _context.next = 3;\n                break;\n              }\n              throw new error_1.MongoAWSError(TOKEN_MISSING_ERROR);\n            case 3:\n              return _context.abrupt(\"return\", fs.promises.readFile(tokenFile, 'utf8'));\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function getToken() {\n        return _getToken.apply(this, arguments);\n      }\n      return getToken;\n    }()\n  }]);\n  return AwsServiceWorkflow;\n}(service_workflow_1.ServiceWorkflow);\nexports.AwsServiceWorkflow = AwsServiceWorkflow;","map":{"version":3,"names":["fs","require","error_1","service_workflow_1","TOKEN_MISSING_ERROR","AwsServiceWorkflow","_service_workflow_1$S","_inherits","_super","_createSuper","_classCallCheck","call","_createClass","key","value","_getToken","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tokenFile","wrap","_callee$","_context","prev","next","process","env","AWS_WEB_IDENTITY_TOKEN_FILE","MongoAWSError","abrupt","promises","readFile","stop","getToken","apply","arguments","ServiceWorkflow","exports"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/cmap/auth/mongodb_oidc/aws_service_workflow.ts"],"sourcesContent":["import * as fs from 'fs';\n\nimport { MongoAWSError } from '../../../error';\nimport { ServiceWorkflow } from './service_workflow';\n\n/** Error for when the token is missing in the environment. */\nconst TOKEN_MISSING_ERROR = 'AWS_WEB_IDENTITY_TOKEN_FILE must be set in the environment.';\n\n/**\n * Device workflow implementation for AWS.\n *\n * @internal\n */\nexport class AwsServiceWorkflow extends ServiceWorkflow {\n  constructor() {\n    super();\n  }\n\n  /**\n   * Get the token from the environment.\n   */\n  async getToken(): Promise<string> {\n    const tokenFile = process.env.AWS_WEB_IDENTITY_TOKEN_FILE;\n    if (!tokenFile) {\n      throw new MongoAWSError(TOKEN_MISSING_ERROR);\n    }\n    return fs.promises.readFile(tokenFile, 'utf8');\n  }\n}\n"],"mappings":";;;;;;;;;;;;AAAA,IAAAA,EAAA,GAAAC,OAAA;AAEA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,kBAAA,GAAAF,OAAA;AAEA;AACA,IAAMG,mBAAmB,GAAG,6DAA6D;AAEzF;;;;;AAAA,IAKaC,kBAAmB,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,kBAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,kBAAA;EAC9B,SAAAA,mBAAA;IAAAK,eAAA,OAAAL,kBAAA;IAAA,OAAAG,MAAA,CAAAG,IAAA;EAEA;EAEA;;;EAAAC,YAAA,CAAAP,kBAAA;IAAAQ,GAAA;IAAAC,KAAA;MAAA,IAAAC,SAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAGA,SAAAC,QAAA;QAAA,IAAAC,SAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACQL,SAAS,GAAGM,OAAO,CAACC,GAAG,CAACC,2BAA2B;cAAA,IACpDR,SAAS;gBAAAG,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,MACN,IAAIvB,OAAA,CAAA2B,aAAa,CAACzB,mBAAmB,CAAC;YAAA;cAAA,OAAAmB,QAAA,CAAAO,MAAA,WAEvC9B,EAAE,CAAC+B,QAAQ,CAACC,QAAQ,CAACZ,SAAS,EAAE,MAAM,CAAC;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAU,IAAA;UAAA;QAAA,GAAAd,OAAA;MAAA,CAC/C;MAAA,SAAAe,SAAA;QAAA,OAAAnB,SAAA,CAAAoB,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAF,QAAA;IAAA;EAAA;EAAA,OAAA7B,kBAAA;AAAA,EAdqCF,kBAAA,CAAAkC,eAAe;AAAvDC,OAAA,CAAAjC,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}