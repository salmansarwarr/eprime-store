{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBAWS = void 0;\nvar crypto = require(\"crypto\");\nvar util_1 = require(\"util\");\nvar BSON = require(\"../../bson\");\nvar deps_1 = require(\"../../deps\");\nvar error_1 = require(\"../../error\");\nvar utils_1 = require(\"../../utils\");\nvar auth_provider_1 = require(\"./auth_provider\");\nvar mongo_credentials_1 = require(\"./mongo_credentials\");\nvar providers_1 = require(\"./providers\");\nvar ASCII_N = 110;\nvar AWS_RELATIVE_URI = 'http://169.254.170.2';\nvar AWS_EC2_URI = 'http://169.254.169.254';\nvar AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nvar bsonOptions = {\n  useBigInt64: false,\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\nvar MongoDBAWS = /*#__PURE__*/function (_auth_provider_1$Auth) {\n  _inherits(MongoDBAWS, _auth_provider_1$Auth);\n  var _super = _createSuper(MongoDBAWS);\n  function MongoDBAWS() {\n    var _this;\n    _classCallCheck(this, MongoDBAWS);\n    _this = _super.call(this);\n    _this.randomBytesAsync = (0, util_1.promisify)(crypto.randomBytes);\n    return _this;\n  }\n  _createClass(MongoDBAWS, [{\n    key: \"auth\",\n    value: function () {\n      var _auth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authContext) {\n        var connection, sign, credentials, accessKeyId, secretAccessKey, sessionToken, awsCredentials, db, nonce, saslStart, saslStartResponse, serverResponse, host, serverNonce, body, options, payload, saslContinue;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              connection = authContext.connection;\n              if (authContext.credentials) {\n                _context.next = 3;\n                break;\n              }\n              throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n            case 3:\n              if (!('kModuleError' in deps_1.aws4)) {\n                _context.next = 5;\n                break;\n              }\n              throw deps_1.aws4['kModuleError'];\n            case 5:\n              sign = deps_1.aws4.sign;\n              if (!((0, utils_1.maxWireVersion)(connection) < 9)) {\n                _context.next = 8;\n                break;\n              }\n              throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n            case 8:\n              if (authContext.credentials.username) {\n                _context.next = 12;\n                break;\n              }\n              _context.next = 11;\n              return makeTempCredentials(authContext.credentials);\n            case 11:\n              authContext.credentials = _context.sent;\n            case 12:\n              credentials = authContext.credentials;\n              accessKeyId = credentials.username;\n              secretAccessKey = credentials.password;\n              sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN; // If all three defined, include sessionToken, else include username and pass, else no credentials\n              awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n                accessKeyId: accessKeyId,\n                secretAccessKey: secretAccessKey,\n                sessionToken: sessionToken\n              } : accessKeyId && secretAccessKey ? {\n                accessKeyId: accessKeyId,\n                secretAccessKey: secretAccessKey\n              } : undefined;\n              db = credentials.source;\n              _context.next = 20;\n              return this.randomBytesAsync(32);\n            case 20:\n              nonce = _context.sent;\n              saslStart = {\n                saslStart: 1,\n                mechanism: 'MONGODB-AWS',\n                payload: BSON.serialize({\n                  r: nonce,\n                  p: ASCII_N\n                }, bsonOptions)\n              };\n              _context.next = 24;\n              return connection.commandAsync((0, utils_1.ns)(\"\".concat(db, \".$cmd\")), saslStart, undefined);\n            case 24:\n              saslStartResponse = _context.sent;\n              serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n              host = serverResponse.h;\n              serverNonce = serverResponse.s.buffer;\n              if (!(serverNonce.length !== 64)) {\n                _context.next = 30;\n                break;\n              }\n              throw new error_1.MongoRuntimeError(\"Invalid server nonce length \".concat(serverNonce.length, \", expected 64\"));\n            case 30:\n              if (utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n                _context.next = 32;\n                break;\n              }\n              throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n            case 32:\n              if (!(host.length < 1 || host.length > 255 || host.indexOf('..') !== -1)) {\n                _context.next = 34;\n                break;\n              }\n              throw new error_1.MongoRuntimeError(\"Server returned an invalid host: \\\"\".concat(host, \"\\\"\"));\n            case 34:\n              body = 'Action=GetCallerIdentity&Version=2011-06-15';\n              options = sign({\n                method: 'POST',\n                host: host,\n                region: deriveRegion(serverResponse.h),\n                service: 'sts',\n                headers: {\n                  'Content-Type': 'application/x-www-form-urlencoded',\n                  'Content-Length': body.length,\n                  'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n                  'X-MongoDB-GS2-CB-Flag': 'n'\n                },\n                path: '/',\n                body: body\n              }, awsCredentials);\n              payload = {\n                a: options.headers.Authorization,\n                d: options.headers['X-Amz-Date']\n              };\n              if (sessionToken) {\n                payload.t = sessionToken;\n              }\n              saslContinue = {\n                saslContinue: 1,\n                conversationId: 1,\n                payload: BSON.serialize(payload, bsonOptions)\n              };\n              _context.next = 41;\n              return connection.commandAsync((0, utils_1.ns)(\"\".concat(db, \".$cmd\")), saslContinue, undefined);\n            case 41:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function auth(_x) {\n        return _auth.apply(this, arguments);\n      }\n      return auth;\n    }()\n  }]);\n  return MongoDBAWS;\n}(auth_provider_1.AuthProvider);\nexports.MongoDBAWS = MongoDBAWS;\nfunction makeTempCredentials(_x2) {\n  return _makeTempCredentials.apply(this, arguments);\n}\nfunction _makeTempCredentials() {\n  _makeTempCredentials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(credentials) {\n    var makeMongoCredentialsFromAWSTemp, credentialProvider, token, roleName, creds, fromNodeProviderChain, provider, _creds;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          makeMongoCredentialsFromAWSTemp = function _makeMongoCredentials(creds) {\n            if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n              throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n            }\n            return new mongo_credentials_1.MongoCredentials({\n              username: creds.AccessKeyId,\n              password: creds.SecretAccessKey,\n              source: credentials.source,\n              mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n              mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n              }\n            });\n          };\n          credentialProvider = (0, deps_1.getAwsCredentialProvider)(); // Check if the AWS credential provider from the SDK is present. If not,\n          // use the old method.\n          if (!('kModuleError' in credentialProvider)) {\n            _context2.next = 21;\n            break;\n          }\n          if (!process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n            _context2.next = 9;\n            break;\n          }\n          _context2.t0 = makeMongoCredentialsFromAWSTemp;\n          _context2.next = 7;\n          return (0, utils_1.request)(\"\".concat(AWS_RELATIVE_URI).concat(process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI));\n        case 7:\n          _context2.t1 = _context2.sent;\n          return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t1));\n        case 9:\n          _context2.next = 11;\n          return (0, utils_1.request)(\"\".concat(AWS_EC2_URI, \"/latest/api/token\"), {\n            method: 'PUT',\n            json: false,\n            headers: {\n              'X-aws-ec2-metadata-token-ttl-seconds': 30\n            }\n          });\n        case 11:\n          token = _context2.sent;\n          _context2.next = 14;\n          return (0, utils_1.request)(\"\".concat(AWS_EC2_URI, \"/\").concat(AWS_EC2_PATH), {\n            json: false,\n            headers: {\n              'X-aws-ec2-metadata-token': token\n            }\n          });\n        case 14:\n          roleName = _context2.sent;\n          _context2.next = 17;\n          return (0, utils_1.request)(\"\".concat(AWS_EC2_URI, \"/\").concat(AWS_EC2_PATH, \"/\").concat(roleName), {\n            headers: {\n              'X-aws-ec2-metadata-token': token\n            }\n          });\n        case 17:\n          creds = _context2.sent;\n          return _context2.abrupt(\"return\", makeMongoCredentialsFromAWSTemp(creds));\n        case 21:\n          /*\n           * Creates a credential provider that will attempt to find credentials from the\n           * following sources (listed in order of precedence):\n           *\n           * - Environment variables exposed via process.env\n           * - SSO credentials from token cache\n           * - Web identity token credentials\n           * - Shared credentials and config ini files\n           * - The EC2/ECS Instance Metadata Service\n           */\n          fromNodeProviderChain = credentialProvider.fromNodeProviderChain;\n          provider = fromNodeProviderChain();\n          _context2.prev = 23;\n          _context2.next = 26;\n          return provider();\n        case 26:\n          _creds = _context2.sent;\n          return _context2.abrupt(\"return\", makeMongoCredentialsFromAWSTemp({\n            AccessKeyId: _creds.accessKeyId,\n            SecretAccessKey: _creds.secretAccessKey,\n            Token: _creds.sessionToken,\n            Expiration: _creds.expiration\n          }));\n        case 30:\n          _context2.prev = 30;\n          _context2.t2 = _context2[\"catch\"](23);\n          throw new error_1.MongoAWSError(_context2.t2.message);\n        case 33:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[23, 30]]);\n  }));\n  return _makeTempCredentials.apply(this, arguments);\n}\nfunction deriveRegion(host) {\n  var parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n  return parts[1];\n}","map":{"version":3,"names":["crypto","require","util_1","BSON","deps_1","error_1","utils_1","auth_provider_1","mongo_credentials_1","providers_1","ASCII_N","AWS_RELATIVE_URI","AWS_EC2_URI","AWS_EC2_PATH","bsonOptions","useBigInt64","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","MongoDBAWS","_auth_provider_1$Auth","_inherits","_super","_createSuper","_this","_classCallCheck","call","randomBytesAsync","promisify","randomBytes","_createClass","key","value","_auth","_asyncToGenerator","_regeneratorRuntime","mark","_callee","authContext","connection","sign","credentials","accessKeyId","secretAccessKey","sessionToken","awsCredentials","db","nonce","saslStart","saslStartResponse","serverResponse","host","serverNonce","body","options","payload","saslContinue","wrap","_callee$","_context","prev","next","MongoMissingCredentialsError","aws4","maxWireVersion","MongoCompatibilityError","username","makeTempCredentials","sent","password","mechanismProperties","AWS_SESSION_TOKEN","undefined","source","mechanism","serialize","r","p","commandAsync","ns","concat","deserialize","buffer","h","s","length","MongoRuntimeError","ByteUtils","equals","subarray","byteLength","indexOf","method","region","deriveRegion","service","headers","toBase64","path","a","Authorization","d","t","conversationId","stop","auth","_x","apply","arguments","AuthProvider","exports","_x2","_makeTempCredentials","_callee2","makeMongoCredentialsFromAWSTemp","credentialProvider","token","roleName","creds","fromNodeProviderChain","provider","_creds","_callee2$","_context2","_makeMongoCredentials","AccessKeyId","SecretAccessKey","Token","MongoCredentials","AuthMechanism","MONGODB_AWS","getAwsCredentialProvider","process","env","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","t0","request","t1","abrupt","json","Expiration","expiration","t2","MongoAWSError","message","parts","split"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/cmap/auth/mongodb_aws.ts"],"sourcesContent":["import * as crypto from 'crypto';\nimport { promisify } from 'util';\n\nimport type { Binary, BSONSerializeOptions } from '../../bson';\nimport * as BSON from '../../bson';\nimport { aws4, getAwsCredentialProvider } from '../../deps';\nimport {\n  MongoAWSError,\n  MongoCompatibilityError,\n  MongoMissingCredentialsError,\n  MongoRuntimeError\n} from '../../error';\nimport { ByteUtils, maxWireVersion, ns, request } from '../../utils';\nimport { type AuthContext, AuthProvider } from './auth_provider';\nimport { MongoCredentials } from './mongo_credentials';\nimport { AuthMechanism } from './providers';\n\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions: BSONSerializeOptions = {\n  useBigInt64: false,\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\n\ninterface AWSSaslContinuePayload {\n  a: string;\n  d: string;\n  t?: string;\n}\n\nexport class MongoDBAWS extends AuthProvider {\n  randomBytesAsync: (size: number) => Promise<Buffer>;\n\n  constructor() {\n    super();\n    this.randomBytesAsync = promisify(crypto.randomBytes);\n  }\n\n  override async auth(authContext: AuthContext): Promise<void> {\n    const { connection } = authContext;\n    if (!authContext.credentials) {\n      throw new MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n\n    if ('kModuleError' in aws4) {\n      throw aws4['kModuleError'];\n    }\n    const { sign } = aws4;\n\n    if (maxWireVersion(connection) < 9) {\n      throw new MongoCompatibilityError(\n        'MONGODB-AWS authentication requires MongoDB version 4.4 or later'\n      );\n    }\n\n    if (!authContext.credentials.username) {\n      authContext.credentials = await makeTempCredentials(authContext.credentials);\n    }\n\n    const { credentials } = authContext;\n\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\n    const awsCredentials =\n      accessKeyId && secretAccessKey && sessionToken\n        ? { accessKeyId, secretAccessKey, sessionToken }\n        : accessKeyId && secretAccessKey\n        ? { accessKeyId, secretAccessKey }\n        : undefined;\n\n    const db = credentials.source;\n    const nonce = await this.randomBytesAsync(32);\n\n    const saslStart = {\n      saslStart: 1,\n      mechanism: 'MONGODB-AWS',\n      payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n    };\n\n    const saslStartResponse = await connection.commandAsync(ns(`${db}.$cmd`), saslStart, undefined);\n\n    const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions) as {\n      s: Binary;\n      h: string;\n    };\n    const host = serverResponse.h;\n    const serverNonce = serverResponse.s.buffer;\n    if (serverNonce.length !== 64) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n    }\n\n    if (!ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n      // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n      // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('Server nonce does not begin with client nonce');\n    }\n\n    if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n    }\n\n    const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n    const options = sign(\n      {\n        method: 'POST',\n        host,\n        region: deriveRegion(serverResponse.h),\n        service: 'sts',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Content-Length': body.length,\n          'X-MongoDB-Server-Nonce': ByteUtils.toBase64(serverNonce),\n          'X-MongoDB-GS2-CB-Flag': 'n'\n        },\n        path: '/',\n        body\n      },\n      awsCredentials\n    );\n\n    const payload: AWSSaslContinuePayload = {\n      a: options.headers.Authorization,\n      d: options.headers['X-Amz-Date']\n    };\n\n    if (sessionToken) {\n      payload.t = sessionToken;\n    }\n\n    const saslContinue = {\n      saslContinue: 1,\n      conversationId: 1,\n      payload: BSON.serialize(payload, bsonOptions)\n    };\n\n    await connection.commandAsync(ns(`${db}.$cmd`), saslContinue, undefined);\n  }\n}\n\ninterface AWSTempCredentials {\n  AccessKeyId?: string;\n  SecretAccessKey?: string;\n  Token?: string;\n  RoleArn?: string;\n  Expiration?: Date;\n}\n\n/* @internal */\nexport interface AWSCredentials {\n  accessKeyId?: string;\n  secretAccessKey?: string;\n  sessionToken?: string;\n  expiration?: Date;\n}\n\nasync function makeTempCredentials(credentials: MongoCredentials): Promise<MongoCredentials> {\n  function makeMongoCredentialsFromAWSTemp(creds: AWSTempCredentials) {\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n      throw new MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n    }\n\n    return new MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: AuthMechanism.MONGODB_AWS,\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    });\n  }\n\n  const credentialProvider = getAwsCredentialProvider();\n\n  // Check if the AWS credential provider from the SDK is present. If not,\n  // use the old method.\n  if ('kModuleError' in credentialProvider) {\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n      return makeMongoCredentialsFromAWSTemp(\n        await request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`)\n      );\n    }\n\n    // Otherwise assume we are on an EC2 instance\n\n    // get a token\n    const token = await request(`${AWS_EC2_URI}/latest/api/token`, {\n      method: 'PUT',\n      json: false,\n      headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\n    });\n\n    // get role name\n    const roleName = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n      json: false,\n      headers: { 'X-aws-ec2-metadata-token': token }\n    });\n\n    // get temp credentials\n    const creds = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n      headers: { 'X-aws-ec2-metadata-token': token }\n    });\n\n    return makeMongoCredentialsFromAWSTemp(creds);\n  } else {\n    /*\n     * Creates a credential provider that will attempt to find credentials from the\n     * following sources (listed in order of precedence):\n     *\n     * - Environment variables exposed via process.env\n     * - SSO credentials from token cache\n     * - Web identity token credentials\n     * - Shared credentials and config ini files\n     * - The EC2/ECS Instance Metadata Service\n     */\n    const { fromNodeProviderChain } = credentialProvider;\n    const provider = fromNodeProviderChain();\n    try {\n      const creds = await provider();\n      return makeMongoCredentialsFromAWSTemp({\n        AccessKeyId: creds.accessKeyId,\n        SecretAccessKey: creds.secretAccessKey,\n        Token: creds.sessionToken,\n        Expiration: creds.expiration\n      });\n    } catch (error) {\n      throw new MongoAWSError(error.message);\n    }\n  }\n}\n\nfunction deriveRegion(host: string) {\n  const parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}