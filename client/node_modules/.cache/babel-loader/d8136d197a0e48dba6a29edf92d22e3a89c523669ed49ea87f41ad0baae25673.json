{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\nvar admin_1 = require(\"./admin\");\nvar bson_1 = require(\"./bson\");\nvar change_stream_1 = require(\"./change_stream\");\nvar collection_1 = require(\"./collection\");\nvar CONSTANTS = require(\"./constants\");\nvar aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nvar list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nvar run_command_cursor_1 = require(\"./cursor/run_command_cursor\");\nvar error_1 = require(\"./error\");\nvar add_user_1 = require(\"./operations/add_user\");\nvar collections_1 = require(\"./operations/collections\");\nvar create_collection_1 = require(\"./operations/create_collection\");\nvar drop_1 = require(\"./operations/drop\");\nvar execute_operation_1 = require(\"./operations/execute_operation\");\nvar indexes_1 = require(\"./operations/indexes\");\nvar profiling_level_1 = require(\"./operations/profiling_level\");\nvar remove_user_1 = require(\"./operations/remove_user\");\nvar rename_1 = require(\"./operations/rename\");\nvar run_command_1 = require(\"./operations/run_command\");\nvar set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nvar stats_1 = require(\"./operations/stats\");\nvar read_concern_1 = require(\"./read_concern\");\nvar read_preference_1 = require(\"./read_preference\");\nvar utils_1 = require(\"./utils\");\nvar write_concern_1 = require(\"./write_concern\");\n// Allowed parameters\nvar DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'useBigInt64', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'enableUtf8Validation', 'promoteValues', 'compression', 'retryWrites'];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nvar Db = /*#__PURE__*/function () {\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  function Db(client, databaseName, options) {\n    var _options, _options$pkFactory, _options2;\n    _classCallCheck(this, Db);\n    options = (_options = options) !== null && _options !== void 0 ? _options : {};\n    // Filter the options\n    options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n    // Ensure we have a valid db name\n    validateDatabaseName(databaseName);\n    // Internal state of the db object\n    this.s = {\n      // Options\n      options: options,\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: (_options$pkFactory = (_options2 = options) === null || _options2 === void 0 ? void 0 : _options2.pkFactory) !== null && _options$pkFactory !== void 0 ? _options$pkFactory : utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n    this.client = client;\n  }\n  _createClass(Db, [{\n    key: \"databaseName\",\n    get: function get() {\n      return this.s.namespace.db;\n    }\n    // Options\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this.s.options;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n  }, {\n    key: \"secondaryOk\",\n    get: function get() {\n      var _this$s$readPreferenc;\n      return ((_this$s$readPreferenc = this.s.readPreference) === null || _this$s$readPreferenc === void 0 ? void 0 : _this$s$readPreferenc.preference) !== 'primary' || false;\n    }\n  }, {\n    key: \"readConcern\",\n    get: function get() {\n      return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n  }, {\n    key: \"readPreference\",\n    get: function get() {\n      if (this.s.readPreference == null) {\n        return this.client.readPreference;\n      }\n      return this.s.readPreference;\n    }\n  }, {\n    key: \"bsonOptions\",\n    get: function get() {\n      return this.s.bsonOptions;\n    }\n    // get the write Concern\n  }, {\n    key: \"writeConcern\",\n    get: function get() {\n      return this.s.writeConcern;\n    }\n  }, {\n    key: \"namespace\",\n    get: function get() {\n      return this.s.namespace.toString();\n    }\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"createCollection\",\n    value: function () {\n      var _createCollection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, options) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function createCollection(_x, _x2) {\n        return _createCollection.apply(this, arguments);\n      }\n      return createCollection;\n    }()\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"command\",\n    value: function () {\n      var _command2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_command, options) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, _command, options)));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function command(_x3, _x4) {\n        return _command2.apply(this, arguments);\n      }\n      return command;\n    }()\n    /**\n     * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"aggregate\",\n    value: function aggregate() {\n      var pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n      return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the Admin db instance */\n  }, {\n    key: \"admin\",\n    value: function admin() {\n      return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n  }, {\n    key: \"collection\",\n    value: function collection(name) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (typeof options === 'function') {\n        throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n      }\n      return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"stats\",\n    value: function () {\n      var _stats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(options) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function stats(_x5) {\n        return _stats.apply(this, arguments);\n      }\n      return stats;\n    }()\n  }, {\n    key: \"listCollections\",\n    value: function listCollections() {\n      var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"renameCollection\",\n    value: function () {\n      var _renameCollection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(fromCollection, toCollection, options) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, _objectSpread(_objectSpread({}, options), {}, {\n                new_collection: true,\n                readPreference: read_preference_1.ReadPreference.primary\n              }))));\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function renameCollection(_x6, _x7, _x8) {\n        return _renameCollection.apply(this, arguments);\n      }\n      return renameCollection;\n    }()\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"dropCollection\",\n    value: function () {\n      var _dropCollection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(name, options) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function dropCollection(_x9, _x10) {\n        return _dropCollection.apply(this, arguments);\n      }\n      return dropCollection;\n    }()\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"dropDatabase\",\n    value: function () {\n      var _dropDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(options) {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function dropDatabase(_x11) {\n        return _dropDatabase.apply(this, arguments);\n      }\n      return dropDatabase;\n    }()\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"collections\",\n    value: function () {\n      var _collections = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(options) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function collections(_x12) {\n        return _collections.apply(this, arguments);\n      }\n      return collections;\n    }()\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"createIndex\",\n    value: function () {\n      var _createIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(name, indexSpec, options) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function createIndex(_x13, _x14, _x15) {\n        return _createIndex.apply(this, arguments);\n      }\n      return createIndex;\n    }()\n    /**\n     * Add a user to the database\n     *\n     * @param username - The username for the new user\n     * @param passwordOrOptions - An optional password for the new user, or the options for the command\n     * @param options - Optional settings for the command\n     * @deprecated Use the createUser command in `db.command()` instead.\n     * @see https://www.mongodb.com/docs/manual/reference/command/createUser/\n     */\n  }, {\n    key: \"addUser\",\n    value: function () {\n      var _addUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(username, passwordOrOptions, options) {\n        var password;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              options = options != null && typeof options === 'object' ? options : passwordOrOptions != null && typeof passwordOrOptions === 'object' ? passwordOrOptions : undefined;\n              password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\n              return _context9.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new add_user_1.AddUserOperation(this, username, password, (0, utils_1.resolveOptions)(this, options))));\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function addUser(_x16, _x17, _x18) {\n        return _addUser.apply(this, arguments);\n      }\n      return addUser;\n    }()\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"removeUser\",\n    value: function () {\n      var _removeUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(username, options) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function removeUser(_x19, _x20) {\n        return _removeUser.apply(this, arguments);\n      }\n      return removeUser;\n    }()\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"setProfilingLevel\",\n    value: function () {\n      var _setProfilingLevel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(level, options) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function setProfilingLevel(_x21, _x22) {\n        return _setProfilingLevel.apply(this, arguments);\n      }\n      return setProfilingLevel;\n    }()\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"profilingLevel\",\n    value: function () {\n      var _profilingLevel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(options) {\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              return _context12.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function profilingLevel(_x23) {\n        return _profilingLevel.apply(this, arguments);\n      }\n      return profilingLevel;\n    }()\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name - The name of the collection.\n     * @param options - Optional settings for the command\n     */\n  }, {\n    key: \"indexInformation\",\n    value: function () {\n      var _indexInformation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(name, options) {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              return _context13.abrupt(\"return\", (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options))));\n            case 1:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function indexInformation(_x24, _x25) {\n        return _indexInformation.apply(this, arguments);\n      }\n      return indexInformation;\n    }()\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n  }, {\n    key: \"watch\",\n    value: function watch() {\n      var pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // Allow optionally not specifying a pipeline\n      if (!Array.isArray(pipeline)) {\n        options = pipeline;\n        pipeline = [];\n      }\n      return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * A low level cursor API providing basic driver functionality:\n     * - ClientSession management\n     * - ReadPreference for server selection\n     * - Running getMores automatically when a local batch is exhausted\n     *\n     * @param command - The command that will start a cursor on the server.\n     * @param options - Configurations for running the command, bson options will apply to getMores\n     */\n  }, {\n    key: \"runCursorCommand\",\n    value: function runCursorCommand(command, options) {\n      return new run_command_cursor_1.RunCommandCursor(this, command, options);\n    }\n  }]);\n  return Db;\n}();\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\nexports.Db = Db;\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string') throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0) throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n  var invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (var i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1) throw new error_1.MongoAPIError(\"database names cannot contain the character '\".concat(invalidChars[i], \"'\"));\n  }\n}","map":{"version":3,"names":["admin_1","require","bson_1","change_stream_1","collection_1","CONSTANTS","aggregation_cursor_1","list_collections_cursor_1","run_command_cursor_1","error_1","add_user_1","collections_1","create_collection_1","drop_1","execute_operation_1","indexes_1","profiling_level_1","remove_user_1","rename_1","run_command_1","set_profiling_level_1","stats_1","read_concern_1","read_preference_1","utils_1","write_concern_1","DB_OPTIONS_ALLOW_LIST","Db","client","databaseName","options","_options","_options$pkFactory","_options2","_classCallCheck","filterOptions","validateDatabaseName","s","readPreference","ReadPreference","fromOptions","bsonOptions","resolveBSONOptions","pkFactory","DEFAULT_PK_FACTORY","readConcern","ReadConcern","writeConcern","WriteConcern","namespace","MongoDBNamespace","_createClass","key","get","db","_this$s$readPreferenc","preference","toString","value","_createCollection","_asyncToGenerator","_regeneratorRuntime","mark","_callee","name","wrap","_callee$","_context","prev","next","abrupt","executeOperation","CreateCollectionOperation","resolveOptions","stop","createCollection","_x","_x2","apply","arguments","_command2","_callee2","command","_callee2$","_context2","RunCommandOperation","_x3","_x4","aggregate","pipeline","length","undefined","AggregationCursor","admin","Admin","collection","MongoInvalidArgumentError","Collection","_stats","_callee3","_callee3$","_context3","DbStatsOperation","stats","_x5","listCollections","filter","ListCollectionsCursor","_renameCollection","_callee4","fromCollection","toCollection","_callee4$","_context4","RenameOperation","_objectSpread","new_collection","primary","renameCollection","_x6","_x7","_x8","_dropCollection","_callee5","_callee5$","_context5","DropCollectionOperation","dropCollection","_x9","_x10","_dropDatabase","_callee6","_callee6$","_context6","DropDatabaseOperation","dropDatabase","_x11","_collections","_callee7","_callee7$","_context7","CollectionsOperation","collections","_x12","_createIndex","_callee8","indexSpec","_callee8$","_context8","CreateIndexOperation","createIndex","_x13","_x14","_x15","_addUser","_callee9","username","passwordOrOptions","password","_callee9$","_context9","AddUserOperation","addUser","_x16","_x17","_x18","_removeUser","_callee10","_callee10$","_context10","RemoveUserOperation","removeUser","_x19","_x20","_setProfilingLevel","_callee11","level","_callee11$","_context11","SetProfilingLevelOperation","setProfilingLevel","_x21","_x22","_profilingLevel","_callee12","_callee12$","_context12","ProfilingLevelOperation","profilingLevel","_x23","_indexInformation","_callee13","_callee13$","_context13","IndexInformationOperation","indexInformation","_x24","_x25","watch","Array","isArray","ChangeStream","runCursorCommand","RunCommandCursor","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION","exports","invalidChars","i","indexOf","MongoAPIError","concat"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/db.ts"],"sourcesContent":["import { Admin } from './admin';\nimport { type BSONSerializeOptions, type Document, resolveBSONOptions } from './bson';\nimport { ChangeStream, type ChangeStreamDocument, type ChangeStreamOptions } from './change_stream';\nimport { Collection, type CollectionOptions } from './collection';\nimport * as CONSTANTS from './constants';\nimport { AggregationCursor } from './cursor/aggregation_cursor';\nimport { ListCollectionsCursor } from './cursor/list_collections_cursor';\nimport { RunCommandCursor, type RunCursorCommandOptions } from './cursor/run_command_cursor';\nimport { MongoAPIError, MongoInvalidArgumentError } from './error';\nimport type { MongoClient, PkFactory } from './mongo_client';\nimport type { TODO_NODE_3286 } from './mongo_types';\nimport { AddUserOperation, type AddUserOptions } from './operations/add_user';\nimport type { AggregateOptions } from './operations/aggregate';\nimport { CollectionsOperation } from './operations/collections';\nimport type { IndexInformationOptions } from './operations/common_functions';\nimport {\n  CreateCollectionOperation,\n  type CreateCollectionOptions\n} from './operations/create_collection';\nimport {\n  DropCollectionOperation,\n  type DropCollectionOptions,\n  DropDatabaseOperation,\n  type DropDatabaseOptions\n} from './operations/drop';\nimport { executeOperation } from './operations/execute_operation';\nimport {\n  type CreateIndexesOptions,\n  CreateIndexOperation,\n  IndexInformationOperation,\n  type IndexSpecification\n} from './operations/indexes';\nimport type { CollectionInfo, ListCollectionsOptions } from './operations/list_collections';\nimport { ProfilingLevelOperation, type ProfilingLevelOptions } from './operations/profiling_level';\nimport { RemoveUserOperation, type RemoveUserOptions } from './operations/remove_user';\nimport { RenameOperation, type RenameOptions } from './operations/rename';\nimport { RunCommandOperation, type RunCommandOptions } from './operations/run_command';\nimport {\n  type ProfilingLevel,\n  SetProfilingLevelOperation,\n  type SetProfilingLevelOptions\n} from './operations/set_profiling_level';\nimport { DbStatsOperation, type DbStatsOptions } from './operations/stats';\nimport { ReadConcern } from './read_concern';\nimport { ReadPreference, type ReadPreferenceLike } from './read_preference';\nimport { DEFAULT_PK_FACTORY, filterOptions, MongoDBNamespace, resolveOptions } from './utils';\nimport { WriteConcern, type WriteConcernOptions } from './write_concern';\n\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n  'writeConcern',\n  'readPreference',\n  'readPreferenceTags',\n  'native_parser',\n  'forceServerObjectId',\n  'pkFactory',\n  'serializeFunctions',\n  'raw',\n  'authSource',\n  'ignoreUndefined',\n  'readConcern',\n  'retryMiliSeconds',\n  'numberOfRetries',\n  'useBigInt64',\n  'promoteBuffers',\n  'promoteLongs',\n  'bsonRegExp',\n  'enableUtf8Validation',\n  'promoteValues',\n  'compression',\n  'retryWrites'\n];\n\n/** @internal */\nexport interface DbPrivate {\n  options?: DbOptions;\n  readPreference?: ReadPreference;\n  pkFactory: PkFactory;\n  readConcern?: ReadConcern;\n  bsonOptions: BSONSerializeOptions;\n  writeConcern?: WriteConcern;\n  namespace: MongoDBNamespace;\n}\n\n/** @public */\nexport interface DbOptions extends BSONSerializeOptions, WriteConcernOptions {\n  /** If the database authentication is dependent on another databaseName. */\n  authSource?: string;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n  readPreference?: ReadPreferenceLike;\n  /** A primary key factory object for generation of custom _id keys. */\n  pkFactory?: PkFactory;\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcern;\n  /** Should retry failed writes */\n  retryWrites?: boolean;\n}\n\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nexport class Db {\n  /** @internal */\n  s: DbPrivate;\n\n  /** @internal */\n  readonly client: MongoClient;\n\n  public static SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\n  public static SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\n  public static SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\n  public static SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\n  public static SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\n  public static SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client: MongoClient, databaseName: string, options?: DbOptions) {\n    options = options ?? {};\n\n    // Filter the options\n    options = filterOptions(options, DB_OPTIONS_ALLOW_LIST);\n\n    // Ensure we have a valid db name\n    validateDatabaseName(databaseName);\n\n    // Internal state of the db object\n    this.s = {\n      // Options\n      options,\n      // Unpack read preference\n      readPreference: ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: resolveBSONOptions(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: ReadConcern.fromOptions(options),\n      writeConcern: WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new MongoDBNamespace(databaseName)\n    };\n\n    this.client = client;\n  }\n\n  get databaseName(): string {\n    return this.s.namespace.db;\n  }\n\n  // Options\n  get options(): DbOptions | undefined {\n    return this.s.options;\n  }\n\n  /**\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\n   */\n  get secondaryOk(): boolean {\n    return this.s.readPreference?.preference !== 'primary' || false;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this.s.readConcern;\n  }\n\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n  get readPreference(): ReadPreference {\n    if (this.s.readPreference == null) {\n      return this.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  // get the write Concern\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get namespace(): string {\n    return this.s.namespace.toString();\n  }\n\n  /**\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\n   * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n   *\n   * @param name - The name of the collection to create\n   * @param options - Optional settings for the command\n   */\n  async createCollection<TSchema extends Document = Document>(\n    name: string,\n    options?: CreateCollectionOptions\n  ): Promise<Collection<TSchema>> {\n    return executeOperation(\n      this.client,\n      new CreateCollectionOperation(this, name, resolveOptions(this, options)) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Execute a command\n   *\n   * @remarks\n   * This command does not inherit options from the MongoClient.\n   *\n   * The driver will ensure the following fields are attached to the command sent to the server:\n   * - `lsid` - sourced from an implicit session or options.session\n   * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n   * - `$db` - sourced from the name of this database\n   *\n   * If the client has a serverApi setting:\n   * - `apiVersion`\n   * - `apiStrict`\n   * - `apiDeprecationErrors`\n   *\n   * When in a transaction:\n   * - `readConcern` - sourced from readConcern set on the TransactionOptions\n   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n   *\n   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n   *\n   * @param command - The command to run\n   * @param options - Optional settings for the command\n   */\n  async command(command: Document, options?: RunCommandOptions): Promise<Document> {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return executeOperation(this.client, new RunCommandOperation(this, command, options));\n  }\n\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n  aggregate<T extends Document = Document>(\n    pipeline: Document[] = [],\n    options?: AggregateOptions\n  ): AggregationCursor<T> {\n    return new AggregationCursor(\n      this.client,\n      this.s.namespace,\n      pipeline,\n      resolveOptions(this, options)\n    );\n  }\n\n  /** Return the Admin db instance */\n  admin(): Admin {\n    return new Admin(this);\n  }\n\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n  collection<TSchema extends Document = Document>(\n    name: string,\n    options: CollectionOptions = {}\n  ): Collection<TSchema> {\n    if (typeof options === 'function') {\n      throw new MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n    return new Collection<TSchema>(this, name, resolveOptions(this, options));\n  }\n\n  /**\n   * Get all the db statistics.\n   *\n   * @param options - Optional settings for the command\n   */\n  async stats(options?: DbStatsOptions): Promise<Document> {\n    return executeOperation(this.client, new DbStatsOperation(this, resolveOptions(this, options)));\n  }\n\n  /**\n   * List all collections of this database with optional filter\n   *\n   * @param filter - Query to filter collections by\n   * @param options - Optional settings for the command\n   */\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: true }\n  ): ListCollectionsCursor<Pick<CollectionInfo, 'name' | 'type'>>;\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: false }\n  ): ListCollectionsCursor<CollectionInfo>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter?: Document, options?: ListCollectionsOptions): ListCollectionsCursor<T>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter: Document = {}, options: ListCollectionsOptions = {}): ListCollectionsCursor<T> {\n    return new ListCollectionsCursor<T>(this, filter, resolveOptions(this, options));\n  }\n\n  /**\n   * Rename a collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the MongoClient.\n   *\n   * @param fromCollection - Name of current collection to rename\n   * @param toCollection - New name of of the collection\n   * @param options - Optional settings for the command\n   */\n  async renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options?: RenameOptions\n  ): Promise<Collection<TSchema>> {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return executeOperation(\n      this.client,\n      new RenameOperation(\n        this.collection<TSchema>(fromCollection) as TODO_NODE_3286,\n        toCollection,\n        { ...options, new_collection: true, readPreference: ReadPreference.primary }\n      ) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param name - Name of collection to drop\n   * @param options - Optional settings for the command\n   */\n  async dropCollection(name: string, options?: DropCollectionOptions): Promise<boolean> {\n    return executeOperation(\n      this.client,\n      new DropCollectionOperation(this, name, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Drop a database, removing it permanently from the server.\n   *\n   * @param options - Optional settings for the command\n   */\n  async dropDatabase(options?: DropDatabaseOptions): Promise<boolean> {\n    return executeOperation(\n      this.client,\n      new DropDatabaseOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Fetch all collections for the current db.\n   *\n   * @param options - Optional settings for the command\n   */\n  async collections(options?: ListCollectionsOptions): Promise<Collection[]> {\n    return executeOperation(\n      this.client,\n      new CollectionsOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Creates an index on the db and collection.\n   *\n   * @param name - Name of the collection to create the index on.\n   * @param indexSpec - Specify the field to index, or an index specification\n   * @param options - Optional settings for the command\n   */\n  async createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ): Promise<string> {\n    return executeOperation(\n      this.client,\n      new CreateIndexOperation(this, name, indexSpec, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Add a user to the database\n   *\n   * @param username - The username for the new user\n   * @param passwordOrOptions - An optional password for the new user, or the options for the command\n   * @param options - Optional settings for the command\n   * @deprecated Use the createUser command in `db.command()` instead.\n   * @see https://www.mongodb.com/docs/manual/reference/command/createUser/\n   */\n  async addUser(\n    username: string,\n    passwordOrOptions?: string | AddUserOptions,\n    options?: AddUserOptions\n  ): Promise<Document> {\n    options =\n      options != null && typeof options === 'object'\n        ? options\n        : passwordOrOptions != null && typeof passwordOrOptions === 'object'\n        ? passwordOrOptions\n        : undefined;\n    const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\n    return executeOperation(\n      this.client,\n      new AddUserOperation(this, username, password, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n  async removeUser(username: string, options?: RemoveUserOptions): Promise<boolean> {\n    return executeOperation(\n      this.client,\n      new RemoveUserOperation(this, username, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Set the current profiling level of MongoDB\n   *\n   * @param level - The new profiling level (off, slow_only, all).\n   * @param options - Optional settings for the command\n   */\n  async setProfilingLevel(\n    level: ProfilingLevel,\n    options?: SetProfilingLevelOptions\n  ): Promise<ProfilingLevel> {\n    return executeOperation(\n      this.client,\n      new SetProfilingLevelOperation(this, level, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Retrieve the current profiling Level for MongoDB\n   *\n   * @param options - Optional settings for the command\n   */\n  async profilingLevel(options?: ProfilingLevelOptions): Promise<string> {\n    return executeOperation(\n      this.client,\n      new ProfilingLevelOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param name - The name of the collection.\n   * @param options - Optional settings for the command\n   */\n  async indexInformation(name: string, options?: IndexInformationOptions): Promise<Document> {\n    return executeOperation(\n      this.client,\n      new IndexInformationOperation(this, name, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the collections within this database\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch<\n    TSchema extends Document = Document,\n    TChange extends Document = ChangeStreamDocument<TSchema>\n  >(pipeline: Document[] = [], options: ChangeStreamOptions = {}): ChangeStream<TSchema, TChange> {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new ChangeStream<TSchema, TChange>(this, pipeline, resolveOptions(this, options));\n  }\n\n  /**\n   * A low level cursor API providing basic driver functionality:\n   * - ClientSession management\n   * - ReadPreference for server selection\n   * - Running getMores automatically when a local batch is exhausted\n   *\n   * @param command - The command that will start a cursor on the server.\n   * @param options - Configurations for running the command, bson options will apply to getMores\n   */\n  runCursorCommand(command: Document, options?: RunCursorCommandOptions): RunCommandCursor {\n    return new RunCommandCursor(this, command, options);\n  }\n}\n\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName: string) {\n  if (typeof databaseName !== 'string')\n    throw new MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0)\n    throw new MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1)\n      throw new MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}