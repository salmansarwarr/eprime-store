{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.commandDocument = exports.ServiceWorkflow = void 0;\nvar bson_1 = require(\"bson\");\nvar utils_1 = require(\"../../../utils\");\nvar providers_1 = require(\"../providers\");\n/**\n * Common behaviour for OIDC device workflows.\n * @internal\n */\nvar ServiceWorkflow = /*#__PURE__*/function () {\n  function ServiceWorkflow() {\n    _classCallCheck(this, ServiceWorkflow);\n  }\n  _createClass(ServiceWorkflow, [{\n    key: \"execute\",\n    value:\n    /**\n     * Execute the workflow. Looks for AWS_WEB_IDENTITY_TOKEN_FILE in the environment\n     * and then attempts to read the token from that path.\n     */\n    function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(connection, credentials) {\n        var token, command;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.getToken(credentials);\n            case 2:\n              token = _context.sent;\n              command = commandDocument(token);\n              return _context.abrupt(\"return\", connection.commandAsync((0, utils_1.ns)(credentials.source), command, undefined));\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function execute(_x, _x2) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n    /**\n     * Get the document to add for speculative authentication.\n     */\n  }, {\n    key: \"speculativeAuth\",\n    value: function () {\n      var _speculativeAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(credentials) {\n        var token, document;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getToken(credentials);\n            case 2:\n              token = _context2.sent;\n              document = commandDocument(token);\n              document.db = credentials.source;\n              return _context2.abrupt(\"return\", {\n                speculativeAuthenticate: document\n              });\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function speculativeAuth(_x3) {\n        return _speculativeAuth.apply(this, arguments);\n      }\n      return speculativeAuth;\n    }()\n  }]);\n  return ServiceWorkflow;\n}();\nexports.ServiceWorkflow = ServiceWorkflow;\n/**\n * Create the saslStart command document.\n */\nfunction commandDocument(token) {\n  return {\n    saslStart: 1,\n    mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n    payload: bson_1.BSON.serialize({\n      jwt: token\n    })\n  };\n}\nexports.commandDocument = commandDocument;","map":{"version":3,"names":["bson_1","require","utils_1","providers_1","ServiceWorkflow","_classCallCheck","_createClass","key","value","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","connection","credentials","token","command","wrap","_callee$","_context","prev","next","getToken","sent","commandDocument","abrupt","commandAsync","ns","source","undefined","stop","execute","_x","_x2","apply","arguments","_speculativeAuth","_callee2","document","_callee2$","_context2","db","speculativeAuthenticate","speculativeAuth","_x3","exports","saslStart","mechanism","AuthMechanism","MONGODB_OIDC","payload","BSON","serialize","jwt"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/cmap/auth/mongodb_oidc/service_workflow.ts"],"sourcesContent":["import { BSON, type Document } from 'bson';\n\nimport { ns } from '../../../utils';\nimport type { Connection } from '../../connection';\nimport type { MongoCredentials } from '../mongo_credentials';\nimport type { Workflow } from '../mongodb_oidc';\nimport { AuthMechanism } from '../providers';\n\n/**\n * Common behaviour for OIDC device workflows.\n * @internal\n */\nexport abstract class ServiceWorkflow implements Workflow {\n  /**\n   * Execute the workflow. Looks for AWS_WEB_IDENTITY_TOKEN_FILE in the environment\n   * and then attempts to read the token from that path.\n   */\n  async execute(connection: Connection, credentials: MongoCredentials): Promise<Document> {\n    const token = await this.getToken(credentials);\n    const command = commandDocument(token);\n    return connection.commandAsync(ns(credentials.source), command, undefined);\n  }\n\n  /**\n   * Get the document to add for speculative authentication.\n   */\n  async speculativeAuth(credentials: MongoCredentials): Promise<Document> {\n    const token = await this.getToken(credentials);\n    const document = commandDocument(token);\n    document.db = credentials.source;\n    return { speculativeAuthenticate: document };\n  }\n\n  /**\n   * Get the token from the environment or endpoint.\n   */\n  abstract getToken(credentials: MongoCredentials): Promise<string>;\n}\n\n/**\n * Create the saslStart command document.\n */\nexport function commandDocument(token: string): Document {\n  return {\n    saslStart: 1,\n    mechanism: AuthMechanism.MONGODB_OIDC,\n    payload: BSON.serialize({ jwt: token })\n  };\n}\n"],"mappings":";;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,OAAA,GAAAD,OAAA;AAIA,IAAAE,WAAA,GAAAF,OAAA;AAEA;;;;AAAA,IAIsBG,eAAe;EAAA,SAAAA,gBAAA;IAAAC,eAAA,OAAAD,eAAA;EAAA;EAAAE,YAAA,CAAAF,eAAA;IAAAG,GAAA;IAAAC,KAAA;IACnC;;;;IAAA;MAAA,IAAAC,QAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAIA,SAAAC,QAAcC,UAAsB,EAAEC,WAA6B;QAAA,IAAAC,KAAA,EAAAC,OAAA;QAAA,OAAAN,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OAC7C,IAAI,CAACC,QAAQ,CAACR,WAAW,CAAC;YAAA;cAAxCC,KAAK,GAAAI,QAAA,CAAAI,IAAA;cACLP,OAAO,GAAGQ,eAAe,CAACT,KAAK,CAAC;cAAA,OAAAI,QAAA,CAAAM,MAAA,WAC/BZ,UAAU,CAACa,YAAY,CAAC,IAAAzB,OAAA,CAAA0B,EAAE,EAACb,WAAW,CAACc,MAAM,CAAC,EAAEZ,OAAO,EAAEa,SAAS,CAAC;YAAA;YAAA;cAAA,OAAAV,QAAA,CAAAW,IAAA;UAAA;QAAA,GAAAlB,OAAA;MAAA,CAC3E;MAAA,SAAAmB,QAAAC,EAAA,EAAAC,GAAA;QAAA,OAAAzB,QAAA,CAAA0B,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,OAAA;IAAA;IAED;;;EAAA;IAAAzB,GAAA;IAAAC,KAAA;MAAA,IAAA6B,gBAAA,GAAA3B,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAGA,SAAA0B,SAAsBvB,WAA6B;QAAA,IAAAC,KAAA,EAAAuB,QAAA;QAAA,OAAA5B,mBAAA,GAAAO,IAAA,UAAAsB,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAApB,IAAA,GAAAoB,SAAA,CAAAnB,IAAA;YAAA;cAAAmB,SAAA,CAAAnB,IAAA;cAAA,OAC7B,IAAI,CAACC,QAAQ,CAACR,WAAW,CAAC;YAAA;cAAxCC,KAAK,GAAAyB,SAAA,CAAAjB,IAAA;cACLe,QAAQ,GAAGd,eAAe,CAACT,KAAK,CAAC;cACvCuB,QAAQ,CAACG,EAAE,GAAG3B,WAAW,CAACc,MAAM;cAAC,OAAAY,SAAA,CAAAf,MAAA,WAC1B;gBAAEiB,uBAAuB,EAAEJ;cAAQ,CAAE;YAAA;YAAA;cAAA,OAAAE,SAAA,CAAAV,IAAA;UAAA;QAAA,GAAAO,QAAA;MAAA,CAC7C;MAAA,SAAAM,gBAAAC,GAAA;QAAA,OAAAR,gBAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAQ,eAAA;IAAA;EAAA;EAAA,OAAAxC,eAAA;AAAA;AAnBH0C,OAAA,CAAA1C,eAAA,GAAAA,eAAA;AA2BA;;;AAGA,SAAgBqB,eAAeA,CAACT,KAAa;EAC3C,OAAO;IACL+B,SAAS,EAAE,CAAC;IACZC,SAAS,EAAE7C,WAAA,CAAA8C,aAAa,CAACC,YAAY;IACrCC,OAAO,EAAEnD,MAAA,CAAAoD,IAAI,CAACC,SAAS,CAAC;MAAEC,GAAG,EAAEtC;IAAK,CAAE;GACvC;AACH;AANA8B,OAAA,CAAArB,eAAA,GAAAA,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}