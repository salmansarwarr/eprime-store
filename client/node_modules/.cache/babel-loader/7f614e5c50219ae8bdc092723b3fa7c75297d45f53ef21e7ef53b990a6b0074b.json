{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListDatabasesOperation = void 0;\nvar utils_1 = require(\"../utils\");\nvar command_1 = require(\"./command\");\nvar operation_1 = require(\"./operation\");\n/** @internal */\nvar ListDatabasesOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(ListDatabasesOperation, _command_1$CommandOpe);\n  var _super = _createSuper(ListDatabasesOperation);\n  function ListDatabasesOperation(db, options) {\n    var _this;\n    _classCallCheck(this, ListDatabasesOperation);\n    _this = _super.call(this, db, options);\n    _this.options = options !== null && options !== void 0 ? options : {};\n    _this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    return _this;\n  }\n  _createClass(ListDatabasesOperation, [{\n    key: \"executeCallback\",\n    value: function executeCallback(server, session, callback) {\n      var cmd = {\n        listDatabases: 1\n      };\n      if (typeof this.options.nameOnly === 'boolean') {\n        cmd.nameOnly = this.options.nameOnly;\n      }\n      if (this.options.filter) {\n        cmd.filter = this.options.filter;\n      }\n      if (typeof this.options.authorizedDatabases === 'boolean') {\n        cmd.authorizedDatabases = this.options.authorizedDatabases;\n      }\n      // we check for undefined specifically here to allow falsy values\n      // eslint-disable-next-line no-restricted-syntax\n      if ((0, utils_1.maxWireVersion)(server) >= 9 && this.options.comment !== undefined) {\n        cmd.comment = this.options.comment;\n      }\n      _get(_getPrototypeOf(ListDatabasesOperation.prototype), \"executeCommand\", this).call(this, server, session, cmd, callback);\n    }\n  }]);\n  return ListDatabasesOperation;\n}(command_1.CommandOperation);\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);","map":{"version":3,"names":["utils_1","require","command_1","operation_1","ListDatabasesOperation","_command_1$CommandOpe","_inherits","_super","_createSuper","db","options","_this","_classCallCheck","call","ns","MongoDBNamespace","_createClass","key","value","executeCallback","server","session","callback","cmd","listDatabases","nameOnly","filter","authorizedDatabases","maxWireVersion","comment","undefined","_get","_getPrototypeOf","prototype","CommandOperation","exports","defineAspects","Aspect","READ_OPERATION","RETRYABLE"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/operations/list_databases.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Db } from '../db';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { type Callback, maxWireVersion, MongoDBNamespace } from '../utils';\nimport { CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface ListDatabasesResult {\n  databases: ({ name: string; sizeOnDisk?: number; empty?: boolean } & Document)[];\n  totalSize?: number;\n  totalSizeMb?: number;\n  ok: 1 | 0;\n}\n\n/** @public */\nexport interface ListDatabasesOptions extends CommandOperationOptions {\n  /** A query predicate that determines which databases are listed */\n  filter?: Document;\n  /** A flag to indicate whether the command should return just the database names, or return both database names and size information */\n  nameOnly?: boolean;\n  /** A flag that determines which databases are returned based on the user privileges when access control is enabled */\n  authorizedDatabases?: boolean;\n}\n\n/** @internal */\nexport class ListDatabasesOperation extends CommandOperation<ListDatabasesResult> {\n  override options: ListDatabasesOptions;\n\n  constructor(db: Db, options?: ListDatabasesOptions) {\n    super(db, options);\n    this.options = options ?? {};\n    this.ns = new MongoDBNamespace('admin', '$cmd');\n  }\n\n  override executeCallback(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<ListDatabasesResult>\n  ): void {\n    const cmd: Document = { listDatabases: 1 };\n\n    if (typeof this.options.nameOnly === 'boolean') {\n      cmd.nameOnly = this.options.nameOnly;\n    }\n\n    if (this.options.filter) {\n      cmd.filter = this.options.filter;\n    }\n\n    if (typeof this.options.authorizedDatabases === 'boolean') {\n      cmd.authorizedDatabases = this.options.authorizedDatabases;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (maxWireVersion(server) >= 9 && this.options.comment !== undefined) {\n      cmd.comment = this.options.comment;\n    }\n\n    super.executeCommand(server, session, cmd, callback);\n  }\n}\n\ndefineAspects(ListDatabasesOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE]);\n"],"mappings":";;;;;;;;;;;;AAIA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AACA,IAAAE,WAAA,GAAAF,OAAA;AAoBA;AAAA,IACaG,sBAAuB,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,sBAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,sBAAA;EAGlC,SAAAA,uBAAYK,EAAM,EAAEC,OAA8B;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAR,sBAAA;IAChDO,KAAA,GAAAJ,MAAA,CAAAM,IAAA,OAAMJ,EAAE,EAAEC,OAAO;IACjBC,KAAA,CAAKD,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;IAC5BC,KAAA,CAAKG,EAAE,GAAG,IAAId,OAAA,CAAAe,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC;IAAC,OAAAJ,KAAA;EAClD;EAACK,YAAA,CAAAZ,sBAAA;IAAAa,GAAA;IAAAC,KAAA,EAEQ,SAAAC,gBACPC,MAAc,EACdC,OAAkC,EAClCC,QAAuC;MAEvC,IAAMC,GAAG,GAAa;QAAEC,aAAa,EAAE;MAAC,CAAE;MAE1C,IAAI,OAAO,IAAI,CAACd,OAAO,CAACe,QAAQ,KAAK,SAAS,EAAE;QAC9CF,GAAG,CAACE,QAAQ,GAAG,IAAI,CAACf,OAAO,CAACe,QAAQ;;MAGtC,IAAI,IAAI,CAACf,OAAO,CAACgB,MAAM,EAAE;QACvBH,GAAG,CAACG,MAAM,GAAG,IAAI,CAAChB,OAAO,CAACgB,MAAM;;MAGlC,IAAI,OAAO,IAAI,CAAChB,OAAO,CAACiB,mBAAmB,KAAK,SAAS,EAAE;QACzDJ,GAAG,CAACI,mBAAmB,GAAG,IAAI,CAACjB,OAAO,CAACiB,mBAAmB;;MAG5D;MACA;MACA,IAAI,IAAA3B,OAAA,CAAA4B,cAAc,EAACR,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAACV,OAAO,CAACmB,OAAO,KAAKC,SAAS,EAAE;QACrEP,GAAG,CAACM,OAAO,GAAG,IAAI,CAACnB,OAAO,CAACmB,OAAO;;MAGpCE,IAAA,CAAAC,eAAA,CAAA5B,sBAAA,CAAA6B,SAAA,2BAAApB,IAAA,OAAqBO,MAAM,EAAEC,OAAO,EAAEE,GAAG,EAAED,QAAQ;IACrD;EAAC;EAAA,OAAAlB,sBAAA;AAAA,EAnCyCF,SAAA,CAAAgC,gBAAqC;AAAjFC,OAAA,CAAA/B,sBAAA,GAAAA,sBAAA;AAsCA,IAAAD,WAAA,CAAAiC,aAAa,EAAChC,sBAAsB,EAAE,CAACD,WAAA,CAAAkC,MAAM,CAACC,cAAc,EAAEnC,WAAA,CAAAkC,MAAM,CAACE,SAAS,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}