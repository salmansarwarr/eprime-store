{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _slicedToArray = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _toConsumableArray = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar punycode = require(\"punycode\");\nvar regexes = require(\"./lib/regexes.js\");\nvar mappingTable = require(\"./lib/mappingTable.json\");\nvar _require = require(\"./lib/statusMapping.js\"),\n  STATUS_MAPPING = _require.STATUS_MAPPING;\nfunction containsNonASCII(str) {\n  return /(?:[\\x80-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/.test(str);\n}\nfunction findStatus(val, _ref) {\n  var useSTD3ASCIIRules = _ref.useSTD3ASCIIRules;\n  var start = 0;\n  var end = mappingTable.length - 1;\n  while (start <= end) {\n    var mid = Math.floor((start + end) / 2);\n    var target = mappingTable[mid];\n    var min = Array.isArray(target[0]) ? target[0][0] : target[0];\n    var max = Array.isArray(target[0]) ? target[0][1] : target[0];\n    if (min <= val && max >= val) {\n      if (useSTD3ASCIIRules && (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {\n        return [STATUS_MAPPING.disallowed].concat(_toConsumableArray(target.slice(2)));\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {\n        return [STATUS_MAPPING.valid].concat(_toConsumableArray(target.slice(2)));\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {\n        return [STATUS_MAPPING.mapped].concat(_toConsumableArray(target.slice(2)));\n      }\n      return target.slice(1);\n    } else if (min > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n  return null;\n}\nfunction mapChars(domainName, _ref2) {\n  var useSTD3ASCIIRules = _ref2.useSTD3ASCIIRules,\n    processingOption = _ref2.processingOption;\n  var hasError = false;\n  var processed = \"\";\n  var _iterator = _createForOfIteratorHelper(domainName),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var ch = _step.value;\n      var _findStatus = findStatus(ch.codePointAt(0), {\n          useSTD3ASCIIRules: useSTD3ASCIIRules\n        }),\n        _findStatus2 = _slicedToArray(_findStatus, 2),\n        status = _findStatus2[0],\n        mapping = _findStatus2[1];\n      switch (status) {\n        case STATUS_MAPPING.disallowed:\n          hasError = true;\n          processed += ch;\n          break;\n        case STATUS_MAPPING.ignored:\n          break;\n        case STATUS_MAPPING.mapped:\n          processed += mapping;\n          break;\n        case STATUS_MAPPING.deviation:\n          if (processingOption === \"transitional\") {\n            processed += mapping;\n          } else {\n            processed += ch;\n          }\n          break;\n        case STATUS_MAPPING.valid:\n          processed += ch;\n          break;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    string: processed,\n    error: hasError\n  };\n}\nfunction validateLabel(label, _ref3) {\n  var checkHyphens = _ref3.checkHyphens,\n    checkBidi = _ref3.checkBidi,\n    checkJoiners = _ref3.checkJoiners,\n    processingOption = _ref3.processingOption,\n    useSTD3ASCIIRules = _ref3.useSTD3ASCIIRules;\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n  var codePoints = Array.from(label);\n  if (checkHyphens) {\n    if (codePoints[2] === \"-\" && codePoints[3] === \"-\" || label.startsWith(\"-\") || label.endsWith(\"-\")) {\n      return false;\n    }\n  }\n  if (label.includes(\".\") || codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0])) {\n    return false;\n  }\n  for (var _i = 0, _codePoints = codePoints; _i < _codePoints.length; _i++) {\n    var ch = _codePoints[_i];\n    var _findStatus3 = findStatus(ch.codePointAt(0), {\n        useSTD3ASCIIRules: useSTD3ASCIIRules\n      }),\n      _findStatus4 = _slicedToArray(_findStatus3, 1),\n      status = _findStatus4[0];\n    if (processingOption === \"transitional\" && status !== STATUS_MAPPING.valid || processingOption === \"nontransitional\" && status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation) {\n      return false;\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    var last = 0;\n    var _iterator2 = _createForOfIteratorHelper(codePoints.entries()),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n          i = _step2$value[0],\n          _ch = _step2$value[1];\n        if (_ch === \"\\u200C\" || _ch === \"\\u200D\") {\n          if (i > 0) {\n            if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n              continue;\n            }\n            if (_ch === \"\\u200C\") {\n              // TODO: make this more efficient\n              var next = codePoints.indexOf(\"\\u200C\", i + 1);\n              var test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n              if (regexes.validZWNJ.test(test.join(\"\"))) {\n                last = i + 1;\n                continue;\n              }\n            }\n          }\n          return false;\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi) {\n    var rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {\n      // 5-6\n      return false;\n    }\n  }\n  return true;\n}\nfunction isBidiDomain(labels) {\n  var domain = labels.map(function (label) {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\nfunction processing(domainName, options) {\n  var processingOption = options.processingOption;\n\n  // 1. Map.\n  var _mapChars = mapChars(domainName, options),\n    string = _mapChars.string,\n    error = _mapChars.error;\n\n  // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  var labels = string.split(\".\");\n  var isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  var _iterator3 = _createForOfIteratorHelper(labels.entries()),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n        i = _step3$value[0],\n        origLabel = _step3$value[1];\n      var label = origLabel;\n      var curProcessing = processingOption;\n      if (label.startsWith(\"xn--\")) {\n        try {\n          label = punycode.decode(label.substring(4));\n          labels[i] = label;\n        } catch (err) {\n          error = true;\n          continue;\n        }\n        curProcessing = \"nontransitional\";\n      }\n\n      // No need to validate if we already know there is an error.\n      if (error) {\n        continue;\n      }\n      var validation = validateLabel(label, _objectSpread(_objectSpread({}, options), {}, {\n        processingOption: curProcessing,\n        checkBidi: options.checkBidi && isBidi\n      }));\n      if (!validation) {\n        error = true;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return {\n    string: labels.join(\".\"),\n    error: error\n  };\n}\nfunction toASCII(domainName) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref4$checkHyphens = _ref4.checkHyphens,\n    checkHyphens = _ref4$checkHyphens === void 0 ? false : _ref4$checkHyphens,\n    _ref4$checkBidi = _ref4.checkBidi,\n    checkBidi = _ref4$checkBidi === void 0 ? false : _ref4$checkBidi,\n    _ref4$checkJoiners = _ref4.checkJoiners,\n    checkJoiners = _ref4$checkJoiners === void 0 ? false : _ref4$checkJoiners,\n    _ref4$useSTD3ASCIIRul = _ref4.useSTD3ASCIIRules,\n    useSTD3ASCIIRules = _ref4$useSTD3ASCIIRul === void 0 ? false : _ref4$useSTD3ASCIIRul,\n    _ref4$processingOptio = _ref4.processingOption,\n    processingOption = _ref4$processingOptio === void 0 ? \"nontransitional\" : _ref4$processingOptio,\n    _ref4$verifyDNSLength = _ref4.verifyDNSLength,\n    verifyDNSLength = _ref4$verifyDNSLength === void 0 ? false : _ref4$verifyDNSLength;\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n  var result = processing(domainName, {\n    processingOption: processingOption,\n    checkHyphens: checkHyphens,\n    checkBidi: checkBidi,\n    checkJoiners: checkJoiners,\n    useSTD3ASCIIRules: useSTD3ASCIIRules\n  });\n  var labels = result.string.split(\".\");\n  labels = labels.map(function (l) {\n    if (containsNonASCII(l)) {\n      try {\n        return \"xn--\".concat(punycode.encode(l));\n      } catch (e) {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n  if (verifyDNSLength) {\n    var total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n    for (var i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\nfunction toUnicode(domainName) {\n  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref5$checkHyphens = _ref5.checkHyphens,\n    checkHyphens = _ref5$checkHyphens === void 0 ? false : _ref5$checkHyphens,\n    _ref5$checkBidi = _ref5.checkBidi,\n    checkBidi = _ref5$checkBidi === void 0 ? false : _ref5$checkBidi,\n    _ref5$checkJoiners = _ref5.checkJoiners,\n    checkJoiners = _ref5$checkJoiners === void 0 ? false : _ref5$checkJoiners,\n    _ref5$useSTD3ASCIIRul = _ref5.useSTD3ASCIIRules,\n    useSTD3ASCIIRules = _ref5$useSTD3ASCIIRul === void 0 ? false : _ref5$useSTD3ASCIIRul,\n    _ref5$processingOptio = _ref5.processingOption,\n    processingOption = _ref5$processingOptio === void 0 ? \"nontransitional\" : _ref5$processingOptio;\n  var result = processing(domainName, {\n    processingOption: processingOption,\n    checkHyphens: checkHyphens,\n    checkBidi: checkBidi,\n    checkJoiners: checkJoiners,\n    useSTD3ASCIIRules: useSTD3ASCIIRules\n  });\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\nmodule.exports = {\n  toASCII: toASCII,\n  toUnicode: toUnicode\n};","map":{"version":3,"names":["_objectSpread","require","default","_slicedToArray","_createForOfIteratorHelper","_toConsumableArray","punycode","regexes","mappingTable","_require","STATUS_MAPPING","containsNonASCII","str","test","findStatus","val","_ref","useSTD3ASCIIRules","start","end","length","mid","Math","floor","target","min","Array","isArray","max","disallowed_STD3_valid","disallowed_STD3_mapped","disallowed","concat","slice","valid","mapped","mapChars","domainName","_ref2","processingOption","hasError","processed","_iterator","_step","s","n","done","ch","value","_findStatus","codePointAt","_findStatus2","status","mapping","ignored","deviation","err","e","f","string","error","validateLabel","label","_ref3","checkHyphens","checkBidi","checkJoiners","normalize","codePoints","from","startsWith","endsWith","includes","combiningMarks","_i","_codePoints","_findStatus3","_findStatus4","last","_iterator2","entries","_step2","_step2$value","i","combiningClassVirama","next","indexOf","validZWNJ","join","rtl","bidiS1LTR","bidiS1RTL","bidiS2","bidiS3","bidiS4EN","bidiS4AN","bidiS5","bidiS6","isBidiDomain","labels","domain","map","decode","substring","bidiDomain","processing","options","_mapChars","split","isBidi","_iterator3","_step3","_step3$value","origLabel","curProcessing","validation","toASCII","_ref4","arguments","undefined","_ref4$checkHyphens","_ref4$checkBidi","_ref4$checkJoiners","_ref4$useSTD3ASCIIRul","_ref4$processingOptio","_ref4$verifyDNSLength","verifyDNSLength","RangeError","result","l","encode","total","toUnicode","_ref5","_ref5$checkHyphens","_ref5$checkBidi","_ref5$checkJoiners","_ref5$useSTD3ASCIIRul","_ref5$processingOptio","module","exports"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb-connection-string-url/node_modules/tr46/index.js"],"sourcesContent":["\"use strict\";\n\nconst punycode = require(\"punycode\");\nconst regexes = require(\"./lib/regexes.js\");\nconst mappingTable = require(\"./lib/mappingTable.json\");\nconst { STATUS_MAPPING } = require(\"./lib/statusMapping.js\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/u.test(str);\n}\n\nfunction findStatus(val, { useSTD3ASCIIRules }) {\n  let start = 0;\n  let end = mappingTable.length - 1;\n\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n\n    const target = mappingTable[mid];\n    const min = Array.isArray(target[0]) ? target[0][0] : target[0];\n    const max = Array.isArray(target[0]) ? target[0][1] : target[0];\n\n    if (min <= val && max >= val) {\n      if (useSTD3ASCIIRules &&\n          (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {\n        return [STATUS_MAPPING.disallowed, ...target.slice(2)];\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {\n        return [STATUS_MAPPING.valid, ...target.slice(2)];\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {\n        return [STATUS_MAPPING.mapped, ...target.slice(2)];\n      }\n\n      return target.slice(1);\n    } else if (min > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, { useSTD3ASCIIRules, processingOption }) {\n  let hasError = false;\n  let processed = \"\";\n\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n\n    switch (status) {\n      case STATUS_MAPPING.disallowed:\n        hasError = true;\n        processed += ch;\n        break;\n      case STATUS_MAPPING.ignored:\n        break;\n      case STATUS_MAPPING.mapped:\n        processed += mapping;\n        break;\n      case STATUS_MAPPING.deviation:\n        if (processingOption === \"transitional\") {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n        break;\n      case STATUS_MAPPING.valid:\n        processed += ch;\n        break;\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nfunction validateLabel(label, { checkHyphens, checkBidi, checkJoiners, processingOption, useSTD3ASCIIRules }) {\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  const codePoints = Array.from(label);\n\n  if (checkHyphens) {\n    if ((codePoints[2] === \"-\" && codePoints[3] === \"-\") ||\n        (label.startsWith(\"-\") || label.endsWith(\"-\"))) {\n      return false;\n    }\n  }\n\n  if (label.includes(\".\") ||\n      (codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0]))) {\n    return false;\n  }\n\n  for (const ch of codePoints) {\n    const [status] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n    if ((processingOption === \"transitional\" && status !== STATUS_MAPPING.valid) ||\n        (processingOption === \"nontransitional\" &&\n         status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation)) {\n      return false;\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    let last = 0;\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n        return false;\n      }\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi) {\n    let rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) ||\n          !regexes.bidiS3.test(label) ||\n          (regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label))) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) ||\n               !regexes.bidiS6.test(label)) { // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  const { processingOption } = options;\n\n  // 1. Map.\n  let { string, error } = mapChars(domainName, options);\n\n  // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let curProcessing = processingOption;\n    if (label.startsWith(\"xn--\")) {\n      try {\n        label = punycode.decode(label.substring(4));\n        labels[i] = label;\n      } catch (err) {\n        error = true;\n        continue;\n      }\n      curProcessing = \"nontransitional\";\n    }\n\n    // No need to validate if we already know there is an error.\n    if (error) {\n      continue;\n    }\n    const validation = validateLabel(label, {\n      ...options,\n      processingOption: curProcessing,\n      checkBidi: options.checkBidi && isBidi\n    });\n    if (!validation) {\n      error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\n\nfunction toASCII(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  processingOption = \"nontransitional\",\n  verifyDNSLength = false\n} = {}) {\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return `xn--${punycode.encode(l)}`;\n      } catch (e) {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  processingOption = \"nontransitional\"\n} = {}) {\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII,\n  toUnicode\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}