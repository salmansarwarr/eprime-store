{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AzureTokenCache = exports.AzureTokenEntry = void 0;\nvar cache_1 = require(\"./cache\");\n/** @internal */\nvar AzureTokenEntry = /*#__PURE__*/function (_cache_1$ExpiringCach) {\n  _inherits(AzureTokenEntry, _cache_1$ExpiringCach);\n  var _super = _createSuper(AzureTokenEntry);\n  /**\n   * Instantiate the entry.\n   */\n  function AzureTokenEntry(token, expiration) {\n    var _this;\n    _classCallCheck(this, AzureTokenEntry);\n    _this = _super.call(this, expiration);\n    _this.token = token;\n    return _this;\n  }\n  return _createClass(AzureTokenEntry);\n}(cache_1.ExpiringCacheEntry);\nexports.AzureTokenEntry = AzureTokenEntry;\n/**\n * A cache of access tokens from Azure.\n * @internal\n */\nvar AzureTokenCache = /*#__PURE__*/function (_cache_1$Cache) {\n  _inherits(AzureTokenCache, _cache_1$Cache);\n  var _super2 = _createSuper(AzureTokenCache);\n  function AzureTokenCache() {\n    _classCallCheck(this, AzureTokenCache);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(AzureTokenCache, [{\n    key: \"addEntry\",\n    value:\n    /**\n     * Add an entry to the cache.\n     */\n    function addEntry(tokenAudience, token) {\n      var entry = new AzureTokenEntry(token.access_token, token.expires_in);\n      this.entries.set(tokenAudience, entry);\n      return entry;\n    }\n    /**\n     * Create a cache key.\n     */\n  }, {\n    key: \"cacheKey\",\n    value: function cacheKey(tokenAudience) {\n      return tokenAudience;\n    }\n    /**\n     * Delete an entry from the cache.\n     */\n  }, {\n    key: \"deleteEntry\",\n    value: function deleteEntry(tokenAudience) {\n      this.entries.delete(tokenAudience);\n    }\n    /**\n     * Get an Azure token entry from the cache.\n     */\n  }, {\n    key: \"getEntry\",\n    value: function getEntry(tokenAudience) {\n      return this.entries.get(tokenAudience);\n    }\n  }]);\n  return AzureTokenCache;\n}(cache_1.Cache);\nexports.AzureTokenCache = AzureTokenCache;","map":{"version":3,"names":["cache_1","require","AzureTokenEntry","_cache_1$ExpiringCach","_inherits","_super","_createSuper","token","expiration","_this","_classCallCheck","call","_createClass","ExpiringCacheEntry","exports","AzureTokenCache","_cache_1$Cache","_super2","apply","arguments","key","value","addEntry","tokenAudience","entry","access_token","expires_in","entries","set","cacheKey","deleteEntry","delete","getEntry","get","Cache"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/cmap/auth/mongodb_oidc/azure_token_cache.ts"],"sourcesContent":["import type { AzureAccessToken } from './azure_service_workflow';\nimport { Cache, ExpiringCacheEntry } from './cache';\n\n/** @internal */\nexport class AzureTokenEntry extends ExpiringCacheEntry {\n  token: string;\n\n  /**\n   * Instantiate the entry.\n   */\n  constructor(token: string, expiration: number) {\n    super(expiration);\n    this.token = token;\n  }\n}\n\n/**\n * A cache of access tokens from Azure.\n * @internal\n */\nexport class AzureTokenCache extends Cache<AzureTokenEntry> {\n  /**\n   * Add an entry to the cache.\n   */\n  addEntry(tokenAudience: string, token: AzureAccessToken): AzureTokenEntry {\n    const entry = new AzureTokenEntry(token.access_token, token.expires_in);\n    this.entries.set(tokenAudience, entry);\n    return entry;\n  }\n\n  /**\n   * Create a cache key.\n   */\n  cacheKey(tokenAudience: string): string {\n    return tokenAudience;\n  }\n\n  /**\n   * Delete an entry from the cache.\n   */\n  deleteEntry(tokenAudience: string): void {\n    this.entries.delete(tokenAudience);\n  }\n\n  /**\n   * Get an Azure token entry from the cache.\n   */\n  getEntry(tokenAudience: string): AzureTokenEntry | undefined {\n    return this.entries.get(tokenAudience);\n  }\n}\n"],"mappings":";;;;;;;;;;AACA,IAAAA,OAAA,GAAAC,OAAA;AAEA;AAAA,IACaC,eAAgB,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,eAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,eAAA;EAG3B;;;EAGA,SAAAA,gBAAYK,KAAa,EAAEC,UAAkB;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAR,eAAA;IAC3CO,KAAA,GAAAJ,MAAA,CAAAM,IAAA,OAAMH,UAAU;IAChBC,KAAA,CAAKF,KAAK,GAAGA,KAAK;IAAC,OAAAE,KAAA;EACrB;EAAC,OAAAG,YAAA,CAAAV,eAAA;AAAA,EATkCF,OAAA,CAAAa,kBAAkB;AAAvDC,OAAA,CAAAZ,eAAA,GAAAA,eAAA;AAYA;;;;AAAA,IAIaa,eAAgB,0BAAAC,cAAA;EAAAZ,SAAA,CAAAW,eAAA,EAAAC,cAAA;EAAA,IAAAC,OAAA,GAAAX,YAAA,CAAAS,eAAA;EAAA,SAAAA,gBAAA;IAAAL,eAAA,OAAAK,eAAA;IAAA,OAAAE,OAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAAP,YAAA,CAAAG,eAAA;IAAAK,GAAA;IAAAC,KAAA;IAC3B;;;IAGA,SAAAC,SAASC,aAAqB,EAAEhB,KAAuB;MACrD,IAAMiB,KAAK,GAAG,IAAItB,eAAe,CAACK,KAAK,CAACkB,YAAY,EAAElB,KAAK,CAACmB,UAAU,CAAC;MACvE,IAAI,CAACC,OAAO,CAACC,GAAG,CAACL,aAAa,EAAEC,KAAK,CAAC;MACtC,OAAOA,KAAK;IACd;IAEA;;;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EAGA,SAAAQ,SAASN,aAAqB;MAC5B,OAAOA,aAAa;IACtB;IAEA;;;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAGA,SAAAS,YAAYP,aAAqB;MAC/B,IAAI,CAACI,OAAO,CAACI,MAAM,CAACR,aAAa,CAAC;IACpC;IAEA;;;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAGA,SAAAW,SAAST,aAAqB;MAC5B,OAAO,IAAI,CAACI,OAAO,CAACM,GAAG,CAACV,aAAa,CAAC;IACxC;EAAC;EAAA,OAAAR,eAAA;AAAA,EA7BkCf,OAAA,CAAAkC,KAAsB;AAA3DpB,OAAA,CAAAC,eAAA,GAAAA,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}