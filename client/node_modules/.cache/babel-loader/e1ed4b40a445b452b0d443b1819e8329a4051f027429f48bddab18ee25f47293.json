{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DbStatsOperation = exports.CollStatsOperation = void 0;\nvar command_1 = require(\"./command\");\nvar operation_1 = require(\"./operation\");\n/**\n * Get all the collection statistics.\n * @internal\n */\nvar CollStatsOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(CollStatsOperation, _command_1$CommandOpe);\n  var _super = _createSuper(CollStatsOperation);\n  /**\n   * Construct a Stats operation.\n   *\n   * @param collection - Collection instance\n   * @param options - Optional settings. See Collection.prototype.stats for a list of options.\n   */\n  function CollStatsOperation(collection, options) {\n    var _this;\n    _classCallCheck(this, CollStatsOperation);\n    _this = _super.call(this, collection, options);\n    _this.options = options !== null && options !== void 0 ? options : {};\n    _this.collectionName = collection.collectionName;\n    return _this;\n  }\n  _createClass(CollStatsOperation, [{\n    key: \"executeCallback\",\n    value: function executeCallback(server, session, callback) {\n      var command = {\n        collStats: this.collectionName\n      };\n      if (this.options.scale != null) {\n        command.scale = this.options.scale;\n      }\n      _get(_getPrototypeOf(CollStatsOperation.prototype), \"executeCommand\", this).call(this, server, session, command, callback);\n    }\n  }]);\n  return CollStatsOperation;\n}(command_1.CommandOperation);\nexports.CollStatsOperation = CollStatsOperation;\n/** @internal */\nvar DbStatsOperation = /*#__PURE__*/function (_command_1$CommandOpe2) {\n  _inherits(DbStatsOperation, _command_1$CommandOpe2);\n  var _super2 = _createSuper(DbStatsOperation);\n  function DbStatsOperation(db, options) {\n    var _this2;\n    _classCallCheck(this, DbStatsOperation);\n    _this2 = _super2.call(this, db, options);\n    _this2.options = options;\n    return _this2;\n  }\n  _createClass(DbStatsOperation, [{\n    key: \"executeCallback\",\n    value: function executeCallback(server, session, callback) {\n      var command = {\n        dbStats: true\n      };\n      if (this.options.scale != null) {\n        command.scale = this.options.scale;\n      }\n      _get(_getPrototypeOf(DbStatsOperation.prototype), \"executeCommand\", this).call(this, server, session, command, callback);\n    }\n  }]);\n  return DbStatsOperation;\n}(command_1.CommandOperation);\nexports.DbStatsOperation = DbStatsOperation;\n(0, operation_1.defineAspects)(CollStatsOperation, [operation_1.Aspect.READ_OPERATION]);\n(0, operation_1.defineAspects)(DbStatsOperation, [operation_1.Aspect.READ_OPERATION]);","map":{"version":3,"names":["command_1","require","operation_1","CollStatsOperation","_command_1$CommandOpe","_inherits","_super","_createSuper","collection","options","_this","_classCallCheck","call","collectionName","_createClass","key","value","executeCallback","server","session","callback","command","collStats","scale","_get","_getPrototypeOf","prototype","CommandOperation","exports","DbStatsOperation","_command_1$CommandOpe2","_super2","db","_this2","dbStats","defineAspects","Aspect","READ_OPERATION"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/operations/stats.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Db } from '../db';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/**\n * @public\n * @deprecated the `collStats` operation will be removed in the next major release.  Please\n * use an aggregation pipeline with the [`$collStats`](https://www.mongodb.com/docs/manual/reference/operator/aggregation/collStats/) stage instead\n */\nexport interface CollStatsOptions extends CommandOperationOptions {\n  /** Divide the returned sizes by scale value. */\n  scale?: number;\n}\n\n/**\n * Get all the collection statistics.\n * @internal\n */\nexport class CollStatsOperation extends CommandOperation<Document> {\n  override options: CollStatsOptions;\n  collectionName: string;\n\n  /**\n   * Construct a Stats operation.\n   *\n   * @param collection - Collection instance\n   * @param options - Optional settings. See Collection.prototype.stats for a list of options.\n   */\n  constructor(collection: Collection, options?: CollStatsOptions) {\n    super(collection, options);\n    this.options = options ?? {};\n    this.collectionName = collection.collectionName;\n  }\n\n  override executeCallback(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<CollStats>\n  ): void {\n    const command: Document = { collStats: this.collectionName };\n    if (this.options.scale != null) {\n      command.scale = this.options.scale;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\n/** @public */\nexport interface DbStatsOptions extends CommandOperationOptions {\n  /** Divide the returned sizes by scale value. */\n  scale?: number;\n}\n\n/** @internal */\nexport class DbStatsOperation extends CommandOperation<Document> {\n  override options: DbStatsOptions;\n\n  constructor(db: Db, options: DbStatsOptions) {\n    super(db, options);\n    this.options = options;\n  }\n\n  override executeCallback(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const command: Document = { dbStats: true };\n    if (this.options.scale != null) {\n      command.scale = this.options.scale;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\n/**\n * @deprecated the `collStats` operation will be removed in the next major release.  Please\n * use an aggregation pipeline with the [`$collStats`](https://www.mongodb.com/docs/manual/reference/operator/aggregation/collStats/) stage instead\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/command/collStats/\n */\nexport interface CollStats extends Document {\n  /** Namespace */\n  ns: string;\n  /** Number of documents */\n  count: number;\n  /** Collection size in bytes */\n  size: number;\n  /** Average object size in bytes */\n  avgObjSize: number;\n  /** (Pre)allocated space for the collection in bytes */\n  storageSize: number;\n  /** Number of extents (contiguously allocated chunks of datafile space) */\n  numExtents: number;\n  /** Number of indexes */\n  nindexes: number;\n  /** Size of the most recently created extent in bytes */\n  lastExtentSize: number;\n  /** Padding can speed up updates if documents grow */\n  paddingFactor: number;\n  /** A number that indicates the user-set flags on the collection. userFlags only appears when using the mmapv1 storage engine */\n  userFlags?: number;\n  /** Total index size in bytes */\n  totalIndexSize: number;\n  /** Size of specific indexes in bytes */\n  indexSizes: {\n    _id_: number;\n    [index: string]: number;\n  };\n  /** `true` if the collection is capped */\n  capped: boolean;\n  /** The maximum number of documents that may be present in a capped collection */\n  max: number;\n  /** The maximum size of a capped collection */\n  maxSize: number;\n  /** This document contains data reported directly by the WiredTiger engine and other data for internal diagnostic use */\n  wiredTiger?: WiredTigerData;\n  /** The fields in this document are the names of the indexes, while the values themselves are documents that contain statistics for the index provided by the storage engine */\n  indexDetails?: any;\n  ok: number;\n\n  /** The amount of storage available for reuse. The scale argument affects this value. */\n  freeStorageSize?: number;\n  /** An array that contains the names of the indexes that are currently being built on the collection */\n  indexBuilds?: number;\n  /** The sum of the storageSize and totalIndexSize. The scale argument affects this value */\n  totalSize: number;\n  /** The scale value used by the command. */\n  scaleFactor: number;\n}\n\n/**\n * @public\n * @deprecated This type is only used for the deprecated `collStats` operation and will be removed in the next major release.\n */\nexport interface WiredTigerData extends Document {\n  LSM: {\n    'bloom filter false positives': number;\n    'bloom filter hits': number;\n    'bloom filter misses': number;\n    'bloom filter pages evicted from cache': number;\n    'bloom filter pages read into cache': number;\n    'bloom filters in the LSM tree': number;\n    'chunks in the LSM tree': number;\n    'highest merge generation in the LSM tree': number;\n    'queries that could have benefited from a Bloom filter that did not exist': number;\n    'sleep for LSM checkpoint throttle': number;\n    'sleep for LSM merge throttle': number;\n    'total size of bloom filters': number;\n  } & Document;\n  'block-manager': {\n    'allocations requiring file extension': number;\n    'blocks allocated': number;\n    'blocks freed': number;\n    'checkpoint size': number;\n    'file allocation unit size': number;\n    'file bytes available for reuse': number;\n    'file magic number': number;\n    'file major version number': number;\n    'file size in bytes': number;\n    'minor version number': number;\n  };\n  btree: {\n    'btree checkpoint generation': number;\n    'column-store fixed-size leaf pages': number;\n    'column-store internal pages': number;\n    'column-store variable-size RLE encoded values': number;\n    'column-store variable-size deleted values': number;\n    'column-store variable-size leaf pages': number;\n    'fixed-record size': number;\n    'maximum internal page key size': number;\n    'maximum internal page size': number;\n    'maximum leaf page key size': number;\n    'maximum leaf page size': number;\n    'maximum leaf page value size': number;\n    'maximum tree depth': number;\n    'number of key/value pairs': number;\n    'overflow pages': number;\n    'pages rewritten by compaction': number;\n    'row-store internal pages': number;\n    'row-store leaf pages': number;\n  } & Document;\n  cache: {\n    'bytes currently in the cache': number;\n    'bytes read into cache': number;\n    'bytes written from cache': number;\n    'checkpoint blocked page eviction': number;\n    'data source pages selected for eviction unable to be evicted': number;\n    'hazard pointer blocked page eviction': number;\n    'in-memory page passed criteria to be split': number;\n    'in-memory page splits': number;\n    'internal pages evicted': number;\n    'internal pages split during eviction': number;\n    'leaf pages split during eviction': number;\n    'modified pages evicted': number;\n    'overflow pages read into cache': number;\n    'overflow values cached in memory': number;\n    'page split during eviction deepened the tree': number;\n    'page written requiring lookaside records': number;\n    'pages read into cache': number;\n    'pages read into cache requiring lookaside entries': number;\n    'pages requested from the cache': number;\n    'pages written from cache': number;\n    'pages written requiring in-memory restoration': number;\n    'tracked dirty bytes in the cache': number;\n    'unmodified pages evicted': number;\n  } & Document;\n  cache_walk: {\n    'Average difference between current eviction generation when the page was last considered': number;\n    'Average on-disk page image size seen': number;\n    'Clean pages currently in cache': number;\n    'Current eviction generation': number;\n    'Dirty pages currently in cache': number;\n    'Entries in the root page': number;\n    'Internal pages currently in cache': number;\n    'Leaf pages currently in cache': number;\n    'Maximum difference between current eviction generation when the page was last considered': number;\n    'Maximum page size seen': number;\n    'Minimum on-disk page image size seen': number;\n    'On-disk page image sizes smaller than a single allocation unit': number;\n    'Pages created in memory and never written': number;\n    'Pages currently queued for eviction': number;\n    'Pages that could not be queued for eviction': number;\n    'Refs skipped during cache traversal': number;\n    'Size of the root page': number;\n    'Total number of pages currently in cache': number;\n  } & Document;\n  compression: {\n    'compressed pages read': number;\n    'compressed pages written': number;\n    'page written failed to compress': number;\n    'page written was too small to compress': number;\n    'raw compression call failed, additional data available': number;\n    'raw compression call failed, no additional data available': number;\n    'raw compression call succeeded': number;\n  } & Document;\n  cursor: {\n    'bulk-loaded cursor-insert calls': number;\n    'create calls': number;\n    'cursor-insert key and value bytes inserted': number;\n    'cursor-remove key bytes removed': number;\n    'cursor-update value bytes updated': number;\n    'insert calls': number;\n    'next calls': number;\n    'prev calls': number;\n    'remove calls': number;\n    'reset calls': number;\n    'restarted searches': number;\n    'search calls': number;\n    'search near calls': number;\n    'truncate calls': number;\n    'update calls': number;\n  };\n  reconciliation: {\n    'dictionary matches': number;\n    'fast-path pages deleted': number;\n    'internal page key bytes discarded using suffix compression': number;\n    'internal page multi-block writes': number;\n    'internal-page overflow keys': number;\n    'leaf page key bytes discarded using prefix compression': number;\n    'leaf page multi-block writes': number;\n    'leaf-page overflow keys': number;\n    'maximum blocks required for a page': number;\n    'overflow values written': number;\n    'page checksum matches': number;\n    'page reconciliation calls': number;\n    'page reconciliation calls for eviction': number;\n    'pages deleted': number;\n  } & Document;\n}\n\ndefineAspects(CollStatsOperation, [Aspect.READ_OPERATION]);\ndefineAspects(DbStatsOperation, [Aspect.READ_OPERATION]);\n"],"mappings":";;;;;;;;;;;;AAMA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AAYA;;;;AAAA,IAIaE,kBAAmB,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,kBAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,kBAAA;EAI9B;;;;;;EAMA,SAAAA,mBAAYK,UAAsB,EAAEC,OAA0B;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAR,kBAAA;IAC5DO,KAAA,GAAAJ,MAAA,CAAAM,IAAA,OAAMJ,UAAU,EAAEC,OAAO;IACzBC,KAAA,CAAKD,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;IAC5BC,KAAA,CAAKG,cAAc,GAAGL,UAAU,CAACK,cAAc;IAAC,OAAAH,KAAA;EAClD;EAACI,YAAA,CAAAX,kBAAA;IAAAY,GAAA;IAAAC,KAAA,EAEQ,SAAAC,gBACPC,MAAc,EACdC,OAAkC,EAClCC,QAA6B;MAE7B,IAAMC,OAAO,GAAa;QAAEC,SAAS,EAAE,IAAI,CAACT;MAAc,CAAE;MAC5D,IAAI,IAAI,CAACJ,OAAO,CAACc,KAAK,IAAI,IAAI,EAAE;QAC9BF,OAAO,CAACE,KAAK,GAAG,IAAI,CAACd,OAAO,CAACc,KAAK;;MAGpCC,IAAA,CAAAC,eAAA,CAAAtB,kBAAA,CAAAuB,SAAA,2BAAAd,IAAA,OAAqBM,MAAM,EAAEC,OAAO,EAAEE,OAAO,EAAED,QAAQ;IACzD;EAAC;EAAA,OAAAjB,kBAAA;AAAA,EA3BqCH,SAAA,CAAA2B,gBAA0B;AAAlEC,OAAA,CAAAzB,kBAAA,GAAAA,kBAAA;AAoCA;AAAA,IACa0B,gBAAiB,0BAAAC,sBAAA;EAAAzB,SAAA,CAAAwB,gBAAA,EAAAC,sBAAA;EAAA,IAAAC,OAAA,GAAAxB,YAAA,CAAAsB,gBAAA;EAG5B,SAAAA,iBAAYG,EAAM,EAAEvB,OAAuB;IAAA,IAAAwB,MAAA;IAAAtB,eAAA,OAAAkB,gBAAA;IACzCI,MAAA,GAAAF,OAAA,CAAAnB,IAAA,OAAMoB,EAAE,EAAEvB,OAAO;IACjBwB,MAAA,CAAKxB,OAAO,GAAGA,OAAO;IAAC,OAAAwB,MAAA;EACzB;EAACnB,YAAA,CAAAe,gBAAA;IAAAd,GAAA;IAAAC,KAAA,EAEQ,SAAAC,gBACPC,MAAc,EACdC,OAAkC,EAClCC,QAA4B;MAE5B,IAAMC,OAAO,GAAa;QAAEa,OAAO,EAAE;MAAI,CAAE;MAC3C,IAAI,IAAI,CAACzB,OAAO,CAACc,KAAK,IAAI,IAAI,EAAE;QAC9BF,OAAO,CAACE,KAAK,GAAG,IAAI,CAACd,OAAO,CAACc,KAAK;;MAGpCC,IAAA,CAAAC,eAAA,CAAAI,gBAAA,CAAAH,SAAA,2BAAAd,IAAA,OAAqBM,MAAM,EAAEC,OAAO,EAAEE,OAAO,EAAED,QAAQ;IACzD;EAAC;EAAA,OAAAS,gBAAA;AAAA,EAnBmC7B,SAAA,CAAA2B,gBAA0B;AAAhEC,OAAA,CAAAC,gBAAA,GAAAA,gBAAA;AA0NA,IAAA3B,WAAA,CAAAiC,aAAa,EAAChC,kBAAkB,EAAE,CAACD,WAAA,CAAAkC,MAAM,CAACC,cAAc,CAAC,CAAC;AAC1D,IAAAnC,WAAA,CAAAiC,aAAa,EAACN,gBAAgB,EAAE,CAAC3B,WAAA,CAAAkC,MAAM,CAACC,cAAc,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}