{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GetMoreOperation = void 0;\nvar error_1 = require(\"../error\");\nvar utils_1 = require(\"../utils\");\nvar operation_1 = require(\"./operation\");\n/** @internal */\nvar GetMoreOperation = /*#__PURE__*/function (_operation_1$Abstract) {\n  _inherits(GetMoreOperation, _operation_1$Abstract);\n  var _super = _createSuper(GetMoreOperation);\n  function GetMoreOperation(ns, cursorId, server, options) {\n    var _this;\n    _classCallCheck(this, GetMoreOperation);\n    _this = _super.call(this, options);\n    _this.options = options;\n    _this.ns = ns;\n    _this.cursorId = cursorId;\n    _this.server = server;\n    return _this;\n  }\n  /**\n   * Although there is a server already associated with the get more operation, the signature\n   * for execute passes a server so we will just use that one.\n   */\n  _createClass(GetMoreOperation, [{\n    key: \"executeCallback\",\n    value: function executeCallback(server, session, callback) {\n      if (server !== this.server) {\n        return callback(new error_1.MongoRuntimeError('Getmore must run on the same server operation began on'));\n      }\n      if (this.cursorId == null || this.cursorId.isZero()) {\n        return callback(new error_1.MongoRuntimeError('Unable to iterate cursor with no id'));\n      }\n      var collection = this.ns.collection;\n      if (collection == null) {\n        // Cursors should have adopted the namespace returned by MongoDB\n        // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n        return callback(new error_1.MongoRuntimeError('A collection name must be determined before getMore'));\n      }\n      var getMoreCmd = {\n        getMore: this.cursorId,\n        collection: collection\n      };\n      if (typeof this.options.batchSize === 'number') {\n        getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n      }\n      if (typeof this.options.maxAwaitTimeMS === 'number') {\n        getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n      }\n      // we check for undefined specifically here to allow falsy values\n      // eslint-disable-next-line no-restricted-syntax\n      if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {\n        getMoreCmd.comment = this.options.comment;\n      }\n      var commandOptions = _objectSpread({\n        returnFieldSelector: null,\n        documentsReturnedIn: 'nextBatch'\n      }, this.options);\n      server.command(this.ns, getMoreCmd, commandOptions, callback);\n    }\n  }]);\n  return GetMoreOperation;\n}(operation_1.AbstractCallbackOperation);\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.MUST_SELECT_SAME_SERVER]);","map":{"version":3,"names":["error_1","require","utils_1","operation_1","GetMoreOperation","_operation_1$Abstract","_inherits","_super","_createSuper","ns","cursorId","server","options","_this","_classCallCheck","call","_createClass","key","value","executeCallback","session","callback","MongoRuntimeError","isZero","collection","getMoreCmd","getMore","batchSize","Math","abs","maxAwaitTimeMS","maxTimeMS","comment","undefined","maxWireVersion","commandOptions","_objectSpread","returnFieldSelector","documentsReturnedIn","command","AbstractCallbackOperation","exports","defineAspects","Aspect","READ_OPERATION","MUST_SELECT_SAME_SERVER"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/operations/get_more.ts"],"sourcesContent":["import type { Document, Long } from '../bson';\nimport { MongoRuntimeError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { type Callback, maxWireVersion, type MongoDBNamespace } from '../utils';\nimport {\n  AbstractCallbackOperation,\n  Aspect,\n  defineAspects,\n  type OperationOptions\n} from './operation';\n\n/** @internal */\nexport interface GetMoreOptions extends OperationOptions {\n  /** Set the batchSize for the getMoreCommand when iterating over the query results. */\n  batchSize?: number;\n  /**\n   * Comment to apply to the operation.\n   *\n   * getMore only supports 'comment' in server versions 4.4 and above.\n   */\n  comment?: unknown;\n  /** Number of milliseconds to wait before aborting the query. */\n  maxTimeMS?: number;\n  /** TODO(NODE-4413): Address bug with maxAwaitTimeMS not being passed in from the cursor correctly */\n  maxAwaitTimeMS?: number;\n}\n\n/**\n * GetMore command: https://www.mongodb.com/docs/manual/reference/command/getMore/\n * @internal\n */\nexport interface GetMoreCommand {\n  getMore: Long;\n  collection: string;\n  batchSize?: number;\n  maxTimeMS?: number;\n  /** Only supported on wire versions 10 or greater */\n  comment?: unknown;\n}\n\n/** @internal */\nexport class GetMoreOperation extends AbstractCallbackOperation {\n  cursorId: Long;\n  override options: GetMoreOptions;\n\n  constructor(ns: MongoDBNamespace, cursorId: Long, server: Server, options: GetMoreOptions) {\n    super(options);\n\n    this.options = options;\n    this.ns = ns;\n    this.cursorId = cursorId;\n    this.server = server;\n  }\n\n  /**\n   * Although there is a server already associated with the get more operation, the signature\n   * for execute passes a server so we will just use that one.\n   */\n  override executeCallback(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    if (server !== this.server) {\n      return callback(\n        new MongoRuntimeError('Getmore must run on the same server operation began on')\n      );\n    }\n\n    if (this.cursorId == null || this.cursorId.isZero()) {\n      return callback(new MongoRuntimeError('Unable to iterate cursor with no id'));\n    }\n\n    const collection = this.ns.collection;\n    if (collection == null) {\n      // Cursors should have adopted the namespace returned by MongoDB\n      // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n      return callback(new MongoRuntimeError('A collection name must be determined before getMore'));\n    }\n\n    const getMoreCmd: GetMoreCommand = {\n      getMore: this.cursorId,\n      collection\n    };\n\n    if (typeof this.options.batchSize === 'number') {\n      getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n    }\n\n    if (typeof this.options.maxAwaitTimeMS === 'number') {\n      getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (this.options.comment !== undefined && maxWireVersion(server) >= 9) {\n      getMoreCmd.comment = this.options.comment;\n    }\n\n    const commandOptions = {\n      returnFieldSelector: null,\n      documentsReturnedIn: 'nextBatch',\n      ...this.options\n    };\n\n    server.command(this.ns, getMoreCmd, commandOptions, callback);\n  }\n}\n\ndefineAspects(GetMoreOperation, [Aspect.READ_OPERATION, Aspect.MUST_SELECT_SAME_SERVER]);\n"],"mappings":";;;;;;;;;;;AACA,IAAAA,OAAA,GAAAC,OAAA;AAGA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,WAAA,GAAAF,OAAA;AAoCA;AAAA,IACaG,gBAAiB,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,gBAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,gBAAA;EAI5B,SAAAA,iBAAYK,EAAoB,EAAEC,QAAc,EAAEC,MAAc,EAAEC,OAAuB;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAV,gBAAA;IACvFS,KAAA,GAAAN,MAAA,CAAAQ,IAAA,OAAMH,OAAO;IAEbC,KAAA,CAAKD,OAAO,GAAGA,OAAO;IACtBC,KAAA,CAAKJ,EAAE,GAAGA,EAAE;IACZI,KAAA,CAAKH,QAAQ,GAAGA,QAAQ;IACxBG,KAAA,CAAKF,MAAM,GAAGA,MAAM;IAAC,OAAAE,KAAA;EACvB;EAEA;;;;EAAAG,YAAA,CAAAZ,gBAAA;IAAAa,GAAA;IAAAC,KAAA,EAIS,SAAAC,gBACPR,MAAc,EACdS,OAAkC,EAClCC,QAA4B;MAE5B,IAAIV,MAAM,KAAK,IAAI,CAACA,MAAM,EAAE;QAC1B,OAAOU,QAAQ,CACb,IAAIrB,OAAA,CAAAsB,iBAAiB,CAAC,wDAAwD,CAAC,CAChF;;MAGH,IAAI,IAAI,CAACZ,QAAQ,IAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,CAACa,MAAM,EAAE,EAAE;QACnD,OAAOF,QAAQ,CAAC,IAAIrB,OAAA,CAAAsB,iBAAiB,CAAC,qCAAqC,CAAC,CAAC;;MAG/E,IAAME,UAAU,GAAG,IAAI,CAACf,EAAE,CAACe,UAAU;MACrC,IAAIA,UAAU,IAAI,IAAI,EAAE;QACtB;QACA;QACA,OAAOH,QAAQ,CAAC,IAAIrB,OAAA,CAAAsB,iBAAiB,CAAC,qDAAqD,CAAC,CAAC;;MAG/F,IAAMG,UAAU,GAAmB;QACjCC,OAAO,EAAE,IAAI,CAAChB,QAAQ;QACtBc,UAAU,EAAVA;OACD;MAED,IAAI,OAAO,IAAI,CAACZ,OAAO,CAACe,SAAS,KAAK,QAAQ,EAAE;QAC9CF,UAAU,CAACE,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACjB,OAAO,CAACe,SAAS,CAAC;;MAGzD,IAAI,OAAO,IAAI,CAACf,OAAO,CAACkB,cAAc,KAAK,QAAQ,EAAE;QACnDL,UAAU,CAACM,SAAS,GAAG,IAAI,CAACnB,OAAO,CAACkB,cAAc;;MAGpD;MACA;MACA,IAAI,IAAI,CAAClB,OAAO,CAACoB,OAAO,KAAKC,SAAS,IAAI,IAAA/B,OAAA,CAAAgC,cAAc,EAACvB,MAAM,CAAC,IAAI,CAAC,EAAE;QACrEc,UAAU,CAACO,OAAO,GAAG,IAAI,CAACpB,OAAO,CAACoB,OAAO;;MAG3C,IAAMG,cAAc,GAAAC,aAAA;QAClBC,mBAAmB,EAAE,IAAI;QACzBC,mBAAmB,EAAE;MAAW,GAC7B,IAAI,CAAC1B,OAAO,CAChB;MAEDD,MAAM,CAAC4B,OAAO,CAAC,IAAI,CAAC9B,EAAE,EAAEgB,UAAU,EAAEU,cAAc,EAAEd,QAAQ,CAAC;IAC/D;EAAC;EAAA,OAAAjB,gBAAA;AAAA,EAjEmCD,WAAA,CAAAqC,yBAAyB;AAA/DC,OAAA,CAAArC,gBAAA,GAAAA,gBAAA;AAoEA,IAAAD,WAAA,CAAAuC,aAAa,EAACtC,gBAAgB,EAAE,CAACD,WAAA,CAAAwC,MAAM,CAACC,cAAc,EAAEzC,WAAA,CAAAwC,MAAM,CAACE,uBAAuB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}