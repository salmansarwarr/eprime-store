{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/no-var-requires */\nvar _regeneratorRuntime = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _createForOfIteratorHelper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _toConsumableArray = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encrypter = void 0;\nvar constants_1 = require(\"./constants\");\nvar error_1 = require(\"./error\");\nvar mongo_client_1 = require(\"./mongo_client\");\nvar utils_1 = require(\"./utils\");\nvar AutoEncrypterClass;\n/** @internal */\nvar kInternalClient = Symbol('internalClient');\n/** @internal */\nvar Encrypter = /*#__PURE__*/function () {\n  function Encrypter(client, uri, options) {\n    _classCallCheck(this, Encrypter);\n    if (typeof options.autoEncryption !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    }\n    // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n    this[kInternalClient] = null;\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n    if (options.proxyHost) {\n      options.autoEncryption.proxyOptions = {\n        proxyHost: options.proxyHost,\n        proxyPort: options.proxyPort,\n        proxyUsername: options.proxyUsername,\n        proxyPassword: options.proxyPassword\n      };\n    }\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n  _createClass(Encrypter, [{\n    key: \"getInternalClient\",\n    value: function getInternalClient(client, uri, options) {\n      // TODO(NODE-4144): Remove new variable for type narrowing\n      var internalClient = this[kInternalClient];\n      if (internalClient == null) {\n        var clonedOptions = {};\n        for (var _i = 0, _arr = [].concat(_toConsumableArray(Object.getOwnPropertyNames(options)), _toConsumableArray(Object.getOwnPropertySymbols(options))); _i < _arr.length; _i++) {\n          var key = _arr[_i];\n          if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key)) continue;\n          Reflect.set(clonedOptions, key, Reflect.get(options, key));\n        }\n        clonedOptions.minPoolSize = 0;\n        internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n        this[kInternalClient] = internalClient;\n        var _iterator = _createForOfIteratorHelper(constants_1.MONGO_CLIENT_EVENTS),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var eventName = _step.value;\n            var _iterator2 = _createForOfIteratorHelper(client.listeners(eventName)),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var listener = _step2.value;\n                internalClient.on(eventName, listener);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        client.on('newListener', function (eventName, listener) {\n          var _internalClient;\n          (_internalClient = internalClient) === null || _internalClient === void 0 ? void 0 : _internalClient.on(eventName, listener);\n        });\n        this.needsConnecting = true;\n      }\n      return internalClient;\n    }\n  }, {\n    key: \"connectInternalClient\",\n    value: function () {\n      var _connectInternalClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var internalClient;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // TODO(NODE-4144): Remove new variable for type narrowing\n              internalClient = this[kInternalClient];\n              if (!(this.needsConnecting && internalClient != null)) {\n                _context.next = 5;\n                break;\n              }\n              this.needsConnecting = false;\n              _context.next = 5;\n              return internalClient.connect();\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function connectInternalClient() {\n        return _connectInternalClient.apply(this, arguments);\n      }\n      return connectInternalClient;\n    }()\n  }, {\n    key: \"close\",\n    value: function close(client, force, callback) {\n      var _this = this;\n      this.autoEncrypter.teardown(!!force, function (e) {\n        var internalClient = _this[kInternalClient];\n        if (internalClient != null && client !== internalClient) {\n          internalClient.close(force).then(function () {\n            return callback();\n          }, function (error) {\n            return callback(error);\n          });\n          return;\n        }\n        callback(e);\n      });\n    }\n  }], [{\n    key: \"checkForMongoCrypt\",\n    value: function checkForMongoCrypt() {\n      var mongodbClientEncryption = (0, utils_1.getMongoDBClientEncryption)();\n      if (mongodbClientEncryption == null) {\n        throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' + 'Please add `mongodb-client-encryption` as a dependency of your project');\n      }\n      AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n    }\n  }]);\n  return Encrypter;\n}();\nexports.Encrypter = Encrypter;","map":{"version":3,"names":["_regeneratorRuntime","require","default","_asyncToGenerator","_createForOfIteratorHelper","_toConsumableArray","_classCallCheck","_createClass","constants_1","error_1","mongo_client_1","utils_1","AutoEncrypterClass","kInternalClient","Symbol","Encrypter","client","uri","options","autoEncryption","MongoInvalidArgumentError","bypassAutoEncryption","needsConnecting","maxPoolSize","keyVaultClient","getInternalClient","metadataClient","undefined","proxyHost","proxyOptions","proxyPort","proxyUsername","proxyPassword","autoEncrypter","key","value","internalClient","clonedOptions","_i","_arr","concat","Object","getOwnPropertyNames","getOwnPropertySymbols","length","includes","Reflect","set","get","minPoolSize","MongoClient","_iterator","MONGO_CLIENT_EVENTS","_step","s","n","done","eventName","_iterator2","listeners","_step2","listener","on","err","e","f","_internalClient","_connectInternalClient","mark","_callee","wrap","_callee$","_context","prev","next","connect","stop","connectInternalClient","apply","arguments","close","force","callback","_this","teardown","then","error","checkForMongoCrypt","mongodbClientEncryption","getMongoDBClientEncryption","MongoMissingDependencyError","extension","AutoEncrypter","exports"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/encrypter.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport { MONGO_CLIENT_EVENTS } from './constants';\nimport type { AutoEncrypter, AutoEncryptionOptions } from './deps';\nimport { MongoInvalidArgumentError, MongoMissingDependencyError } from './error';\nimport { MongoClient, type MongoClientOptions } from './mongo_client';\nimport { type Callback, getMongoDBClientEncryption } from './utils';\n\nlet AutoEncrypterClass: { new (...args: ConstructorParameters<AutoEncrypter>): AutoEncrypter };\n\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n\n/** @internal */\nexport interface EncrypterOptions {\n  autoEncryption: AutoEncryptionOptions;\n  maxPoolSize?: number;\n}\n\n/** @internal */\nexport class Encrypter {\n  [kInternalClient]: MongoClient | null;\n  bypassAutoEncryption: boolean;\n  needsConnecting: boolean;\n  autoEncrypter: AutoEncrypter;\n\n  constructor(client: MongoClient, uri: string, options: MongoClientOptions) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    }\n    // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n    this[kInternalClient] = null;\n\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (options.proxyHost) {\n      options.autoEncryption.proxyOptions = {\n        proxyHost: options.proxyHost,\n        proxyPort: options.proxyPort,\n        proxyUsername: options.proxyUsername,\n        proxyPassword: options.proxyPassword\n      };\n    }\n\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n\n  getInternalClient(client: MongoClient, uri: string, options: MongoClientOptions): MongoClient {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    let internalClient = this[kInternalClient];\n    if (internalClient == null) {\n      const clonedOptions: MongoClientOptions = {};\n\n      for (const key of [\n        ...Object.getOwnPropertyNames(options),\n        ...Object.getOwnPropertySymbols(options)\n      ] as string[]) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n          continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n\n      clonedOptions.minPoolSize = 0;\n\n      internalClient = new MongoClient(uri, clonedOptions);\n      this[kInternalClient] = internalClient;\n\n      for (const eventName of MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          internalClient.on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        internalClient?.on(eventName, listener);\n      });\n\n      this.needsConnecting = true;\n    }\n    return internalClient;\n  }\n\n  async connectInternalClient(): Promise<void> {\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const internalClient = this[kInternalClient];\n    if (this.needsConnecting && internalClient != null) {\n      this.needsConnecting = false;\n      await internalClient.connect();\n    }\n  }\n\n  close(client: MongoClient, force: boolean, callback: Callback): void {\n    this.autoEncrypter.teardown(!!force, e => {\n      const internalClient = this[kInternalClient];\n      if (internalClient != null && client !== internalClient) {\n        internalClient.close(force).then(\n          () => callback(),\n          error => callback(error)\n        );\n        return;\n      }\n      callback(e);\n    });\n  }\n\n  static checkForMongoCrypt(): void {\n    const mongodbClientEncryption = getMongoDBClientEncryption();\n    if (mongodbClientEncryption == null) {\n      throw new MongoMissingDependencyError(\n        'Auto-encryption requested, but the module is not installed. ' +\n          'Please add `mongodb-client-encryption` as a dependency of your project'\n      );\n    }\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}