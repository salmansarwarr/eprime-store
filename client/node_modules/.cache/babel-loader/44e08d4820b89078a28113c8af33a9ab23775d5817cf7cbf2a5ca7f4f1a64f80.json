{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _inherits = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenEntryCache = exports.TokenEntry = void 0;\nvar cache_1 = require(\"./cache\");\n/* Default expiration is now for when no expiration provided */\nvar DEFAULT_EXPIRATION_SECS = 0;\n/** @internal */\nvar TokenEntry = /*#__PURE__*/function (_cache_1$ExpiringCach) {\n  _inherits(TokenEntry, _cache_1$ExpiringCach);\n  var _super = _createSuper(TokenEntry);\n  /**\n   * Instantiate the entry.\n   */\n  function TokenEntry(tokenResult, serverInfo, expiration) {\n    var _this;\n    _classCallCheck(this, TokenEntry);\n    _this = _super.call(this, expiration);\n    _this.tokenResult = tokenResult;\n    _this.serverInfo = serverInfo;\n    return _this;\n  }\n  return _createClass(TokenEntry);\n}(cache_1.ExpiringCacheEntry);\nexports.TokenEntry = TokenEntry;\n/**\n * Cache of OIDC token entries.\n * @internal\n */\nvar TokenEntryCache = /*#__PURE__*/function (_cache_1$Cache) {\n  _inherits(TokenEntryCache, _cache_1$Cache);\n  var _super2 = _createSuper(TokenEntryCache);\n  function TokenEntryCache() {\n    _classCallCheck(this, TokenEntryCache);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(TokenEntryCache, [{\n    key: \"addEntry\",\n    value:\n    /**\n     * Set an entry in the token cache.\n     */\n    function addEntry(address, username, callbackHash, tokenResult, serverInfo) {\n      var _tokenResult$expiresI;\n      var entry = new TokenEntry(tokenResult, serverInfo, (_tokenResult$expiresI = tokenResult.expiresInSeconds) !== null && _tokenResult$expiresI !== void 0 ? _tokenResult$expiresI : DEFAULT_EXPIRATION_SECS);\n      this.entries.set(this.cacheKey(address, username, callbackHash), entry);\n      return entry;\n    }\n    /**\n     * Delete an entry from the cache.\n     */\n  }, {\n    key: \"deleteEntry\",\n    value: function deleteEntry(address, username, callbackHash) {\n      this.entries.delete(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Get an entry from the cache.\n     */\n  }, {\n    key: \"getEntry\",\n    value: function getEntry(address, username, callbackHash) {\n      return this.entries.get(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Delete all expired entries from the cache.\n     */\n  }, {\n    key: \"deleteExpiredEntries\",\n    value: function deleteExpiredEntries() {\n      var _iterator = _createForOfIteratorHelper(this.entries),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            key = _step$value[0],\n            entry = _step$value[1];\n          if (!entry.isValid()) {\n            this.entries.delete(key);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n  }, {\n    key: \"cacheKey\",\n    value: function cacheKey(address, username, callbackHash) {\n      return this.hashedCacheKey(address, username, callbackHash);\n    }\n  }]);\n  return TokenEntryCache;\n}(cache_1.Cache);\nexports.TokenEntryCache = TokenEntryCache;","map":{"version":3,"names":["cache_1","require","DEFAULT_EXPIRATION_SECS","TokenEntry","_cache_1$ExpiringCach","_inherits","_super","_createSuper","tokenResult","serverInfo","expiration","_this","_classCallCheck","call","_createClass","ExpiringCacheEntry","exports","TokenEntryCache","_cache_1$Cache","_super2","apply","arguments","key","value","addEntry","address","username","callbackHash","_tokenResult$expiresI","entry","expiresInSeconds","entries","set","cacheKey","deleteEntry","delete","getEntry","get","deleteExpiredEntries","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","isValid","err","e","f","hashedCacheKey","Cache"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/cmap/auth/mongodb_oidc/token_entry_cache.ts"],"sourcesContent":["import type { IdPServerInfo, IdPServerResponse } from '../mongodb_oidc';\nimport { Cache, ExpiringCacheEntry } from './cache';\n\n/* Default expiration is now for when no expiration provided */\nconst DEFAULT_EXPIRATION_SECS = 0;\n\n/** @internal */\nexport class TokenEntry extends ExpiringCacheEntry {\n  tokenResult: IdPServerResponse;\n  serverInfo: IdPServerInfo;\n\n  /**\n   * Instantiate the entry.\n   */\n  constructor(tokenResult: IdPServerResponse, serverInfo: IdPServerInfo, expiration: number) {\n    super(expiration);\n    this.tokenResult = tokenResult;\n    this.serverInfo = serverInfo;\n  }\n}\n\n/**\n * Cache of OIDC token entries.\n * @internal\n */\nexport class TokenEntryCache extends Cache<TokenEntry> {\n  /**\n   * Set an entry in the token cache.\n   */\n  addEntry(\n    address: string,\n    username: string,\n    callbackHash: string,\n    tokenResult: IdPServerResponse,\n    serverInfo: IdPServerInfo\n  ): TokenEntry {\n    const entry = new TokenEntry(\n      tokenResult,\n      serverInfo,\n      tokenResult.expiresInSeconds ?? DEFAULT_EXPIRATION_SECS\n    );\n    this.entries.set(this.cacheKey(address, username, callbackHash), entry);\n    return entry;\n  }\n\n  /**\n   * Delete an entry from the cache.\n   */\n  deleteEntry(address: string, username: string, callbackHash: string): void {\n    this.entries.delete(this.cacheKey(address, username, callbackHash));\n  }\n\n  /**\n   * Get an entry from the cache.\n   */\n  getEntry(address: string, username: string, callbackHash: string): TokenEntry | undefined {\n    return this.entries.get(this.cacheKey(address, username, callbackHash));\n  }\n\n  /**\n   * Delete all expired entries from the cache.\n   */\n  deleteExpiredEntries(): void {\n    for (const [key, entry] of this.entries) {\n      if (!entry.isValid()) {\n        this.entries.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Create a cache key from the address and username.\n   */\n  cacheKey(address: string, username: string, callbackHash: string): string {\n    return this.hashedCacheKey(address, username, callbackHash);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}