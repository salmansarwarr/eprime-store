{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/salman/Documents/GitHub/FakeShop/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Cache = exports.ExpiringCacheEntry = void 0;\n/* 5 minutes in milliseconds */\nvar EXPIRATION_BUFFER_MS = 300000;\n/**\n * An entry in a cache that can expire in a certain amount of time.\n */\nvar ExpiringCacheEntry = /*#__PURE__*/function () {\n  /**\n   * Create a new expiring token entry.\n   */\n  function ExpiringCacheEntry(expiration) {\n    _classCallCheck(this, ExpiringCacheEntry);\n    this.expiration = this.expirationTime(expiration);\n  }\n  /**\n   * The entry is still valid if the expiration is more than\n   * 5 minutes from the expiration time.\n   */\n  _createClass(ExpiringCacheEntry, [{\n    key: \"isValid\",\n    value: function isValid() {\n      return this.expiration - Date.now() > EXPIRATION_BUFFER_MS;\n    }\n    /**\n     * Get an expiration time in milliseconds past epoch.\n     */\n  }, {\n    key: \"expirationTime\",\n    value: function expirationTime(expiresInSeconds) {\n      return Date.now() + expiresInSeconds * 1000;\n    }\n  }]);\n  return ExpiringCacheEntry;\n}();\nexports.ExpiringCacheEntry = ExpiringCacheEntry;\n/**\n * Base class for OIDC caches.\n */\nvar Cache = /*#__PURE__*/function () {\n  /**\n   * Create a new cache.\n   */\n  function Cache() {\n    _classCallCheck(this, Cache);\n    this.entries = new Map();\n  }\n  /**\n   * Clear the cache.\n   */\n  _createClass(Cache, [{\n    key: \"clear\",\n    value: function clear() {\n      this.entries.clear();\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n  }, {\n    key: \"hashedCacheKey\",\n    value: function hashedCacheKey(address, username, callbackHash) {\n      return JSON.stringify([address, username, callbackHash]);\n    }\n  }]);\n  return Cache;\n}();\nexports.Cache = Cache;","map":{"version":3,"names":["EXPIRATION_BUFFER_MS","ExpiringCacheEntry","expiration","_classCallCheck","expirationTime","_createClass","key","value","isValid","Date","now","expiresInSeconds","exports","Cache","entries","Map","clear","hashedCacheKey","address","username","callbackHash","JSON","stringify"],"sources":["/home/salman/Documents/GitHub/FakeShop/node_modules/mongodb/src/cmap/auth/mongodb_oidc/cache.ts"],"sourcesContent":["/* 5 minutes in milliseconds */\nconst EXPIRATION_BUFFER_MS = 300000;\n\n/**\n * An entry in a cache that can expire in a certain amount of time.\n */\nexport abstract class ExpiringCacheEntry {\n  expiration: number;\n\n  /**\n   * Create a new expiring token entry.\n   */\n  constructor(expiration: number) {\n    this.expiration = this.expirationTime(expiration);\n  }\n  /**\n   * The entry is still valid if the expiration is more than\n   * 5 minutes from the expiration time.\n   */\n  isValid() {\n    return this.expiration - Date.now() > EXPIRATION_BUFFER_MS;\n  }\n\n  /**\n   * Get an expiration time in milliseconds past epoch.\n   */\n  private expirationTime(expiresInSeconds: number): number {\n    return Date.now() + expiresInSeconds * 1000;\n  }\n}\n\n/**\n * Base class for OIDC caches.\n */\nexport abstract class Cache<T> {\n  entries: Map<string, T>;\n\n  /**\n   * Create a new cache.\n   */\n  constructor() {\n    this.entries = new Map<string, T>();\n  }\n\n  /**\n   * Clear the cache.\n   */\n  clear() {\n    this.entries.clear();\n  }\n\n  /**\n   * Implement the cache key for the token.\n   */\n  abstract cacheKey(address: string, username: string, callbackHash: string): string;\n\n  /**\n   * Create a cache key from the address and username.\n   */\n  hashedCacheKey(address: string, username: string, callbackHash: string): string {\n    return JSON.stringify([address, username, callbackHash]);\n  }\n}\n"],"mappings":";;;;;;;;AAAA;AACA,IAAMA,oBAAoB,GAAG,MAAM;AAEnC;;;AAAA,IAGsBC,kBAAkB;EAGtC;;;EAGA,SAAAA,mBAAYC,UAAkB;IAAAC,eAAA,OAAAF,kBAAA;IAC5B,IAAI,CAACC,UAAU,GAAG,IAAI,CAACE,cAAc,CAACF,UAAU,CAAC;EACnD;EACA;;;;EAAAG,YAAA,CAAAJ,kBAAA;IAAAK,GAAA;IAAAC,KAAA,EAIA,SAAAC,QAAA,EAAO;MACL,OAAO,IAAI,CAACN,UAAU,GAAGO,IAAI,CAACC,GAAG,EAAE,GAAGV,oBAAoB;IAC5D;IAEA;;;EAAA;IAAAM,GAAA;IAAAC,KAAA,EAGQ,SAAAH,eAAeO,gBAAwB;MAC7C,OAAOF,IAAI,CAACC,GAAG,EAAE,GAAGC,gBAAgB,GAAG,IAAI;IAC7C;EAAC;EAAA,OAAAV,kBAAA;AAAA;AAtBHW,OAAA,CAAAX,kBAAA,GAAAA,kBAAA;AAyBA;;;AAAA,IAGsBY,KAAK;EAGzB;;;EAGA,SAAAA,MAAA;IAAAV,eAAA,OAAAU,KAAA;IACE,IAAI,CAACC,OAAO,GAAG,IAAIC,GAAG,EAAa;EACrC;EAEA;;;EAAAV,YAAA,CAAAQ,KAAA;IAAAP,GAAA;IAAAC,KAAA,EAGA,SAAAS,MAAA,EAAK;MACH,IAAI,CAACF,OAAO,CAACE,KAAK,EAAE;IACtB;IAOA;;;EAAA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAAU,eAAeC,OAAe,EAAEC,QAAgB,EAAEC,YAAoB;MACpE,OAAOC,IAAI,CAACC,SAAS,CAAC,CAACJ,OAAO,EAAEC,QAAQ,EAAEC,YAAY,CAAC,CAAC;IAC1D;EAAC;EAAA,OAAAP,KAAA;AAAA;AA3BHD,OAAA,CAAAC,KAAA,GAAAA,KAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}